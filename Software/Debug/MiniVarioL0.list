
Test_assemblage_Vario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a594  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800a658  0800a658  0001a658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac58  0800ac58  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac60  0800ac60  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac60  0800ac60  0001ac60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac64  0800ac64  0001ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ac68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e0  0800ae44  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800ae44  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119c3  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e2b  00000000  00000000  00031bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  000349f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00035988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000153a3  00000000  00000000  00036760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa3f  00000000  00000000  0004bb03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d6a9  00000000  00000000  0005b542  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000451c  00000000  00000000  000d8c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a63c 	.word	0x0800a63c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800a63c 	.word	0x0800a63c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fff1 	bl	8001410 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff49 	bl	80012d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffe3 	bl	8001410 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffd9 	bl	8001410 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6b 	bl	8001348 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff61 	bl	8001348 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	1c08      	adds	r0, r1, #0
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f824 	bl	8000510 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f7ff ffcf 	bl	8000480 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 fdcf 	bl	800208c <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f001 fa64 	bl	80019c4 <__aeabi_dsub>
 80004fc:	f001 fdc6 	bl	800208c <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	464f      	mov	r7, r9
 8000514:	4646      	mov	r6, r8
 8000516:	46d6      	mov	lr, sl
 8000518:	b5c0      	push	{r6, r7, lr}
 800051a:	0004      	movs	r4, r0
 800051c:	b082      	sub	sp, #8
 800051e:	000d      	movs	r5, r1
 8000520:	4691      	mov	r9, r2
 8000522:	4698      	mov	r8, r3
 8000524:	428b      	cmp	r3, r1
 8000526:	d82f      	bhi.n	8000588 <__udivmoddi4+0x78>
 8000528:	d02c      	beq.n	8000584 <__udivmoddi4+0x74>
 800052a:	4641      	mov	r1, r8
 800052c:	4648      	mov	r0, r9
 800052e:	f001 fe6d 	bl	800220c <__clzdi2>
 8000532:	0029      	movs	r1, r5
 8000534:	0006      	movs	r6, r0
 8000536:	0020      	movs	r0, r4
 8000538:	f001 fe68 	bl	800220c <__clzdi2>
 800053c:	1a33      	subs	r3, r6, r0
 800053e:	469c      	mov	ip, r3
 8000540:	3b20      	subs	r3, #32
 8000542:	469a      	mov	sl, r3
 8000544:	d500      	bpl.n	8000548 <__udivmoddi4+0x38>
 8000546:	e076      	b.n	8000636 <__udivmoddi4+0x126>
 8000548:	464b      	mov	r3, r9
 800054a:	4652      	mov	r2, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001f      	movs	r7, r3
 8000550:	464b      	mov	r3, r9
 8000552:	4662      	mov	r2, ip
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d828      	bhi.n	80005ae <__udivmoddi4+0x9e>
 800055c:	d025      	beq.n	80005aa <__udivmoddi4+0x9a>
 800055e:	4653      	mov	r3, sl
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	41bd      	sbcs	r5, r7
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <__udivmoddi4+0x5a>
 8000568:	e07b      	b.n	8000662 <__udivmoddi4+0x152>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4652      	mov	r2, sl
 8000576:	4093      	lsls	r3, r2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	4662      	mov	r2, ip
 800057e:	4093      	lsls	r3, r2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e018      	b.n	80005b6 <__udivmoddi4+0xa6>
 8000584:	4282      	cmp	r2, r0
 8000586:	d9d0      	bls.n	800052a <__udivmoddi4+0x1a>
 8000588:	2200      	movs	r2, #0
 800058a:	2300      	movs	r3, #0
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <__udivmoddi4+0x8a>
 8000596:	601c      	str	r4, [r3, #0]
 8000598:	605d      	str	r5, [r3, #4]
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	b002      	add	sp, #8
 80005a0:	bc1c      	pop	{r2, r3, r4}
 80005a2:	4690      	mov	r8, r2
 80005a4:	4699      	mov	r9, r3
 80005a6:	46a2      	mov	sl, r4
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d9d7      	bls.n	800055e <__udivmoddi4+0x4e>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4663      	mov	r3, ip
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e9      	beq.n	8000590 <__udivmoddi4+0x80>
 80005bc:	07fb      	lsls	r3, r7, #31
 80005be:	4698      	mov	r8, r3
 80005c0:	4641      	mov	r1, r8
 80005c2:	0872      	lsrs	r2, r6, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	087b      	lsrs	r3, r7, #1
 80005c8:	4666      	mov	r6, ip
 80005ca:	e00e      	b.n	80005ea <__udivmoddi4+0xda>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d101      	bne.n	80005d4 <__udivmoddi4+0xc4>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	d80c      	bhi.n	80005ee <__udivmoddi4+0xde>
 80005d4:	1aa4      	subs	r4, r4, r2
 80005d6:	419d      	sbcs	r5, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	1924      	adds	r4, r4, r4
 80005dc:	416d      	adcs	r5, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1824      	adds	r4, r4, r0
 80005e4:	414d      	adcs	r5, r1
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d006      	beq.n	80005f8 <__udivmoddi4+0xe8>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d9ee      	bls.n	80005cc <__udivmoddi4+0xbc>
 80005ee:	3e01      	subs	r6, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d1f8      	bne.n	80005ea <__udivmoddi4+0xda>
 80005f8:	9800      	ldr	r0, [sp, #0]
 80005fa:	9901      	ldr	r1, [sp, #4]
 80005fc:	4653      	mov	r3, sl
 80005fe:	1900      	adds	r0, r0, r4
 8000600:	4169      	adcs	r1, r5
 8000602:	2b00      	cmp	r3, #0
 8000604:	db23      	blt.n	800064e <__udivmoddi4+0x13e>
 8000606:	002b      	movs	r3, r5
 8000608:	4652      	mov	r2, sl
 800060a:	40d3      	lsrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4664      	mov	r4, ip
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	4653      	mov	r3, sl
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	db2d      	blt.n	8000678 <__udivmoddi4+0x168>
 800061c:	0026      	movs	r6, r4
 800061e:	4657      	mov	r7, sl
 8000620:	40be      	lsls	r6, r7
 8000622:	0033      	movs	r3, r6
 8000624:	0026      	movs	r6, r4
 8000626:	4667      	mov	r7, ip
 8000628:	40be      	lsls	r6, r7
 800062a:	0032      	movs	r2, r6
 800062c:	1a80      	subs	r0, r0, r2
 800062e:	4199      	sbcs	r1, r3
 8000630:	9000      	str	r0, [sp, #0]
 8000632:	9101      	str	r1, [sp, #4]
 8000634:	e7ac      	b.n	8000590 <__udivmoddi4+0x80>
 8000636:	4662      	mov	r2, ip
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	40da      	lsrs	r2, r3
 8000640:	4661      	mov	r1, ip
 8000642:	0013      	movs	r3, r2
 8000644:	4642      	mov	r2, r8
 8000646:	408a      	lsls	r2, r1
 8000648:	0017      	movs	r7, r2
 800064a:	431f      	orrs	r7, r3
 800064c:	e780      	b.n	8000550 <__udivmoddi4+0x40>
 800064e:	4662      	mov	r2, ip
 8000650:	2320      	movs	r3, #32
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	4666      	mov	r6, ip
 8000658:	409a      	lsls	r2, r3
 800065a:	0023      	movs	r3, r4
 800065c:	40f3      	lsrs	r3, r6
 800065e:	4313      	orrs	r3, r2
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0xfc>
 8000662:	4662      	mov	r2, ip
 8000664:	2320      	movs	r3, #32
 8000666:	2100      	movs	r1, #0
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2200      	movs	r2, #0
 800066c:	9100      	str	r1, [sp, #0]
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	40da      	lsrs	r2, r3
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	e780      	b.n	800057a <__udivmoddi4+0x6a>
 8000678:	2320      	movs	r3, #32
 800067a:	4662      	mov	r2, ip
 800067c:	0026      	movs	r6, r4
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	40de      	lsrs	r6, r3
 8000682:	002f      	movs	r7, r5
 8000684:	46b0      	mov	r8, r6
 8000686:	4666      	mov	r6, ip
 8000688:	40b7      	lsls	r7, r6
 800068a:	4646      	mov	r6, r8
 800068c:	003b      	movs	r3, r7
 800068e:	4333      	orrs	r3, r6
 8000690:	e7c8      	b.n	8000624 <__udivmoddi4+0x114>
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__aeabi_dadd>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	464f      	mov	r7, r9
 8000698:	4646      	mov	r6, r8
 800069a:	46d6      	mov	lr, sl
 800069c:	000c      	movs	r4, r1
 800069e:	0309      	lsls	r1, r1, #12
 80006a0:	b5c0      	push	{r6, r7, lr}
 80006a2:	0a49      	lsrs	r1, r1, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	005e      	lsls	r6, r3, #1
 80006a8:	4339      	orrs	r1, r7
 80006aa:	031f      	lsls	r7, r3, #12
 80006ac:	0fdb      	lsrs	r3, r3, #31
 80006ae:	469c      	mov	ip, r3
 80006b0:	0065      	lsls	r5, r4, #1
 80006b2:	0a7b      	lsrs	r3, r7, #9
 80006b4:	0f57      	lsrs	r7, r2, #29
 80006b6:	431f      	orrs	r7, r3
 80006b8:	0d6d      	lsrs	r5, r5, #21
 80006ba:	0fe4      	lsrs	r4, r4, #31
 80006bc:	0d76      	lsrs	r6, r6, #21
 80006be:	46a1      	mov	r9, r4
 80006c0:	00c0      	lsls	r0, r0, #3
 80006c2:	46b8      	mov	r8, r7
 80006c4:	00d2      	lsls	r2, r2, #3
 80006c6:	1bab      	subs	r3, r5, r6
 80006c8:	4564      	cmp	r4, ip
 80006ca:	d07b      	beq.n	80007c4 <__aeabi_dadd+0x130>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd5f      	ble.n	8000790 <__aeabi_dadd+0xfc>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_dadd+0x42>
 80006d4:	e0a4      	b.n	8000820 <__aeabi_dadd+0x18c>
 80006d6:	003e      	movs	r6, r7
 80006d8:	4316      	orrs	r6, r2
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x4a>
 80006dc:	e112      	b.n	8000904 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x52>
 80006e4:	e19e      	b.n	8000a24 <__aeabi_dadd+0x390>
 80006e6:	1a87      	subs	r7, r0, r2
 80006e8:	4643      	mov	r3, r8
 80006ea:	42b8      	cmp	r0, r7
 80006ec:	4180      	sbcs	r0, r0
 80006ee:	2501      	movs	r5, #1
 80006f0:	1ac9      	subs	r1, r1, r3
 80006f2:	4240      	negs	r0, r0
 80006f4:	1a09      	subs	r1, r1, r0
 80006f6:	020b      	lsls	r3, r1, #8
 80006f8:	d400      	bmi.n	80006fc <__aeabi_dadd+0x68>
 80006fa:	e131      	b.n	8000960 <__aeabi_dadd+0x2cc>
 80006fc:	0249      	lsls	r1, r1, #9
 80006fe:	0a4e      	lsrs	r6, r1, #9
 8000700:	2e00      	cmp	r6, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x72>
 8000704:	e16e      	b.n	80009e4 <__aeabi_dadd+0x350>
 8000706:	0030      	movs	r0, r6
 8000708:	f001 fd62 	bl	80021d0 <__clzsi2>
 800070c:	0003      	movs	r3, r0
 800070e:	3b08      	subs	r3, #8
 8000710:	2b1f      	cmp	r3, #31
 8000712:	dd00      	ble.n	8000716 <__aeabi_dadd+0x82>
 8000714:	e161      	b.n	80009da <__aeabi_dadd+0x346>
 8000716:	2220      	movs	r2, #32
 8000718:	0039      	movs	r1, r7
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	409e      	lsls	r6, r3
 800071e:	40d1      	lsrs	r1, r2
 8000720:	409f      	lsls	r7, r3
 8000722:	430e      	orrs	r6, r1
 8000724:	429d      	cmp	r5, r3
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x96>
 8000728:	e151      	b.n	80009ce <__aeabi_dadd+0x33a>
 800072a:	1b5d      	subs	r5, r3, r5
 800072c:	1c6b      	adds	r3, r5, #1
 800072e:	2b1f      	cmp	r3, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0xa0>
 8000732:	e17c      	b.n	8000a2e <__aeabi_dadd+0x39a>
 8000734:	2120      	movs	r1, #32
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	003d      	movs	r5, r7
 800073a:	0030      	movs	r0, r6
 800073c:	408f      	lsls	r7, r1
 800073e:	4088      	lsls	r0, r1
 8000740:	40dd      	lsrs	r5, r3
 8000742:	1e79      	subs	r1, r7, #1
 8000744:	418f      	sbcs	r7, r1
 8000746:	0031      	movs	r1, r6
 8000748:	2207      	movs	r2, #7
 800074a:	4328      	orrs	r0, r5
 800074c:	40d9      	lsrs	r1, r3
 800074e:	2500      	movs	r5, #0
 8000750:	4307      	orrs	r7, r0
 8000752:	403a      	ands	r2, r7
 8000754:	2a00      	cmp	r2, #0
 8000756:	d009      	beq.n	800076c <__aeabi_dadd+0xd8>
 8000758:	230f      	movs	r3, #15
 800075a:	403b      	ands	r3, r7
 800075c:	2b04      	cmp	r3, #4
 800075e:	d005      	beq.n	800076c <__aeabi_dadd+0xd8>
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	42bb      	cmp	r3, r7
 8000764:	41bf      	sbcs	r7, r7
 8000766:	427f      	negs	r7, r7
 8000768:	19c9      	adds	r1, r1, r7
 800076a:	001f      	movs	r7, r3
 800076c:	020b      	lsls	r3, r1, #8
 800076e:	d400      	bmi.n	8000772 <__aeabi_dadd+0xde>
 8000770:	e226      	b.n	8000bc0 <__aeabi_dadd+0x52c>
 8000772:	1c6a      	adds	r2, r5, #1
 8000774:	4bc6      	ldr	r3, [pc, #792]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000776:	0555      	lsls	r5, r2, #21
 8000778:	0d6d      	lsrs	r5, r5, #21
 800077a:	429a      	cmp	r2, r3
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0xec>
 800077e:	e106      	b.n	800098e <__aeabi_dadd+0x2fa>
 8000780:	4ac4      	ldr	r2, [pc, #784]	; (8000a94 <__aeabi_dadd+0x400>)
 8000782:	08ff      	lsrs	r7, r7, #3
 8000784:	400a      	ands	r2, r1
 8000786:	0753      	lsls	r3, r2, #29
 8000788:	0252      	lsls	r2, r2, #9
 800078a:	433b      	orrs	r3, r7
 800078c:	0b12      	lsrs	r2, r2, #12
 800078e:	e08e      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_dadd+0x102>
 8000794:	e0b8      	b.n	8000908 <__aeabi_dadd+0x274>
 8000796:	1c6b      	adds	r3, r5, #1
 8000798:	055b      	lsls	r3, r3, #21
 800079a:	0d5b      	lsrs	r3, r3, #21
 800079c:	2b01      	cmp	r3, #1
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_dadd+0x10e>
 80007a0:	e130      	b.n	8000a04 <__aeabi_dadd+0x370>
 80007a2:	1a87      	subs	r7, r0, r2
 80007a4:	4643      	mov	r3, r8
 80007a6:	42b8      	cmp	r0, r7
 80007a8:	41b6      	sbcs	r6, r6
 80007aa:	1acb      	subs	r3, r1, r3
 80007ac:	4276      	negs	r6, r6
 80007ae:	1b9e      	subs	r6, r3, r6
 80007b0:	0233      	lsls	r3, r6, #8
 80007b2:	d500      	bpl.n	80007b6 <__aeabi_dadd+0x122>
 80007b4:	e14c      	b.n	8000a50 <__aeabi_dadd+0x3bc>
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	d1a1      	bne.n	8000700 <__aeabi_dadd+0x6c>
 80007bc:	2200      	movs	r2, #0
 80007be:	2400      	movs	r4, #0
 80007c0:	2500      	movs	r5, #0
 80007c2:	e070      	b.n	80008a6 <__aeabi_dadd+0x212>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_dadd+0x136>
 80007c8:	e0e5      	b.n	8000996 <__aeabi_dadd+0x302>
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x13c>
 80007ce:	e083      	b.n	80008d8 <__aeabi_dadd+0x244>
 80007d0:	4eaf      	ldr	r6, [pc, #700]	; (8000a90 <__aeabi_dadd+0x3fc>)
 80007d2:	42b5      	cmp	r5, r6
 80007d4:	d060      	beq.n	8000898 <__aeabi_dadd+0x204>
 80007d6:	2680      	movs	r6, #128	; 0x80
 80007d8:	0436      	lsls	r6, r6, #16
 80007da:	4337      	orrs	r7, r6
 80007dc:	46b8      	mov	r8, r7
 80007de:	2b38      	cmp	r3, #56	; 0x38
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x150>
 80007e2:	e13e      	b.n	8000a62 <__aeabi_dadd+0x3ce>
 80007e4:	4643      	mov	r3, r8
 80007e6:	4313      	orrs	r3, r2
 80007e8:	001f      	movs	r7, r3
 80007ea:	1e7a      	subs	r2, r7, #1
 80007ec:	4197      	sbcs	r7, r2
 80007ee:	183f      	adds	r7, r7, r0
 80007f0:	4287      	cmp	r7, r0
 80007f2:	4180      	sbcs	r0, r0
 80007f4:	4240      	negs	r0, r0
 80007f6:	1809      	adds	r1, r1, r0
 80007f8:	020b      	lsls	r3, r1, #8
 80007fa:	d400      	bmi.n	80007fe <__aeabi_dadd+0x16a>
 80007fc:	e0b0      	b.n	8000960 <__aeabi_dadd+0x2cc>
 80007fe:	4ba4      	ldr	r3, [pc, #656]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000800:	3501      	adds	r5, #1
 8000802:	429d      	cmp	r5, r3
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x174>
 8000806:	e0c3      	b.n	8000990 <__aeabi_dadd+0x2fc>
 8000808:	4aa2      	ldr	r2, [pc, #648]	; (8000a94 <__aeabi_dadd+0x400>)
 800080a:	087b      	lsrs	r3, r7, #1
 800080c:	400a      	ands	r2, r1
 800080e:	2101      	movs	r1, #1
 8000810:	400f      	ands	r7, r1
 8000812:	431f      	orrs	r7, r3
 8000814:	0851      	lsrs	r1, r2, #1
 8000816:	07d3      	lsls	r3, r2, #31
 8000818:	2207      	movs	r2, #7
 800081a:	431f      	orrs	r7, r3
 800081c:	403a      	ands	r2, r7
 800081e:	e799      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000820:	4e9b      	ldr	r6, [pc, #620]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000822:	42b5      	cmp	r5, r6
 8000824:	d038      	beq.n	8000898 <__aeabi_dadd+0x204>
 8000826:	2680      	movs	r6, #128	; 0x80
 8000828:	0436      	lsls	r6, r6, #16
 800082a:	4337      	orrs	r7, r6
 800082c:	46b8      	mov	r8, r7
 800082e:	2b38      	cmp	r3, #56	; 0x38
 8000830:	dd00      	ble.n	8000834 <__aeabi_dadd+0x1a0>
 8000832:	e0dc      	b.n	80009ee <__aeabi_dadd+0x35a>
 8000834:	2b1f      	cmp	r3, #31
 8000836:	dc00      	bgt.n	800083a <__aeabi_dadd+0x1a6>
 8000838:	e130      	b.n	8000a9c <__aeabi_dadd+0x408>
 800083a:	001e      	movs	r6, r3
 800083c:	4647      	mov	r7, r8
 800083e:	3e20      	subs	r6, #32
 8000840:	40f7      	lsrs	r7, r6
 8000842:	46bc      	mov	ip, r7
 8000844:	2b20      	cmp	r3, #32
 8000846:	d004      	beq.n	8000852 <__aeabi_dadd+0x1be>
 8000848:	2640      	movs	r6, #64	; 0x40
 800084a:	1af3      	subs	r3, r6, r3
 800084c:	4646      	mov	r6, r8
 800084e:	409e      	lsls	r6, r3
 8000850:	4332      	orrs	r2, r6
 8000852:	0017      	movs	r7, r2
 8000854:	4663      	mov	r3, ip
 8000856:	1e7a      	subs	r2, r7, #1
 8000858:	4197      	sbcs	r7, r2
 800085a:	431f      	orrs	r7, r3
 800085c:	e0cc      	b.n	80009f8 <__aeabi_dadd+0x364>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x1d0>
 8000862:	e204      	b.n	8000c6e <__aeabi_dadd+0x5da>
 8000864:	4643      	mov	r3, r8
 8000866:	4313      	orrs	r3, r2
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x1d8>
 800086a:	e159      	b.n	8000b20 <__aeabi_dadd+0x48c>
 800086c:	074b      	lsls	r3, r1, #29
 800086e:	08c0      	lsrs	r0, r0, #3
 8000870:	4318      	orrs	r0, r3
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	08c9      	lsrs	r1, r1, #3
 8000876:	031b      	lsls	r3, r3, #12
 8000878:	4219      	tst	r1, r3
 800087a:	d008      	beq.n	800088e <__aeabi_dadd+0x1fa>
 800087c:	4645      	mov	r5, r8
 800087e:	08ed      	lsrs	r5, r5, #3
 8000880:	421d      	tst	r5, r3
 8000882:	d104      	bne.n	800088e <__aeabi_dadd+0x1fa>
 8000884:	4643      	mov	r3, r8
 8000886:	08d0      	lsrs	r0, r2, #3
 8000888:	0759      	lsls	r1, r3, #29
 800088a:	4308      	orrs	r0, r1
 800088c:	0029      	movs	r1, r5
 800088e:	0f42      	lsrs	r2, r0, #29
 8000890:	00c9      	lsls	r1, r1, #3
 8000892:	4d7f      	ldr	r5, [pc, #508]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000894:	4311      	orrs	r1, r2
 8000896:	00c0      	lsls	r0, r0, #3
 8000898:	074b      	lsls	r3, r1, #29
 800089a:	08ca      	lsrs	r2, r1, #3
 800089c:	497c      	ldr	r1, [pc, #496]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800089e:	08c0      	lsrs	r0, r0, #3
 80008a0:	4303      	orrs	r3, r0
 80008a2:	428d      	cmp	r5, r1
 80008a4:	d068      	beq.n	8000978 <__aeabi_dadd+0x2e4>
 80008a6:	0312      	lsls	r2, r2, #12
 80008a8:	056d      	lsls	r5, r5, #21
 80008aa:	0b12      	lsrs	r2, r2, #12
 80008ac:	0d6d      	lsrs	r5, r5, #21
 80008ae:	2100      	movs	r1, #0
 80008b0:	0312      	lsls	r2, r2, #12
 80008b2:	0018      	movs	r0, r3
 80008b4:	0b13      	lsrs	r3, r2, #12
 80008b6:	0d0a      	lsrs	r2, r1, #20
 80008b8:	0512      	lsls	r2, r2, #20
 80008ba:	431a      	orrs	r2, r3
 80008bc:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <__aeabi_dadd+0x404>)
 80008be:	052d      	lsls	r5, r5, #20
 80008c0:	4013      	ands	r3, r2
 80008c2:	432b      	orrs	r3, r5
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	07e4      	lsls	r4, r4, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4323      	orrs	r3, r4
 80008cc:	0019      	movs	r1, r3
 80008ce:	bc1c      	pop	{r2, r3, r4}
 80008d0:	4690      	mov	r8, r2
 80008d2:	4699      	mov	r9, r3
 80008d4:	46a2      	mov	sl, r4
 80008d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d8:	003e      	movs	r6, r7
 80008da:	4316      	orrs	r6, r2
 80008dc:	d012      	beq.n	8000904 <__aeabi_dadd+0x270>
 80008de:	1e5e      	subs	r6, r3, #1
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x252>
 80008e4:	e100      	b.n	8000ae8 <__aeabi_dadd+0x454>
 80008e6:	1887      	adds	r7, r0, r2
 80008e8:	4287      	cmp	r7, r0
 80008ea:	4180      	sbcs	r0, r0
 80008ec:	4441      	add	r1, r8
 80008ee:	4240      	negs	r0, r0
 80008f0:	1809      	adds	r1, r1, r0
 80008f2:	2501      	movs	r5, #1
 80008f4:	020b      	lsls	r3, r1, #8
 80008f6:	d533      	bpl.n	8000960 <__aeabi_dadd+0x2cc>
 80008f8:	2502      	movs	r5, #2
 80008fa:	e785      	b.n	8000808 <__aeabi_dadd+0x174>
 80008fc:	4664      	mov	r4, ip
 80008fe:	0033      	movs	r3, r6
 8000900:	4641      	mov	r1, r8
 8000902:	0010      	movs	r0, r2
 8000904:	001d      	movs	r5, r3
 8000906:	e7c7      	b.n	8000898 <__aeabi_dadd+0x204>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d000      	beq.n	800090e <__aeabi_dadd+0x27a>
 800090c:	e0da      	b.n	8000ac4 <__aeabi_dadd+0x430>
 800090e:	000c      	movs	r4, r1
 8000910:	4304      	orrs	r4, r0
 8000912:	d0f3      	beq.n	80008fc <__aeabi_dadd+0x268>
 8000914:	1c5c      	adds	r4, r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x286>
 8000918:	e19f      	b.n	8000c5a <__aeabi_dadd+0x5c6>
 800091a:	4c5d      	ldr	r4, [pc, #372]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800091c:	42a6      	cmp	r6, r4
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x28e>
 8000920:	e12f      	b.n	8000b82 <__aeabi_dadd+0x4ee>
 8000922:	43db      	mvns	r3, r3
 8000924:	2b38      	cmp	r3, #56	; 0x38
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0x296>
 8000928:	e166      	b.n	8000bf8 <__aeabi_dadd+0x564>
 800092a:	2b1f      	cmp	r3, #31
 800092c:	dd00      	ble.n	8000930 <__aeabi_dadd+0x29c>
 800092e:	e183      	b.n	8000c38 <__aeabi_dadd+0x5a4>
 8000930:	2420      	movs	r4, #32
 8000932:	0005      	movs	r5, r0
 8000934:	1ae4      	subs	r4, r4, r3
 8000936:	000f      	movs	r7, r1
 8000938:	40dd      	lsrs	r5, r3
 800093a:	40d9      	lsrs	r1, r3
 800093c:	40a0      	lsls	r0, r4
 800093e:	4643      	mov	r3, r8
 8000940:	40a7      	lsls	r7, r4
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	1e44      	subs	r4, r0, #1
 8000946:	41a0      	sbcs	r0, r4
 8000948:	4698      	mov	r8, r3
 800094a:	432f      	orrs	r7, r5
 800094c:	4338      	orrs	r0, r7
 800094e:	1a17      	subs	r7, r2, r0
 8000950:	42ba      	cmp	r2, r7
 8000952:	4192      	sbcs	r2, r2
 8000954:	4643      	mov	r3, r8
 8000956:	4252      	negs	r2, r2
 8000958:	1a99      	subs	r1, r3, r2
 800095a:	4664      	mov	r4, ip
 800095c:	0035      	movs	r5, r6
 800095e:	e6ca      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000960:	2207      	movs	r2, #7
 8000962:	403a      	ands	r2, r7
 8000964:	2a00      	cmp	r2, #0
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x2d6>
 8000968:	e6f6      	b.n	8000758 <__aeabi_dadd+0xc4>
 800096a:	074b      	lsls	r3, r1, #29
 800096c:	08ca      	lsrs	r2, r1, #3
 800096e:	4948      	ldr	r1, [pc, #288]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000970:	08ff      	lsrs	r7, r7, #3
 8000972:	433b      	orrs	r3, r7
 8000974:	428d      	cmp	r5, r1
 8000976:	d196      	bne.n	80008a6 <__aeabi_dadd+0x212>
 8000978:	0019      	movs	r1, r3
 800097a:	4311      	orrs	r1, r2
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2ec>
 800097e:	e19e      	b.n	8000cbe <__aeabi_dadd+0x62a>
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0309      	lsls	r1, r1, #12
 8000984:	430a      	orrs	r2, r1
 8000986:	0312      	lsls	r2, r2, #12
 8000988:	0b12      	lsrs	r2, r2, #12
 800098a:	4d41      	ldr	r5, [pc, #260]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800098c:	e78f      	b.n	80008ae <__aeabi_dadd+0x21a>
 800098e:	0015      	movs	r5, r2
 8000990:	2200      	movs	r2, #0
 8000992:	2300      	movs	r3, #0
 8000994:	e78b      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d000      	beq.n	800099c <__aeabi_dadd+0x308>
 800099a:	e0c7      	b.n	8000b2c <__aeabi_dadd+0x498>
 800099c:	1c6b      	adds	r3, r5, #1
 800099e:	055f      	lsls	r7, r3, #21
 80009a0:	0d7f      	lsrs	r7, r7, #21
 80009a2:	2f01      	cmp	r7, #1
 80009a4:	dc00      	bgt.n	80009a8 <__aeabi_dadd+0x314>
 80009a6:	e0f1      	b.n	8000b8c <__aeabi_dadd+0x4f8>
 80009a8:	4d39      	ldr	r5, [pc, #228]	; (8000a90 <__aeabi_dadd+0x3fc>)
 80009aa:	42ab      	cmp	r3, r5
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x31c>
 80009ae:	e0b9      	b.n	8000b24 <__aeabi_dadd+0x490>
 80009b0:	1885      	adds	r5, r0, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	4285      	cmp	r5, r0
 80009b6:	4189      	sbcs	r1, r1
 80009b8:	4442      	add	r2, r8
 80009ba:	4249      	negs	r1, r1
 80009bc:	1851      	adds	r1, r2, r1
 80009be:	2207      	movs	r2, #7
 80009c0:	07cf      	lsls	r7, r1, #31
 80009c2:	086d      	lsrs	r5, r5, #1
 80009c4:	432f      	orrs	r7, r5
 80009c6:	0849      	lsrs	r1, r1, #1
 80009c8:	403a      	ands	r2, r7
 80009ca:	001d      	movs	r5, r3
 80009cc:	e6c2      	b.n	8000754 <__aeabi_dadd+0xc0>
 80009ce:	2207      	movs	r2, #7
 80009d0:	4930      	ldr	r1, [pc, #192]	; (8000a94 <__aeabi_dadd+0x400>)
 80009d2:	1aed      	subs	r5, r5, r3
 80009d4:	4031      	ands	r1, r6
 80009d6:	403a      	ands	r2, r7
 80009d8:	e6bc      	b.n	8000754 <__aeabi_dadd+0xc0>
 80009da:	003e      	movs	r6, r7
 80009dc:	3828      	subs	r0, #40	; 0x28
 80009de:	4086      	lsls	r6, r0
 80009e0:	2700      	movs	r7, #0
 80009e2:	e69f      	b.n	8000724 <__aeabi_dadd+0x90>
 80009e4:	0038      	movs	r0, r7
 80009e6:	f001 fbf3 	bl	80021d0 <__clzsi2>
 80009ea:	3020      	adds	r0, #32
 80009ec:	e68e      	b.n	800070c <__aeabi_dadd+0x78>
 80009ee:	4643      	mov	r3, r8
 80009f0:	4313      	orrs	r3, r2
 80009f2:	001f      	movs	r7, r3
 80009f4:	1e7a      	subs	r2, r7, #1
 80009f6:	4197      	sbcs	r7, r2
 80009f8:	1bc7      	subs	r7, r0, r7
 80009fa:	42b8      	cmp	r0, r7
 80009fc:	4180      	sbcs	r0, r0
 80009fe:	4240      	negs	r0, r0
 8000a00:	1a09      	subs	r1, r1, r0
 8000a02:	e678      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000a04:	000e      	movs	r6, r1
 8000a06:	003b      	movs	r3, r7
 8000a08:	4306      	orrs	r6, r0
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d161      	bne.n	8000ad4 <__aeabi_dadd+0x440>
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x382>
 8000a14:	e0f4      	b.n	8000c00 <__aeabi_dadd+0x56c>
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x388>
 8000a1a:	e11b      	b.n	8000c54 <__aeabi_dadd+0x5c0>
 8000a1c:	4664      	mov	r4, ip
 8000a1e:	0039      	movs	r1, r7
 8000a20:	0010      	movs	r0, r2
 8000a22:	e739      	b.n	8000898 <__aeabi_dadd+0x204>
 8000a24:	4f1a      	ldr	r7, [pc, #104]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000a26:	42bb      	cmp	r3, r7
 8000a28:	d07a      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000a2a:	0033      	movs	r3, r6
 8000a2c:	e6ff      	b.n	800082e <__aeabi_dadd+0x19a>
 8000a2e:	0030      	movs	r0, r6
 8000a30:	3d1f      	subs	r5, #31
 8000a32:	40e8      	lsrs	r0, r5
 8000a34:	2b20      	cmp	r3, #32
 8000a36:	d003      	beq.n	8000a40 <__aeabi_dadd+0x3ac>
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	1acb      	subs	r3, r1, r3
 8000a3c:	409e      	lsls	r6, r3
 8000a3e:	4337      	orrs	r7, r6
 8000a40:	1e7b      	subs	r3, r7, #1
 8000a42:	419f      	sbcs	r7, r3
 8000a44:	2207      	movs	r2, #7
 8000a46:	4307      	orrs	r7, r0
 8000a48:	403a      	ands	r2, r7
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	e789      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000a50:	1a17      	subs	r7, r2, r0
 8000a52:	4643      	mov	r3, r8
 8000a54:	42ba      	cmp	r2, r7
 8000a56:	41b6      	sbcs	r6, r6
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	4276      	negs	r6, r6
 8000a5c:	1b8e      	subs	r6, r1, r6
 8000a5e:	4664      	mov	r4, ip
 8000a60:	e64e      	b.n	8000700 <__aeabi_dadd+0x6c>
 8000a62:	2b1f      	cmp	r3, #31
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_dadd+0x3d4>
 8000a66:	e0ad      	b.n	8000bc4 <__aeabi_dadd+0x530>
 8000a68:	2620      	movs	r6, #32
 8000a6a:	4647      	mov	r7, r8
 8000a6c:	1af6      	subs	r6, r6, r3
 8000a6e:	40b7      	lsls	r7, r6
 8000a70:	46b9      	mov	r9, r7
 8000a72:	0017      	movs	r7, r2
 8000a74:	46b2      	mov	sl, r6
 8000a76:	40df      	lsrs	r7, r3
 8000a78:	464e      	mov	r6, r9
 8000a7a:	433e      	orrs	r6, r7
 8000a7c:	0037      	movs	r7, r6
 8000a7e:	4656      	mov	r6, sl
 8000a80:	40b2      	lsls	r2, r6
 8000a82:	1e56      	subs	r6, r2, #1
 8000a84:	41b2      	sbcs	r2, r6
 8000a86:	4317      	orrs	r7, r2
 8000a88:	4642      	mov	r2, r8
 8000a8a:	40da      	lsrs	r2, r3
 8000a8c:	1889      	adds	r1, r1, r2
 8000a8e:	e6ae      	b.n	80007ee <__aeabi_dadd+0x15a>
 8000a90:	000007ff 	.word	0x000007ff
 8000a94:	ff7fffff 	.word	0xff7fffff
 8000a98:	800fffff 	.word	0x800fffff
 8000a9c:	2620      	movs	r6, #32
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	1af6      	subs	r6, r6, r3
 8000aa2:	40b7      	lsls	r7, r6
 8000aa4:	46b9      	mov	r9, r7
 8000aa6:	0017      	movs	r7, r2
 8000aa8:	46b2      	mov	sl, r6
 8000aaa:	40df      	lsrs	r7, r3
 8000aac:	464e      	mov	r6, r9
 8000aae:	433e      	orrs	r6, r7
 8000ab0:	0037      	movs	r7, r6
 8000ab2:	4656      	mov	r6, sl
 8000ab4:	40b2      	lsls	r2, r6
 8000ab6:	1e56      	subs	r6, r2, #1
 8000ab8:	41b2      	sbcs	r2, r6
 8000aba:	4317      	orrs	r7, r2
 8000abc:	4642      	mov	r2, r8
 8000abe:	40da      	lsrs	r2, r3
 8000ac0:	1a89      	subs	r1, r1, r2
 8000ac2:	e799      	b.n	80009f8 <__aeabi_dadd+0x364>
 8000ac4:	4c7f      	ldr	r4, [pc, #508]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d05b      	beq.n	8000b82 <__aeabi_dadd+0x4ee>
 8000aca:	2480      	movs	r4, #128	; 0x80
 8000acc:	0424      	lsls	r4, r4, #16
 8000ace:	425b      	negs	r3, r3
 8000ad0:	4321      	orrs	r1, r4
 8000ad2:	e727      	b.n	8000924 <__aeabi_dadd+0x290>
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d10c      	bne.n	8000af2 <__aeabi_dadd+0x45e>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x44a>
 8000adc:	e0cb      	b.n	8000c76 <__aeabi_dadd+0x5e2>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	0039      	movs	r1, r7
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	4d77      	ldr	r5, [pc, #476]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000ae6:	e6d7      	b.n	8000898 <__aeabi_dadd+0x204>
 8000ae8:	4f76      	ldr	r7, [pc, #472]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000aea:	42bb      	cmp	r3, r7
 8000aec:	d018      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000aee:	0033      	movs	r3, r6
 8000af0:	e675      	b.n	80007de <__aeabi_dadd+0x14a>
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d014      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000af6:	074b      	lsls	r3, r1, #29
 8000af8:	08c0      	lsrs	r0, r0, #3
 8000afa:	4318      	orrs	r0, r3
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	08c9      	lsrs	r1, r1, #3
 8000b00:	031b      	lsls	r3, r3, #12
 8000b02:	4219      	tst	r1, r3
 8000b04:	d007      	beq.n	8000b16 <__aeabi_dadd+0x482>
 8000b06:	08fc      	lsrs	r4, r7, #3
 8000b08:	421c      	tst	r4, r3
 8000b0a:	d104      	bne.n	8000b16 <__aeabi_dadd+0x482>
 8000b0c:	0779      	lsls	r1, r7, #29
 8000b0e:	08d0      	lsrs	r0, r2, #3
 8000b10:	4308      	orrs	r0, r1
 8000b12:	46e1      	mov	r9, ip
 8000b14:	0021      	movs	r1, r4
 8000b16:	464c      	mov	r4, r9
 8000b18:	0f42      	lsrs	r2, r0, #29
 8000b1a:	00c9      	lsls	r1, r1, #3
 8000b1c:	4311      	orrs	r1, r2
 8000b1e:	00c0      	lsls	r0, r0, #3
 8000b20:	4d68      	ldr	r5, [pc, #416]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000b22:	e6b9      	b.n	8000898 <__aeabi_dadd+0x204>
 8000b24:	001d      	movs	r5, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e6c0      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d15b      	bne.n	8000be8 <__aeabi_dadd+0x554>
 8000b30:	000d      	movs	r5, r1
 8000b32:	4305      	orrs	r5, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x4a4>
 8000b36:	e6e2      	b.n	80008fe <__aeabi_dadd+0x26a>
 8000b38:	1c5d      	adds	r5, r3, #1
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x4aa>
 8000b3c:	e0b0      	b.n	8000ca0 <__aeabi_dadd+0x60c>
 8000b3e:	4d61      	ldr	r5, [pc, #388]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000b40:	42ae      	cmp	r6, r5
 8000b42:	d01f      	beq.n	8000b84 <__aeabi_dadd+0x4f0>
 8000b44:	43db      	mvns	r3, r3
 8000b46:	2b38      	cmp	r3, #56	; 0x38
 8000b48:	dc71      	bgt.n	8000c2e <__aeabi_dadd+0x59a>
 8000b4a:	2b1f      	cmp	r3, #31
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x4bc>
 8000b4e:	e096      	b.n	8000c7e <__aeabi_dadd+0x5ea>
 8000b50:	2520      	movs	r5, #32
 8000b52:	000f      	movs	r7, r1
 8000b54:	1aed      	subs	r5, r5, r3
 8000b56:	40af      	lsls	r7, r5
 8000b58:	46b9      	mov	r9, r7
 8000b5a:	0007      	movs	r7, r0
 8000b5c:	46aa      	mov	sl, r5
 8000b5e:	40df      	lsrs	r7, r3
 8000b60:	464d      	mov	r5, r9
 8000b62:	433d      	orrs	r5, r7
 8000b64:	002f      	movs	r7, r5
 8000b66:	4655      	mov	r5, sl
 8000b68:	40a8      	lsls	r0, r5
 8000b6a:	40d9      	lsrs	r1, r3
 8000b6c:	1e45      	subs	r5, r0, #1
 8000b6e:	41a8      	sbcs	r0, r5
 8000b70:	4488      	add	r8, r1
 8000b72:	4307      	orrs	r7, r0
 8000b74:	18bf      	adds	r7, r7, r2
 8000b76:	4297      	cmp	r7, r2
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	4251      	negs	r1, r2
 8000b7c:	4441      	add	r1, r8
 8000b7e:	0035      	movs	r5, r6
 8000b80:	e63a      	b.n	80007f8 <__aeabi_dadd+0x164>
 8000b82:	4664      	mov	r4, ip
 8000b84:	0035      	movs	r5, r6
 8000b86:	4641      	mov	r1, r8
 8000b88:	0010      	movs	r0, r2
 8000b8a:	e685      	b.n	8000898 <__aeabi_dadd+0x204>
 8000b8c:	000b      	movs	r3, r1
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d000      	beq.n	8000b96 <__aeabi_dadd+0x502>
 8000b94:	e663      	b.n	800085e <__aeabi_dadd+0x1ca>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f5      	beq.n	8000b86 <__aeabi_dadd+0x4f2>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x50e>
 8000ba0:	e67a      	b.n	8000898 <__aeabi_dadd+0x204>
 8000ba2:	1887      	adds	r7, r0, r2
 8000ba4:	4287      	cmp	r7, r0
 8000ba6:	4180      	sbcs	r0, r0
 8000ba8:	2207      	movs	r2, #7
 8000baa:	4441      	add	r1, r8
 8000bac:	4240      	negs	r0, r0
 8000bae:	1809      	adds	r1, r1, r0
 8000bb0:	403a      	ands	r2, r7
 8000bb2:	020b      	lsls	r3, r1, #8
 8000bb4:	d400      	bmi.n	8000bb8 <__aeabi_dadd+0x524>
 8000bb6:	e6d5      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <__aeabi_dadd+0x634>)
 8000bba:	3501      	adds	r5, #1
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	e5c9      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000bc0:	0038      	movs	r0, r7
 8000bc2:	e669      	b.n	8000898 <__aeabi_dadd+0x204>
 8000bc4:	001e      	movs	r6, r3
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	3e20      	subs	r6, #32
 8000bca:	40f7      	lsrs	r7, r6
 8000bcc:	46bc      	mov	ip, r7
 8000bce:	2b20      	cmp	r3, #32
 8000bd0:	d004      	beq.n	8000bdc <__aeabi_dadd+0x548>
 8000bd2:	2640      	movs	r6, #64	; 0x40
 8000bd4:	1af3      	subs	r3, r6, r3
 8000bd6:	4646      	mov	r6, r8
 8000bd8:	409e      	lsls	r6, r3
 8000bda:	4332      	orrs	r2, r6
 8000bdc:	0017      	movs	r7, r2
 8000bde:	4663      	mov	r3, ip
 8000be0:	1e7a      	subs	r2, r7, #1
 8000be2:	4197      	sbcs	r7, r2
 8000be4:	431f      	orrs	r7, r3
 8000be6:	e602      	b.n	80007ee <__aeabi_dadd+0x15a>
 8000be8:	4d36      	ldr	r5, [pc, #216]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000bea:	42ae      	cmp	r6, r5
 8000bec:	d0ca      	beq.n	8000b84 <__aeabi_dadd+0x4f0>
 8000bee:	2580      	movs	r5, #128	; 0x80
 8000bf0:	042d      	lsls	r5, r5, #16
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	4329      	orrs	r1, r5
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_dadd+0x4b2>
 8000bf8:	4308      	orrs	r0, r1
 8000bfa:	1e41      	subs	r1, r0, #1
 8000bfc:	4188      	sbcs	r0, r1
 8000bfe:	e6a6      	b.n	800094e <__aeabi_dadd+0x2ba>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x572>
 8000c04:	e648      	b.n	8000898 <__aeabi_dadd+0x204>
 8000c06:	1a87      	subs	r7, r0, r2
 8000c08:	4643      	mov	r3, r8
 8000c0a:	42b8      	cmp	r0, r7
 8000c0c:	41b6      	sbcs	r6, r6
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	4276      	negs	r6, r6
 8000c12:	1b9e      	subs	r6, r3, r6
 8000c14:	0233      	lsls	r3, r6, #8
 8000c16:	d54b      	bpl.n	8000cb0 <__aeabi_dadd+0x61c>
 8000c18:	1a17      	subs	r7, r2, r0
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	42ba      	cmp	r2, r7
 8000c1e:	4192      	sbcs	r2, r2
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	4252      	negs	r2, r2
 8000c24:	1a89      	subs	r1, r1, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	4664      	mov	r4, ip
 8000c2a:	403a      	ands	r2, r7
 8000c2c:	e592      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000c2e:	4301      	orrs	r1, r0
 8000c30:	000f      	movs	r7, r1
 8000c32:	1e79      	subs	r1, r7, #1
 8000c34:	418f      	sbcs	r7, r1
 8000c36:	e79d      	b.n	8000b74 <__aeabi_dadd+0x4e0>
 8000c38:	001c      	movs	r4, r3
 8000c3a:	000f      	movs	r7, r1
 8000c3c:	3c20      	subs	r4, #32
 8000c3e:	40e7      	lsrs	r7, r4
 8000c40:	2b20      	cmp	r3, #32
 8000c42:	d003      	beq.n	8000c4c <__aeabi_dadd+0x5b8>
 8000c44:	2440      	movs	r4, #64	; 0x40
 8000c46:	1ae3      	subs	r3, r4, r3
 8000c48:	4099      	lsls	r1, r3
 8000c4a:	4308      	orrs	r0, r1
 8000c4c:	1e41      	subs	r1, r0, #1
 8000c4e:	4188      	sbcs	r0, r1
 8000c50:	4338      	orrs	r0, r7
 8000c52:	e67c      	b.n	800094e <__aeabi_dadd+0x2ba>
 8000c54:	2200      	movs	r2, #0
 8000c56:	2400      	movs	r4, #0
 8000c58:	e625      	b.n	80008a6 <__aeabi_dadd+0x212>
 8000c5a:	1a17      	subs	r7, r2, r0
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	42ba      	cmp	r2, r7
 8000c60:	4192      	sbcs	r2, r2
 8000c62:	1a59      	subs	r1, r3, r1
 8000c64:	4252      	negs	r2, r2
 8000c66:	1a89      	subs	r1, r1, r2
 8000c68:	4664      	mov	r4, ip
 8000c6a:	0035      	movs	r5, r6
 8000c6c:	e543      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000c6e:	4641      	mov	r1, r8
 8000c70:	0010      	movs	r0, r2
 8000c72:	4d14      	ldr	r5, [pc, #80]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000c74:	e610      	b.n	8000898 <__aeabi_dadd+0x204>
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	2400      	movs	r4, #0
 8000c7a:	0312      	lsls	r2, r2, #12
 8000c7c:	e680      	b.n	8000980 <__aeabi_dadd+0x2ec>
 8000c7e:	001d      	movs	r5, r3
 8000c80:	000f      	movs	r7, r1
 8000c82:	3d20      	subs	r5, #32
 8000c84:	40ef      	lsrs	r7, r5
 8000c86:	46bc      	mov	ip, r7
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d003      	beq.n	8000c94 <__aeabi_dadd+0x600>
 8000c8c:	2540      	movs	r5, #64	; 0x40
 8000c8e:	1aeb      	subs	r3, r5, r3
 8000c90:	4099      	lsls	r1, r3
 8000c92:	4308      	orrs	r0, r1
 8000c94:	0007      	movs	r7, r0
 8000c96:	4663      	mov	r3, ip
 8000c98:	1e78      	subs	r0, r7, #1
 8000c9a:	4187      	sbcs	r7, r0
 8000c9c:	431f      	orrs	r7, r3
 8000c9e:	e769      	b.n	8000b74 <__aeabi_dadd+0x4e0>
 8000ca0:	1887      	adds	r7, r0, r2
 8000ca2:	4297      	cmp	r7, r2
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4441      	add	r1, r8
 8000ca8:	425b      	negs	r3, r3
 8000caa:	18c9      	adds	r1, r1, r3
 8000cac:	0035      	movs	r5, r6
 8000cae:	e5a3      	b.n	80007f8 <__aeabi_dadd+0x164>
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	4333      	orrs	r3, r6
 8000cb4:	d0ce      	beq.n	8000c54 <__aeabi_dadd+0x5c0>
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	0031      	movs	r1, r6
 8000cba:	403a      	ands	r2, r7
 8000cbc:	e652      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	e5f4      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000cc4:	000007ff 	.word	0x000007ff
 8000cc8:	ff7fffff 	.word	0xff7fffff

08000ccc <__aeabi_ddiv>:
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	4657      	mov	r7, sl
 8000cd0:	46de      	mov	lr, fp
 8000cd2:	464e      	mov	r6, r9
 8000cd4:	4645      	mov	r5, r8
 8000cd6:	b5e0      	push	{r5, r6, r7, lr}
 8000cd8:	4683      	mov	fp, r0
 8000cda:	0007      	movs	r7, r0
 8000cdc:	030e      	lsls	r6, r1, #12
 8000cde:	0048      	lsls	r0, r1, #1
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	4692      	mov	sl, r2
 8000ce4:	001c      	movs	r4, r3
 8000ce6:	0b36      	lsrs	r6, r6, #12
 8000ce8:	0d40      	lsrs	r0, r0, #21
 8000cea:	0fcd      	lsrs	r5, r1, #31
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x26>
 8000cf0:	e09d      	b.n	8000e2e <__aeabi_ddiv+0x162>
 8000cf2:	4b95      	ldr	r3, [pc, #596]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d039      	beq.n	8000d6c <__aeabi_ddiv+0xa0>
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	00f6      	lsls	r6, r6, #3
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	431e      	orrs	r6, r3
 8000d00:	4a92      	ldr	r2, [pc, #584]	; (8000f4c <__aeabi_ddiv+0x280>)
 8000d02:	0f7b      	lsrs	r3, r7, #29
 8000d04:	4333      	orrs	r3, r6
 8000d06:	4699      	mov	r9, r3
 8000d08:	4694      	mov	ip, r2
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	4463      	add	r3, ip
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	2600      	movs	r6, #0
 8000d14:	00ff      	lsls	r7, r7, #3
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	0323      	lsls	r3, r4, #12
 8000d1a:	0b1b      	lsrs	r3, r3, #12
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	0063      	lsls	r3, r4, #1
 8000d20:	0fe4      	lsrs	r4, r4, #31
 8000d22:	4652      	mov	r2, sl
 8000d24:	0d5b      	lsrs	r3, r3, #21
 8000d26:	9401      	str	r4, [sp, #4]
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x60>
 8000d2a:	e0b3      	b.n	8000e94 <__aeabi_ddiv+0x1c8>
 8000d2c:	4986      	ldr	r1, [pc, #536]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x68>
 8000d32:	e09e      	b.n	8000e72 <__aeabi_ddiv+0x1a6>
 8000d34:	4642      	mov	r2, r8
 8000d36:	00d1      	lsls	r1, r2, #3
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0412      	lsls	r2, r2, #16
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	4651      	mov	r1, sl
 8000d40:	0f49      	lsrs	r1, r1, #29
 8000d42:	4311      	orrs	r1, r2
 8000d44:	468b      	mov	fp, r1
 8000d46:	4981      	ldr	r1, [pc, #516]	; (8000f4c <__aeabi_ddiv+0x280>)
 8000d48:	4652      	mov	r2, sl
 8000d4a:	468c      	mov	ip, r1
 8000d4c:	9900      	ldr	r1, [sp, #0]
 8000d4e:	4463      	add	r3, ip
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	00d2      	lsls	r2, r2, #3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	4063      	eors	r3, r4
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	2e0f      	cmp	r6, #15
 8000d60:	d900      	bls.n	8000d64 <__aeabi_ddiv+0x98>
 8000d62:	e105      	b.n	8000f70 <__aeabi_ddiv+0x2a4>
 8000d64:	4b7a      	ldr	r3, [pc, #488]	; (8000f50 <__aeabi_ddiv+0x284>)
 8000d66:	00b6      	lsls	r6, r6, #2
 8000d68:	599b      	ldr	r3, [r3, r6]
 8000d6a:	469f      	mov	pc, r3
 8000d6c:	465b      	mov	r3, fp
 8000d6e:	4333      	orrs	r3, r6
 8000d70:	4699      	mov	r9, r3
 8000d72:	d000      	beq.n	8000d76 <__aeabi_ddiv+0xaa>
 8000d74:	e0b8      	b.n	8000ee8 <__aeabi_ddiv+0x21c>
 8000d76:	2302      	movs	r3, #2
 8000d78:	2608      	movs	r6, #8
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	9000      	str	r0, [sp, #0]
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	e7ca      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000d82:	46cb      	mov	fp, r9
 8000d84:	003a      	movs	r2, r7
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	9501      	str	r5, [sp, #4]
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	2902      	cmp	r1, #2
 8000d90:	d027      	beq.n	8000de2 <__aeabi_ddiv+0x116>
 8000d92:	2903      	cmp	r1, #3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0xcc>
 8000d96:	e280      	b.n	800129a <__aeabi_ddiv+0x5ce>
 8000d98:	2901      	cmp	r1, #1
 8000d9a:	d044      	beq.n	8000e26 <__aeabi_ddiv+0x15a>
 8000d9c:	496d      	ldr	r1, [pc, #436]	; (8000f54 <__aeabi_ddiv+0x288>)
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	468c      	mov	ip, r1
 8000da2:	4463      	add	r3, ip
 8000da4:	001c      	movs	r4, r3
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	dd38      	ble.n	8000e1c <__aeabi_ddiv+0x150>
 8000daa:	0753      	lsls	r3, r2, #29
 8000dac:	d000      	beq.n	8000db0 <__aeabi_ddiv+0xe4>
 8000dae:	e213      	b.n	80011d8 <__aeabi_ddiv+0x50c>
 8000db0:	08d2      	lsrs	r2, r2, #3
 8000db2:	465b      	mov	r3, fp
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	d509      	bpl.n	8000dcc <__aeabi_ddiv+0x100>
 8000db8:	4659      	mov	r1, fp
 8000dba:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <__aeabi_ddiv+0x28c>)
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	468b      	mov	fp, r1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	00c9      	lsls	r1, r1, #3
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	4463      	add	r3, ip
 8000dca:	001c      	movs	r4, r3
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <__aeabi_ddiv+0x290>)
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	dc07      	bgt.n	8000de2 <__aeabi_ddiv+0x116>
 8000dd2:	465b      	mov	r3, fp
 8000dd4:	0564      	lsls	r4, r4, #21
 8000dd6:	075f      	lsls	r7, r3, #29
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	0b1b      	lsrs	r3, r3, #12
 8000dde:	0d62      	lsrs	r2, r4, #21
 8000de0:	e002      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000de2:	2300      	movs	r3, #0
 8000de4:	2700      	movs	r7, #0
 8000de6:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	031b      	lsls	r3, r3, #12
 8000dec:	0b1c      	lsrs	r4, r3, #12
 8000dee:	0d0b      	lsrs	r3, r1, #20
 8000df0:	051b      	lsls	r3, r3, #20
 8000df2:	4323      	orrs	r3, r4
 8000df4:	0514      	lsls	r4, r2, #20
 8000df6:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <__aeabi_ddiv+0x294>)
 8000df8:	0038      	movs	r0, r7
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	431c      	orrs	r4, r3
 8000dfe:	4653      	mov	r3, sl
 8000e00:	0064      	lsls	r4, r4, #1
 8000e02:	07db      	lsls	r3, r3, #31
 8000e04:	0864      	lsrs	r4, r4, #1
 8000e06:	431c      	orrs	r4, r3
 8000e08:	0021      	movs	r1, r4
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000e0e:	4690      	mov	r8, r2
 8000e10:	4699      	mov	r9, r3
 8000e12:	46a2      	mov	sl, r4
 8000e14:	46ab      	mov	fp, r5
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4252      	negs	r2, r2
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	1b1b      	subs	r3, r3, r4
 8000e20:	2b38      	cmp	r3, #56	; 0x38
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_ddiv+0x15a>
 8000e24:	e1ad      	b.n	8001182 <__aeabi_ddiv+0x4b6>
 8000e26:	2200      	movs	r2, #0
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2700      	movs	r7, #0
 8000e2c:	e7dc      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000e2e:	465b      	mov	r3, fp
 8000e30:	4333      	orrs	r3, r6
 8000e32:	4699      	mov	r9, r3
 8000e34:	d05e      	beq.n	8000ef4 <__aeabi_ddiv+0x228>
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x170>
 8000e3a:	e18a      	b.n	8001152 <__aeabi_ddiv+0x486>
 8000e3c:	0030      	movs	r0, r6
 8000e3e:	f001 f9c7 	bl	80021d0 <__clzsi2>
 8000e42:	0003      	movs	r3, r0
 8000e44:	3b0b      	subs	r3, #11
 8000e46:	2b1c      	cmp	r3, #28
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_ddiv+0x180>
 8000e4a:	e17b      	b.n	8001144 <__aeabi_ddiv+0x478>
 8000e4c:	221d      	movs	r2, #29
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	465a      	mov	r2, fp
 8000e52:	0001      	movs	r1, r0
 8000e54:	40da      	lsrs	r2, r3
 8000e56:	3908      	subs	r1, #8
 8000e58:	408e      	lsls	r6, r1
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	465f      	mov	r7, fp
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4699      	mov	r9, r3
 8000e62:	408f      	lsls	r7, r1
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <__aeabi_ddiv+0x298>)
 8000e66:	2600      	movs	r6, #0
 8000e68:	1a1b      	subs	r3, r3, r0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	e752      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000e72:	4641      	mov	r1, r8
 8000e74:	4653      	mov	r3, sl
 8000e76:	430b      	orrs	r3, r1
 8000e78:	493b      	ldr	r1, [pc, #236]	; (8000f68 <__aeabi_ddiv+0x29c>)
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	9b00      	ldr	r3, [sp, #0]
 8000e80:	4463      	add	r3, ip
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	465b      	mov	r3, fp
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d13b      	bne.n	8000f02 <__aeabi_ddiv+0x236>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	2102      	movs	r1, #2
 8000e92:	e761      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000e94:	4643      	mov	r3, r8
 8000e96:	4313      	orrs	r3, r2
 8000e98:	469b      	mov	fp, r3
 8000e9a:	d037      	beq.n	8000f0c <__aeabi_ddiv+0x240>
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x1d8>
 8000ea2:	e162      	b.n	800116a <__aeabi_ddiv+0x49e>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	f001 f993 	bl	80021d0 <__clzsi2>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	3b0b      	subs	r3, #11
 8000eae:	2b1c      	cmp	r3, #28
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_ddiv+0x1e8>
 8000eb2:	e153      	b.n	800115c <__aeabi_ddiv+0x490>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	4641      	mov	r1, r8
 8000eb8:	3a08      	subs	r2, #8
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	211d      	movs	r1, #29
 8000ec0:	1acb      	subs	r3, r1, r3
 8000ec2:	4651      	mov	r1, sl
 8000ec4:	40d9      	lsrs	r1, r3
 8000ec6:	000b      	movs	r3, r1
 8000ec8:	4641      	mov	r1, r8
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4653      	mov	r3, sl
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	9b00      	ldr	r3, [sp, #0]
 8000ed6:	4925      	ldr	r1, [pc, #148]	; (8000f6c <__aeabi_ddiv+0x2a0>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	4460      	add	r0, ip
 8000edc:	0003      	movs	r3, r0
 8000ede:	468c      	mov	ip, r1
 8000ee0:	4463      	add	r3, ip
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e737      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	46b1      	mov	r9, r6
 8000eec:	9000      	str	r0, [sp, #0]
 8000eee:	260c      	movs	r6, #12
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	e711      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	2604      	movs	r6, #4
 8000efc:	2700      	movs	r7, #0
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	e70a      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000f02:	2303      	movs	r3, #3
 8000f04:	46c3      	mov	fp, r8
 8000f06:	431e      	orrs	r6, r3
 8000f08:	2103      	movs	r1, #3
 8000f0a:	e725      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	2200      	movs	r2, #0
 8000f12:	2101      	movs	r1, #1
 8000f14:	e720      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	2700      	movs	r7, #0
 8000f1e:	031b      	lsls	r3, r3, #12
 8000f20:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000f22:	e761      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	4649      	mov	r1, r9
 8000f28:	031b      	lsls	r3, r3, #12
 8000f2a:	4219      	tst	r1, r3
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x264>
 8000f2e:	e0e2      	b.n	80010f6 <__aeabi_ddiv+0x42a>
 8000f30:	4659      	mov	r1, fp
 8000f32:	4219      	tst	r1, r3
 8000f34:	d000      	beq.n	8000f38 <__aeabi_ddiv+0x26c>
 8000f36:	e0de      	b.n	80010f6 <__aeabi_ddiv+0x42a>
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	0017      	movs	r7, r2
 8000f3e:	0b1b      	lsrs	r3, r3, #12
 8000f40:	46a2      	mov	sl, r4
 8000f42:	4a01      	ldr	r2, [pc, #4]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000f44:	e750      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	000007ff 	.word	0x000007ff
 8000f4c:	fffffc01 	.word	0xfffffc01
 8000f50:	0800a83c 	.word	0x0800a83c
 8000f54:	000003ff 	.word	0x000003ff
 8000f58:	feffffff 	.word	0xfeffffff
 8000f5c:	000007fe 	.word	0x000007fe
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	fffffc0d 	.word	0xfffffc0d
 8000f68:	fffff801 	.word	0xfffff801
 8000f6c:	000003f3 	.word	0x000003f3
 8000f70:	45d9      	cmp	r9, fp
 8000f72:	d900      	bls.n	8000f76 <__aeabi_ddiv+0x2aa>
 8000f74:	e0cb      	b.n	800110e <__aeabi_ddiv+0x442>
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0x2ae>
 8000f78:	e0c6      	b.n	8001108 <__aeabi_ddiv+0x43c>
 8000f7a:	003c      	movs	r4, r7
 8000f7c:	4648      	mov	r0, r9
 8000f7e:	2700      	movs	r7, #0
 8000f80:	9b00      	ldr	r3, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	465b      	mov	r3, fp
 8000f88:	0e16      	lsrs	r6, r2, #24
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	0213      	lsls	r3, r2, #8
 8000f90:	4698      	mov	r8, r3
 8000f92:	0433      	lsls	r3, r6, #16
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	4699      	mov	r9, r3
 8000f98:	0c31      	lsrs	r1, r6, #16
 8000f9a:	9101      	str	r1, [sp, #4]
 8000f9c:	f7ff f94c 	bl	8000238 <__aeabi_uidivmod>
 8000fa0:	464a      	mov	r2, r9
 8000fa2:	4342      	muls	r2, r0
 8000fa4:	040b      	lsls	r3, r1, #16
 8000fa6:	0c21      	lsrs	r1, r4, #16
 8000fa8:	0005      	movs	r5, r0
 8000faa:	4319      	orrs	r1, r3
 8000fac:	428a      	cmp	r2, r1
 8000fae:	d907      	bls.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fb0:	1989      	adds	r1, r1, r6
 8000fb2:	3d01      	subs	r5, #1
 8000fb4:	428e      	cmp	r6, r1
 8000fb6:	d803      	bhi.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d901      	bls.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fbc:	1e85      	subs	r5, r0, #2
 8000fbe:	1989      	adds	r1, r1, r6
 8000fc0:	1a88      	subs	r0, r1, r2
 8000fc2:	9901      	ldr	r1, [sp, #4]
 8000fc4:	f7ff f938 	bl	8000238 <__aeabi_uidivmod>
 8000fc8:	0409      	lsls	r1, r1, #16
 8000fca:	468c      	mov	ip, r1
 8000fcc:	464a      	mov	r2, r9
 8000fce:	0421      	lsls	r1, r4, #16
 8000fd0:	4664      	mov	r4, ip
 8000fd2:	4342      	muls	r2, r0
 8000fd4:	0c09      	lsrs	r1, r1, #16
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	4321      	orrs	r1, r4
 8000fda:	428a      	cmp	r2, r1
 8000fdc:	d904      	bls.n	8000fe8 <__aeabi_ddiv+0x31c>
 8000fde:	1989      	adds	r1, r1, r6
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	428e      	cmp	r6, r1
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x31c>
 8000fe6:	e0f1      	b.n	80011cc <__aeabi_ddiv+0x500>
 8000fe8:	042d      	lsls	r5, r5, #16
 8000fea:	431d      	orrs	r5, r3
 8000fec:	46ab      	mov	fp, r5
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1a89      	subs	r1, r1, r2
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	0c28      	lsrs	r0, r5, #16
 8000ff6:	0412      	lsls	r2, r2, #16
 8000ff8:	0c1d      	lsrs	r5, r3, #16
 8000ffa:	465b      	mov	r3, fp
 8000ffc:	0c14      	lsrs	r4, r2, #16
 8000ffe:	0022      	movs	r2, r4
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	435a      	muls	r2, r3
 8001006:	9403      	str	r4, [sp, #12]
 8001008:	436b      	muls	r3, r5
 800100a:	4344      	muls	r4, r0
 800100c:	9502      	str	r5, [sp, #8]
 800100e:	4368      	muls	r0, r5
 8001010:	191b      	adds	r3, r3, r4
 8001012:	0c15      	lsrs	r5, r2, #16
 8001014:	18eb      	adds	r3, r5, r3
 8001016:	429c      	cmp	r4, r3
 8001018:	d903      	bls.n	8001022 <__aeabi_ddiv+0x356>
 800101a:	2480      	movs	r4, #128	; 0x80
 800101c:	0264      	lsls	r4, r4, #9
 800101e:	46a4      	mov	ip, r4
 8001020:	4460      	add	r0, ip
 8001022:	0c1c      	lsrs	r4, r3, #16
 8001024:	0415      	lsls	r5, r2, #16
 8001026:	041b      	lsls	r3, r3, #16
 8001028:	0c2d      	lsrs	r5, r5, #16
 800102a:	1820      	adds	r0, r4, r0
 800102c:	195d      	adds	r5, r3, r5
 800102e:	4281      	cmp	r1, r0
 8001030:	d377      	bcc.n	8001122 <__aeabi_ddiv+0x456>
 8001032:	d073      	beq.n	800111c <__aeabi_ddiv+0x450>
 8001034:	1a0c      	subs	r4, r1, r0
 8001036:	4aa2      	ldr	r2, [pc, #648]	; (80012c0 <__aeabi_ddiv+0x5f4>)
 8001038:	1b7d      	subs	r5, r7, r5
 800103a:	42af      	cmp	r7, r5
 800103c:	41bf      	sbcs	r7, r7
 800103e:	4694      	mov	ip, r2
 8001040:	9b00      	ldr	r3, [sp, #0]
 8001042:	427f      	negs	r7, r7
 8001044:	4463      	add	r3, ip
 8001046:	1be0      	subs	r0, r4, r7
 8001048:	001c      	movs	r4, r3
 800104a:	4286      	cmp	r6, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x384>
 800104e:	e0db      	b.n	8001208 <__aeabi_ddiv+0x53c>
 8001050:	9901      	ldr	r1, [sp, #4]
 8001052:	f7ff f8f1 	bl	8000238 <__aeabi_uidivmod>
 8001056:	464a      	mov	r2, r9
 8001058:	4342      	muls	r2, r0
 800105a:	040b      	lsls	r3, r1, #16
 800105c:	0c29      	lsrs	r1, r5, #16
 800105e:	0007      	movs	r7, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d907      	bls.n	8001076 <__aeabi_ddiv+0x3aa>
 8001066:	1989      	adds	r1, r1, r6
 8001068:	3f01      	subs	r7, #1
 800106a:	428e      	cmp	r6, r1
 800106c:	d803      	bhi.n	8001076 <__aeabi_ddiv+0x3aa>
 800106e:	428a      	cmp	r2, r1
 8001070:	d901      	bls.n	8001076 <__aeabi_ddiv+0x3aa>
 8001072:	1e87      	subs	r7, r0, #2
 8001074:	1989      	adds	r1, r1, r6
 8001076:	1a88      	subs	r0, r1, r2
 8001078:	9901      	ldr	r1, [sp, #4]
 800107a:	f7ff f8dd 	bl	8000238 <__aeabi_uidivmod>
 800107e:	0409      	lsls	r1, r1, #16
 8001080:	464a      	mov	r2, r9
 8001082:	4689      	mov	r9, r1
 8001084:	0429      	lsls	r1, r5, #16
 8001086:	464d      	mov	r5, r9
 8001088:	4342      	muls	r2, r0
 800108a:	0c09      	lsrs	r1, r1, #16
 800108c:	0003      	movs	r3, r0
 800108e:	4329      	orrs	r1, r5
 8001090:	428a      	cmp	r2, r1
 8001092:	d907      	bls.n	80010a4 <__aeabi_ddiv+0x3d8>
 8001094:	1989      	adds	r1, r1, r6
 8001096:	3b01      	subs	r3, #1
 8001098:	428e      	cmp	r6, r1
 800109a:	d803      	bhi.n	80010a4 <__aeabi_ddiv+0x3d8>
 800109c:	428a      	cmp	r2, r1
 800109e:	d901      	bls.n	80010a4 <__aeabi_ddiv+0x3d8>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	1989      	adds	r1, r1, r6
 80010a4:	043f      	lsls	r7, r7, #16
 80010a6:	1a89      	subs	r1, r1, r2
 80010a8:	003a      	movs	r2, r7
 80010aa:	9f03      	ldr	r7, [sp, #12]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	0038      	movs	r0, r7
 80010b0:	0413      	lsls	r3, r2, #16
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	4358      	muls	r0, r3
 80010b6:	4681      	mov	r9, r0
 80010b8:	9802      	ldr	r0, [sp, #8]
 80010ba:	0c15      	lsrs	r5, r2, #16
 80010bc:	436f      	muls	r7, r5
 80010be:	4343      	muls	r3, r0
 80010c0:	4345      	muls	r5, r0
 80010c2:	4648      	mov	r0, r9
 80010c4:	0c00      	lsrs	r0, r0, #16
 80010c6:	4684      	mov	ip, r0
 80010c8:	19db      	adds	r3, r3, r7
 80010ca:	4463      	add	r3, ip
 80010cc:	429f      	cmp	r7, r3
 80010ce:	d903      	bls.n	80010d8 <__aeabi_ddiv+0x40c>
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	0240      	lsls	r0, r0, #9
 80010d4:	4684      	mov	ip, r0
 80010d6:	4465      	add	r5, ip
 80010d8:	4648      	mov	r0, r9
 80010da:	0c1f      	lsrs	r7, r3, #16
 80010dc:	0400      	lsls	r0, r0, #16
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	0c00      	lsrs	r0, r0, #16
 80010e2:	197d      	adds	r5, r7, r5
 80010e4:	1818      	adds	r0, r3, r0
 80010e6:	42a9      	cmp	r1, r5
 80010e8:	d200      	bcs.n	80010ec <__aeabi_ddiv+0x420>
 80010ea:	e084      	b.n	80011f6 <__aeabi_ddiv+0x52a>
 80010ec:	d100      	bne.n	80010f0 <__aeabi_ddiv+0x424>
 80010ee:	e07f      	b.n	80011f0 <__aeabi_ddiv+0x524>
 80010f0:	2301      	movs	r3, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	e657      	b.n	8000da6 <__aeabi_ddiv+0xda>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	464a      	mov	r2, r9
 80010fa:	031b      	lsls	r3, r3, #12
 80010fc:	4313      	orrs	r3, r2
 80010fe:	031b      	lsls	r3, r3, #12
 8001100:	0b1b      	lsrs	r3, r3, #12
 8001102:	46aa      	mov	sl, r5
 8001104:	4a6f      	ldr	r2, [pc, #444]	; (80012c4 <__aeabi_ddiv+0x5f8>)
 8001106:	e66f      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8001108:	42ba      	cmp	r2, r7
 800110a:	d900      	bls.n	800110e <__aeabi_ddiv+0x442>
 800110c:	e735      	b.n	8000f7a <__aeabi_ddiv+0x2ae>
 800110e:	464b      	mov	r3, r9
 8001110:	07dc      	lsls	r4, r3, #31
 8001112:	0858      	lsrs	r0, r3, #1
 8001114:	087b      	lsrs	r3, r7, #1
 8001116:	431c      	orrs	r4, r3
 8001118:	07ff      	lsls	r7, r7, #31
 800111a:	e734      	b.n	8000f86 <__aeabi_ddiv+0x2ba>
 800111c:	2400      	movs	r4, #0
 800111e:	42af      	cmp	r7, r5
 8001120:	d289      	bcs.n	8001036 <__aeabi_ddiv+0x36a>
 8001122:	4447      	add	r7, r8
 8001124:	4547      	cmp	r7, r8
 8001126:	41a4      	sbcs	r4, r4
 8001128:	465b      	mov	r3, fp
 800112a:	4264      	negs	r4, r4
 800112c:	19a4      	adds	r4, r4, r6
 800112e:	1864      	adds	r4, r4, r1
 8001130:	3b01      	subs	r3, #1
 8001132:	42a6      	cmp	r6, r4
 8001134:	d21e      	bcs.n	8001174 <__aeabi_ddiv+0x4a8>
 8001136:	42a0      	cmp	r0, r4
 8001138:	d86d      	bhi.n	8001216 <__aeabi_ddiv+0x54a>
 800113a:	d100      	bne.n	800113e <__aeabi_ddiv+0x472>
 800113c:	e0b6      	b.n	80012ac <__aeabi_ddiv+0x5e0>
 800113e:	1a24      	subs	r4, r4, r0
 8001140:	469b      	mov	fp, r3
 8001142:	e778      	b.n	8001036 <__aeabi_ddiv+0x36a>
 8001144:	0003      	movs	r3, r0
 8001146:	465a      	mov	r2, fp
 8001148:	3b28      	subs	r3, #40	; 0x28
 800114a:	409a      	lsls	r2, r3
 800114c:	2700      	movs	r7, #0
 800114e:	4691      	mov	r9, r2
 8001150:	e688      	b.n	8000e64 <__aeabi_ddiv+0x198>
 8001152:	4658      	mov	r0, fp
 8001154:	f001 f83c 	bl	80021d0 <__clzsi2>
 8001158:	3020      	adds	r0, #32
 800115a:	e672      	b.n	8000e42 <__aeabi_ddiv+0x176>
 800115c:	0003      	movs	r3, r0
 800115e:	4652      	mov	r2, sl
 8001160:	3b28      	subs	r3, #40	; 0x28
 8001162:	409a      	lsls	r2, r3
 8001164:	4693      	mov	fp, r2
 8001166:	2200      	movs	r2, #0
 8001168:	e6b4      	b.n	8000ed4 <__aeabi_ddiv+0x208>
 800116a:	4650      	mov	r0, sl
 800116c:	f001 f830 	bl	80021d0 <__clzsi2>
 8001170:	3020      	adds	r0, #32
 8001172:	e69a      	b.n	8000eaa <__aeabi_ddiv+0x1de>
 8001174:	42a6      	cmp	r6, r4
 8001176:	d1e2      	bne.n	800113e <__aeabi_ddiv+0x472>
 8001178:	45b8      	cmp	r8, r7
 800117a:	d9dc      	bls.n	8001136 <__aeabi_ddiv+0x46a>
 800117c:	1a34      	subs	r4, r6, r0
 800117e:	469b      	mov	fp, r3
 8001180:	e759      	b.n	8001036 <__aeabi_ddiv+0x36a>
 8001182:	2b1f      	cmp	r3, #31
 8001184:	dc65      	bgt.n	8001252 <__aeabi_ddiv+0x586>
 8001186:	4c50      	ldr	r4, [pc, #320]	; (80012c8 <__aeabi_ddiv+0x5fc>)
 8001188:	9900      	ldr	r1, [sp, #0]
 800118a:	46a4      	mov	ip, r4
 800118c:	465c      	mov	r4, fp
 800118e:	4461      	add	r1, ip
 8001190:	0008      	movs	r0, r1
 8001192:	408c      	lsls	r4, r1
 8001194:	0011      	movs	r1, r2
 8001196:	4082      	lsls	r2, r0
 8001198:	40d9      	lsrs	r1, r3
 800119a:	1e50      	subs	r0, r2, #1
 800119c:	4182      	sbcs	r2, r0
 800119e:	430c      	orrs	r4, r1
 80011a0:	4314      	orrs	r4, r2
 80011a2:	465a      	mov	r2, fp
 80011a4:	40da      	lsrs	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	0762      	lsls	r2, r4, #29
 80011aa:	d009      	beq.n	80011c0 <__aeabi_ddiv+0x4f4>
 80011ac:	220f      	movs	r2, #15
 80011ae:	4022      	ands	r2, r4
 80011b0:	2a04      	cmp	r2, #4
 80011b2:	d005      	beq.n	80011c0 <__aeabi_ddiv+0x4f4>
 80011b4:	0022      	movs	r2, r4
 80011b6:	1d14      	adds	r4, r2, #4
 80011b8:	4294      	cmp	r4, r2
 80011ba:	4189      	sbcs	r1, r1
 80011bc:	4249      	negs	r1, r1
 80011be:	185b      	adds	r3, r3, r1
 80011c0:	021a      	lsls	r2, r3, #8
 80011c2:	d562      	bpl.n	800128a <__aeabi_ddiv+0x5be>
 80011c4:	2201      	movs	r2, #1
 80011c6:	2300      	movs	r3, #0
 80011c8:	2700      	movs	r7, #0
 80011ca:	e60d      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	d800      	bhi.n	80011d2 <__aeabi_ddiv+0x506>
 80011d0:	e70a      	b.n	8000fe8 <__aeabi_ddiv+0x31c>
 80011d2:	1e83      	subs	r3, r0, #2
 80011d4:	1989      	adds	r1, r1, r6
 80011d6:	e707      	b.n	8000fe8 <__aeabi_ddiv+0x31c>
 80011d8:	230f      	movs	r3, #15
 80011da:	4013      	ands	r3, r2
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x516>
 80011e0:	e5e6      	b.n	8000db0 <__aeabi_ddiv+0xe4>
 80011e2:	1d17      	adds	r7, r2, #4
 80011e4:	4297      	cmp	r7, r2
 80011e6:	4192      	sbcs	r2, r2
 80011e8:	4253      	negs	r3, r2
 80011ea:	449b      	add	fp, r3
 80011ec:	08fa      	lsrs	r2, r7, #3
 80011ee:	e5e0      	b.n	8000db2 <__aeabi_ddiv+0xe6>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x52a>
 80011f4:	e5d7      	b.n	8000da6 <__aeabi_ddiv+0xda>
 80011f6:	1871      	adds	r1, r6, r1
 80011f8:	1e53      	subs	r3, r2, #1
 80011fa:	42b1      	cmp	r1, r6
 80011fc:	d327      	bcc.n	800124e <__aeabi_ddiv+0x582>
 80011fe:	42a9      	cmp	r1, r5
 8001200:	d315      	bcc.n	800122e <__aeabi_ddiv+0x562>
 8001202:	d058      	beq.n	80012b6 <__aeabi_ddiv+0x5ea>
 8001204:	001a      	movs	r2, r3
 8001206:	e773      	b.n	80010f0 <__aeabi_ddiv+0x424>
 8001208:	2b00      	cmp	r3, #0
 800120a:	dc00      	bgt.n	800120e <__aeabi_ddiv+0x542>
 800120c:	e604      	b.n	8000e18 <__aeabi_ddiv+0x14c>
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	449b      	add	fp, r3
 8001214:	e5cd      	b.n	8000db2 <__aeabi_ddiv+0xe6>
 8001216:	2302      	movs	r3, #2
 8001218:	4447      	add	r7, r8
 800121a:	4547      	cmp	r7, r8
 800121c:	4189      	sbcs	r1, r1
 800121e:	425b      	negs	r3, r3
 8001220:	469c      	mov	ip, r3
 8001222:	4249      	negs	r1, r1
 8001224:	1989      	adds	r1, r1, r6
 8001226:	190c      	adds	r4, r1, r4
 8001228:	44e3      	add	fp, ip
 800122a:	1a24      	subs	r4, r4, r0
 800122c:	e703      	b.n	8001036 <__aeabi_ddiv+0x36a>
 800122e:	4643      	mov	r3, r8
 8001230:	005f      	lsls	r7, r3, #1
 8001232:	4547      	cmp	r7, r8
 8001234:	419b      	sbcs	r3, r3
 8001236:	46b8      	mov	r8, r7
 8001238:	425b      	negs	r3, r3
 800123a:	199e      	adds	r6, r3, r6
 800123c:	3a02      	subs	r2, #2
 800123e:	1989      	adds	r1, r1, r6
 8001240:	42a9      	cmp	r1, r5
 8001242:	d000      	beq.n	8001246 <__aeabi_ddiv+0x57a>
 8001244:	e754      	b.n	80010f0 <__aeabi_ddiv+0x424>
 8001246:	4540      	cmp	r0, r8
 8001248:	d000      	beq.n	800124c <__aeabi_ddiv+0x580>
 800124a:	e751      	b.n	80010f0 <__aeabi_ddiv+0x424>
 800124c:	e5ab      	b.n	8000da6 <__aeabi_ddiv+0xda>
 800124e:	001a      	movs	r2, r3
 8001250:	e7f6      	b.n	8001240 <__aeabi_ddiv+0x574>
 8001252:	211f      	movs	r1, #31
 8001254:	465f      	mov	r7, fp
 8001256:	4249      	negs	r1, r1
 8001258:	1b0c      	subs	r4, r1, r4
 800125a:	40e7      	lsrs	r7, r4
 800125c:	2b20      	cmp	r3, #32
 800125e:	d007      	beq.n	8001270 <__aeabi_ddiv+0x5a4>
 8001260:	491a      	ldr	r1, [pc, #104]	; (80012cc <__aeabi_ddiv+0x600>)
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	468c      	mov	ip, r1
 8001266:	4463      	add	r3, ip
 8001268:	0018      	movs	r0, r3
 800126a:	465b      	mov	r3, fp
 800126c:	4083      	lsls	r3, r0
 800126e:	431a      	orrs	r2, r3
 8001270:	1e50      	subs	r0, r2, #1
 8001272:	4182      	sbcs	r2, r0
 8001274:	433a      	orrs	r2, r7
 8001276:	2707      	movs	r7, #7
 8001278:	2300      	movs	r3, #0
 800127a:	4017      	ands	r7, r2
 800127c:	d009      	beq.n	8001292 <__aeabi_ddiv+0x5c6>
 800127e:	210f      	movs	r1, #15
 8001280:	2300      	movs	r3, #0
 8001282:	4011      	ands	r1, r2
 8001284:	0014      	movs	r4, r2
 8001286:	2904      	cmp	r1, #4
 8001288:	d195      	bne.n	80011b6 <__aeabi_ddiv+0x4ea>
 800128a:	0022      	movs	r2, r4
 800128c:	075f      	lsls	r7, r3, #29
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	0b1b      	lsrs	r3, r3, #12
 8001292:	08d2      	lsrs	r2, r2, #3
 8001294:	4317      	orrs	r7, r2
 8001296:	2200      	movs	r2, #0
 8001298:	e5a6      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	4659      	mov	r1, fp
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	430b      	orrs	r3, r1
 80012a2:	031b      	lsls	r3, r3, #12
 80012a4:	0017      	movs	r7, r2
 80012a6:	0b1b      	lsrs	r3, r3, #12
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <__aeabi_ddiv+0x5f8>)
 80012aa:	e59d      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 80012ac:	42bd      	cmp	r5, r7
 80012ae:	d8b2      	bhi.n	8001216 <__aeabi_ddiv+0x54a>
 80012b0:	469b      	mov	fp, r3
 80012b2:	2400      	movs	r4, #0
 80012b4:	e6bf      	b.n	8001036 <__aeabi_ddiv+0x36a>
 80012b6:	4580      	cmp	r8, r0
 80012b8:	d3b9      	bcc.n	800122e <__aeabi_ddiv+0x562>
 80012ba:	001a      	movs	r2, r3
 80012bc:	e7c3      	b.n	8001246 <__aeabi_ddiv+0x57a>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	000003ff 	.word	0x000003ff
 80012c4:	000007ff 	.word	0x000007ff
 80012c8:	0000041e 	.word	0x0000041e
 80012cc:	0000043e 	.word	0x0000043e

080012d0 <__eqdf2>:
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	464f      	mov	r7, r9
 80012d4:	4646      	mov	r6, r8
 80012d6:	46d6      	mov	lr, sl
 80012d8:	4684      	mov	ip, r0
 80012da:	b5c0      	push	{r6, r7, lr}
 80012dc:	4680      	mov	r8, r0
 80012de:	4e19      	ldr	r6, [pc, #100]	; (8001344 <__eqdf2+0x74>)
 80012e0:	0318      	lsls	r0, r3, #12
 80012e2:	030f      	lsls	r7, r1, #12
 80012e4:	004d      	lsls	r5, r1, #1
 80012e6:	0b00      	lsrs	r0, r0, #12
 80012e8:	005c      	lsls	r4, r3, #1
 80012ea:	4682      	mov	sl, r0
 80012ec:	0b3f      	lsrs	r7, r7, #12
 80012ee:	0d6d      	lsrs	r5, r5, #21
 80012f0:	0fc9      	lsrs	r1, r1, #31
 80012f2:	4691      	mov	r9, r2
 80012f4:	0d64      	lsrs	r4, r4, #21
 80012f6:	0fdb      	lsrs	r3, r3, #31
 80012f8:	2001      	movs	r0, #1
 80012fa:	42b5      	cmp	r5, r6
 80012fc:	d00a      	beq.n	8001314 <__eqdf2+0x44>
 80012fe:	42b4      	cmp	r4, r6
 8001300:	d003      	beq.n	800130a <__eqdf2+0x3a>
 8001302:	42a5      	cmp	r5, r4
 8001304:	d101      	bne.n	800130a <__eqdf2+0x3a>
 8001306:	4557      	cmp	r7, sl
 8001308:	d00c      	beq.n	8001324 <__eqdf2+0x54>
 800130a:	bc1c      	pop	{r2, r3, r4}
 800130c:	4690      	mov	r8, r2
 800130e:	4699      	mov	r9, r3
 8001310:	46a2      	mov	sl, r4
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	4666      	mov	r6, ip
 8001316:	433e      	orrs	r6, r7
 8001318:	d1f7      	bne.n	800130a <__eqdf2+0x3a>
 800131a:	42ac      	cmp	r4, r5
 800131c:	d1f5      	bne.n	800130a <__eqdf2+0x3a>
 800131e:	4654      	mov	r4, sl
 8001320:	4314      	orrs	r4, r2
 8001322:	d1f2      	bne.n	800130a <__eqdf2+0x3a>
 8001324:	2001      	movs	r0, #1
 8001326:	45c8      	cmp	r8, r9
 8001328:	d1ef      	bne.n	800130a <__eqdf2+0x3a>
 800132a:	4299      	cmp	r1, r3
 800132c:	d007      	beq.n	800133e <__eqdf2+0x6e>
 800132e:	2d00      	cmp	r5, #0
 8001330:	d1eb      	bne.n	800130a <__eqdf2+0x3a>
 8001332:	4663      	mov	r3, ip
 8001334:	431f      	orrs	r7, r3
 8001336:	0038      	movs	r0, r7
 8001338:	1e47      	subs	r7, r0, #1
 800133a:	41b8      	sbcs	r0, r7
 800133c:	e7e5      	b.n	800130a <__eqdf2+0x3a>
 800133e:	2000      	movs	r0, #0
 8001340:	e7e3      	b.n	800130a <__eqdf2+0x3a>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	000007ff 	.word	0x000007ff

08001348 <__gedf2>:
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	464f      	mov	r7, r9
 800134c:	4646      	mov	r6, r8
 800134e:	46d6      	mov	lr, sl
 8001350:	004d      	lsls	r5, r1, #1
 8001352:	b5c0      	push	{r6, r7, lr}
 8001354:	030e      	lsls	r6, r1, #12
 8001356:	0fc9      	lsrs	r1, r1, #31
 8001358:	468a      	mov	sl, r1
 800135a:	492c      	ldr	r1, [pc, #176]	; (800140c <__gedf2+0xc4>)
 800135c:	031f      	lsls	r7, r3, #12
 800135e:	005c      	lsls	r4, r3, #1
 8001360:	4680      	mov	r8, r0
 8001362:	0b36      	lsrs	r6, r6, #12
 8001364:	0d6d      	lsrs	r5, r5, #21
 8001366:	4691      	mov	r9, r2
 8001368:	0b3f      	lsrs	r7, r7, #12
 800136a:	0d64      	lsrs	r4, r4, #21
 800136c:	0fdb      	lsrs	r3, r3, #31
 800136e:	428d      	cmp	r5, r1
 8001370:	d01e      	beq.n	80013b0 <__gedf2+0x68>
 8001372:	428c      	cmp	r4, r1
 8001374:	d016      	beq.n	80013a4 <__gedf2+0x5c>
 8001376:	2d00      	cmp	r5, #0
 8001378:	d11e      	bne.n	80013b8 <__gedf2+0x70>
 800137a:	4330      	orrs	r0, r6
 800137c:	4684      	mov	ip, r0
 800137e:	2c00      	cmp	r4, #0
 8001380:	d101      	bne.n	8001386 <__gedf2+0x3e>
 8001382:	433a      	orrs	r2, r7
 8001384:	d023      	beq.n	80013ce <__gedf2+0x86>
 8001386:	4662      	mov	r2, ip
 8001388:	2a00      	cmp	r2, #0
 800138a:	d01a      	beq.n	80013c2 <__gedf2+0x7a>
 800138c:	459a      	cmp	sl, r3
 800138e:	d029      	beq.n	80013e4 <__gedf2+0x9c>
 8001390:	4651      	mov	r1, sl
 8001392:	2002      	movs	r0, #2
 8001394:	3901      	subs	r1, #1
 8001396:	4008      	ands	r0, r1
 8001398:	3801      	subs	r0, #1
 800139a:	bc1c      	pop	{r2, r3, r4}
 800139c:	4690      	mov	r8, r2
 800139e:	4699      	mov	r9, r3
 80013a0:	46a2      	mov	sl, r4
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	0039      	movs	r1, r7
 80013a6:	4311      	orrs	r1, r2
 80013a8:	d0e5      	beq.n	8001376 <__gedf2+0x2e>
 80013aa:	2002      	movs	r0, #2
 80013ac:	4240      	negs	r0, r0
 80013ae:	e7f4      	b.n	800139a <__gedf2+0x52>
 80013b0:	4330      	orrs	r0, r6
 80013b2:	d1fa      	bne.n	80013aa <__gedf2+0x62>
 80013b4:	42ac      	cmp	r4, r5
 80013b6:	d00f      	beq.n	80013d8 <__gedf2+0x90>
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d10f      	bne.n	80013dc <__gedf2+0x94>
 80013bc:	433a      	orrs	r2, r7
 80013be:	d0e7      	beq.n	8001390 <__gedf2+0x48>
 80013c0:	e00c      	b.n	80013dc <__gedf2+0x94>
 80013c2:	2201      	movs	r2, #1
 80013c4:	3b01      	subs	r3, #1
 80013c6:	4393      	bics	r3, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	3001      	adds	r0, #1
 80013cc:	e7e5      	b.n	800139a <__gedf2+0x52>
 80013ce:	4663      	mov	r3, ip
 80013d0:	2000      	movs	r0, #0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0e1      	beq.n	800139a <__gedf2+0x52>
 80013d6:	e7db      	b.n	8001390 <__gedf2+0x48>
 80013d8:	433a      	orrs	r2, r7
 80013da:	d1e6      	bne.n	80013aa <__gedf2+0x62>
 80013dc:	459a      	cmp	sl, r3
 80013de:	d1d7      	bne.n	8001390 <__gedf2+0x48>
 80013e0:	42a5      	cmp	r5, r4
 80013e2:	dcd5      	bgt.n	8001390 <__gedf2+0x48>
 80013e4:	42a5      	cmp	r5, r4
 80013e6:	db05      	blt.n	80013f4 <__gedf2+0xac>
 80013e8:	42be      	cmp	r6, r7
 80013ea:	d8d1      	bhi.n	8001390 <__gedf2+0x48>
 80013ec:	d008      	beq.n	8001400 <__gedf2+0xb8>
 80013ee:	2000      	movs	r0, #0
 80013f0:	42be      	cmp	r6, r7
 80013f2:	d2d2      	bcs.n	800139a <__gedf2+0x52>
 80013f4:	4650      	mov	r0, sl
 80013f6:	2301      	movs	r3, #1
 80013f8:	3801      	subs	r0, #1
 80013fa:	4398      	bics	r0, r3
 80013fc:	3001      	adds	r0, #1
 80013fe:	e7cc      	b.n	800139a <__gedf2+0x52>
 8001400:	45c8      	cmp	r8, r9
 8001402:	d8c5      	bhi.n	8001390 <__gedf2+0x48>
 8001404:	2000      	movs	r0, #0
 8001406:	45c8      	cmp	r8, r9
 8001408:	d3f4      	bcc.n	80013f4 <__gedf2+0xac>
 800140a:	e7c6      	b.n	800139a <__gedf2+0x52>
 800140c:	000007ff 	.word	0x000007ff

08001410 <__ledf2>:
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	464f      	mov	r7, r9
 8001414:	4646      	mov	r6, r8
 8001416:	46d6      	mov	lr, sl
 8001418:	004d      	lsls	r5, r1, #1
 800141a:	b5c0      	push	{r6, r7, lr}
 800141c:	030e      	lsls	r6, r1, #12
 800141e:	0fc9      	lsrs	r1, r1, #31
 8001420:	468a      	mov	sl, r1
 8001422:	492e      	ldr	r1, [pc, #184]	; (80014dc <__ledf2+0xcc>)
 8001424:	031f      	lsls	r7, r3, #12
 8001426:	005c      	lsls	r4, r3, #1
 8001428:	4680      	mov	r8, r0
 800142a:	0b36      	lsrs	r6, r6, #12
 800142c:	0d6d      	lsrs	r5, r5, #21
 800142e:	4691      	mov	r9, r2
 8001430:	0b3f      	lsrs	r7, r7, #12
 8001432:	0d64      	lsrs	r4, r4, #21
 8001434:	0fdb      	lsrs	r3, r3, #31
 8001436:	428d      	cmp	r5, r1
 8001438:	d018      	beq.n	800146c <__ledf2+0x5c>
 800143a:	428c      	cmp	r4, r1
 800143c:	d011      	beq.n	8001462 <__ledf2+0x52>
 800143e:	2d00      	cmp	r5, #0
 8001440:	d118      	bne.n	8001474 <__ledf2+0x64>
 8001442:	4330      	orrs	r0, r6
 8001444:	4684      	mov	ip, r0
 8001446:	2c00      	cmp	r4, #0
 8001448:	d11e      	bne.n	8001488 <__ledf2+0x78>
 800144a:	433a      	orrs	r2, r7
 800144c:	d11c      	bne.n	8001488 <__ledf2+0x78>
 800144e:	4663      	mov	r3, ip
 8001450:	2000      	movs	r0, #0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <__ledf2+0xa8>
 8001456:	4651      	mov	r1, sl
 8001458:	2002      	movs	r0, #2
 800145a:	3901      	subs	r1, #1
 800145c:	4008      	ands	r0, r1
 800145e:	3801      	subs	r0, #1
 8001460:	e02a      	b.n	80014b8 <__ledf2+0xa8>
 8001462:	0039      	movs	r1, r7
 8001464:	4311      	orrs	r1, r2
 8001466:	d0ea      	beq.n	800143e <__ledf2+0x2e>
 8001468:	2002      	movs	r0, #2
 800146a:	e025      	b.n	80014b8 <__ledf2+0xa8>
 800146c:	4330      	orrs	r0, r6
 800146e:	d1fb      	bne.n	8001468 <__ledf2+0x58>
 8001470:	42ac      	cmp	r4, r5
 8001472:	d026      	beq.n	80014c2 <__ledf2+0xb2>
 8001474:	2c00      	cmp	r4, #0
 8001476:	d126      	bne.n	80014c6 <__ledf2+0xb6>
 8001478:	433a      	orrs	r2, r7
 800147a:	d124      	bne.n	80014c6 <__ledf2+0xb6>
 800147c:	4651      	mov	r1, sl
 800147e:	2002      	movs	r0, #2
 8001480:	3901      	subs	r1, #1
 8001482:	4008      	ands	r0, r1
 8001484:	3801      	subs	r0, #1
 8001486:	e017      	b.n	80014b8 <__ledf2+0xa8>
 8001488:	4662      	mov	r2, ip
 800148a:	2a00      	cmp	r2, #0
 800148c:	d00f      	beq.n	80014ae <__ledf2+0x9e>
 800148e:	459a      	cmp	sl, r3
 8001490:	d1e1      	bne.n	8001456 <__ledf2+0x46>
 8001492:	42a5      	cmp	r5, r4
 8001494:	db05      	blt.n	80014a2 <__ledf2+0x92>
 8001496:	42be      	cmp	r6, r7
 8001498:	d8dd      	bhi.n	8001456 <__ledf2+0x46>
 800149a:	d019      	beq.n	80014d0 <__ledf2+0xc0>
 800149c:	2000      	movs	r0, #0
 800149e:	42be      	cmp	r6, r7
 80014a0:	d20a      	bcs.n	80014b8 <__ledf2+0xa8>
 80014a2:	4650      	mov	r0, sl
 80014a4:	2301      	movs	r3, #1
 80014a6:	3801      	subs	r0, #1
 80014a8:	4398      	bics	r0, r3
 80014aa:	3001      	adds	r0, #1
 80014ac:	e004      	b.n	80014b8 <__ledf2+0xa8>
 80014ae:	2201      	movs	r2, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4393      	bics	r3, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	3001      	adds	r0, #1
 80014b8:	bc1c      	pop	{r2, r3, r4}
 80014ba:	4690      	mov	r8, r2
 80014bc:	4699      	mov	r9, r3
 80014be:	46a2      	mov	sl, r4
 80014c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c2:	433a      	orrs	r2, r7
 80014c4:	d1d0      	bne.n	8001468 <__ledf2+0x58>
 80014c6:	459a      	cmp	sl, r3
 80014c8:	d1c5      	bne.n	8001456 <__ledf2+0x46>
 80014ca:	42a5      	cmp	r5, r4
 80014cc:	dcc3      	bgt.n	8001456 <__ledf2+0x46>
 80014ce:	e7e0      	b.n	8001492 <__ledf2+0x82>
 80014d0:	45c8      	cmp	r8, r9
 80014d2:	d8c0      	bhi.n	8001456 <__ledf2+0x46>
 80014d4:	2000      	movs	r0, #0
 80014d6:	45c8      	cmp	r8, r9
 80014d8:	d3e3      	bcc.n	80014a2 <__ledf2+0x92>
 80014da:	e7ed      	b.n	80014b8 <__ledf2+0xa8>
 80014dc:	000007ff 	.word	0x000007ff

080014e0 <__aeabi_dmul>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	4657      	mov	r7, sl
 80014e4:	46de      	mov	lr, fp
 80014e6:	464e      	mov	r6, r9
 80014e8:	4645      	mov	r5, r8
 80014ea:	b5e0      	push	{r5, r6, r7, lr}
 80014ec:	4683      	mov	fp, r0
 80014ee:	0006      	movs	r6, r0
 80014f0:	030f      	lsls	r7, r1, #12
 80014f2:	0048      	lsls	r0, r1, #1
 80014f4:	b087      	sub	sp, #28
 80014f6:	4692      	mov	sl, r2
 80014f8:	001d      	movs	r5, r3
 80014fa:	0b3f      	lsrs	r7, r7, #12
 80014fc:	0d40      	lsrs	r0, r0, #21
 80014fe:	0fcc      	lsrs	r4, r1, #31
 8001500:	2800      	cmp	r0, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x26>
 8001504:	e06f      	b.n	80015e6 <__aeabi_dmul+0x106>
 8001506:	4bde      	ldr	r3, [pc, #888]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001508:	4298      	cmp	r0, r3
 800150a:	d038      	beq.n	800157e <__aeabi_dmul+0x9e>
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	00ff      	lsls	r7, r7, #3
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431f      	orrs	r7, r3
 8001514:	0f73      	lsrs	r3, r6, #29
 8001516:	433b      	orrs	r3, r7
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	4bda      	ldr	r3, [pc, #872]	; (8001884 <__aeabi_dmul+0x3a4>)
 800151c:	2700      	movs	r7, #0
 800151e:	4699      	mov	r9, r3
 8001520:	2300      	movs	r3, #0
 8001522:	469b      	mov	fp, r3
 8001524:	00f6      	lsls	r6, r6, #3
 8001526:	4481      	add	r9, r0
 8001528:	032b      	lsls	r3, r5, #12
 800152a:	0069      	lsls	r1, r5, #1
 800152c:	0b1b      	lsrs	r3, r3, #12
 800152e:	4652      	mov	r2, sl
 8001530:	4698      	mov	r8, r3
 8001532:	0d49      	lsrs	r1, r1, #21
 8001534:	0fed      	lsrs	r5, r5, #31
 8001536:	2900      	cmp	r1, #0
 8001538:	d100      	bne.n	800153c <__aeabi_dmul+0x5c>
 800153a:	e085      	b.n	8001648 <__aeabi_dmul+0x168>
 800153c:	4bd0      	ldr	r3, [pc, #832]	; (8001880 <__aeabi_dmul+0x3a0>)
 800153e:	4299      	cmp	r1, r3
 8001540:	d100      	bne.n	8001544 <__aeabi_dmul+0x64>
 8001542:	e073      	b.n	800162c <__aeabi_dmul+0x14c>
 8001544:	4643      	mov	r3, r8
 8001546:	00da      	lsls	r2, r3, #3
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	041b      	lsls	r3, r3, #16
 800154c:	4313      	orrs	r3, r2
 800154e:	4652      	mov	r2, sl
 8001550:	48cc      	ldr	r0, [pc, #816]	; (8001884 <__aeabi_dmul+0x3a4>)
 8001552:	0f52      	lsrs	r2, r2, #29
 8001554:	4684      	mov	ip, r0
 8001556:	4313      	orrs	r3, r2
 8001558:	4652      	mov	r2, sl
 800155a:	2000      	movs	r0, #0
 800155c:	4461      	add	r1, ip
 800155e:	00d2      	lsls	r2, r2, #3
 8001560:	4489      	add	r9, r1
 8001562:	0021      	movs	r1, r4
 8001564:	4069      	eors	r1, r5
 8001566:	9100      	str	r1, [sp, #0]
 8001568:	468c      	mov	ip, r1
 800156a:	2101      	movs	r1, #1
 800156c:	4449      	add	r1, r9
 800156e:	468a      	mov	sl, r1
 8001570:	2f0f      	cmp	r7, #15
 8001572:	d900      	bls.n	8001576 <__aeabi_dmul+0x96>
 8001574:	e090      	b.n	8001698 <__aeabi_dmul+0x1b8>
 8001576:	49c4      	ldr	r1, [pc, #784]	; (8001888 <__aeabi_dmul+0x3a8>)
 8001578:	00bf      	lsls	r7, r7, #2
 800157a:	59cf      	ldr	r7, [r1, r7]
 800157c:	46bf      	mov	pc, r7
 800157e:	465b      	mov	r3, fp
 8001580:	433b      	orrs	r3, r7
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	d000      	beq.n	8001588 <__aeabi_dmul+0xa8>
 8001586:	e16a      	b.n	800185e <__aeabi_dmul+0x37e>
 8001588:	2302      	movs	r3, #2
 800158a:	2708      	movs	r7, #8
 800158c:	2600      	movs	r6, #0
 800158e:	4681      	mov	r9, r0
 8001590:	469b      	mov	fp, r3
 8001592:	e7c9      	b.n	8001528 <__aeabi_dmul+0x48>
 8001594:	0032      	movs	r2, r6
 8001596:	4658      	mov	r0, fp
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	4661      	mov	r1, ip
 800159c:	9100      	str	r1, [sp, #0]
 800159e:	2802      	cmp	r0, #2
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0xc4>
 80015a2:	e075      	b.n	8001690 <__aeabi_dmul+0x1b0>
 80015a4:	2803      	cmp	r0, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0xca>
 80015a8:	e1fe      	b.n	80019a8 <__aeabi_dmul+0x4c8>
 80015aa:	2801      	cmp	r0, #1
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xd0>
 80015ae:	e12c      	b.n	800180a <__aeabi_dmul+0x32a>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2700      	movs	r7, #0
 80015b4:	2600      	movs	r6, #0
 80015b6:	2500      	movs	r5, #0
 80015b8:	033f      	lsls	r7, r7, #12
 80015ba:	0d2a      	lsrs	r2, r5, #20
 80015bc:	0b3f      	lsrs	r7, r7, #12
 80015be:	48b3      	ldr	r0, [pc, #716]	; (800188c <__aeabi_dmul+0x3ac>)
 80015c0:	0512      	lsls	r2, r2, #20
 80015c2:	433a      	orrs	r2, r7
 80015c4:	4002      	ands	r2, r0
 80015c6:	051b      	lsls	r3, r3, #20
 80015c8:	4313      	orrs	r3, r2
 80015ca:	9a00      	ldr	r2, [sp, #0]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	07d1      	lsls	r1, r2, #31
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	430b      	orrs	r3, r1
 80015d4:	0030      	movs	r0, r6
 80015d6:	0019      	movs	r1, r3
 80015d8:	b007      	add	sp, #28
 80015da:	bc3c      	pop	{r2, r3, r4, r5}
 80015dc:	4690      	mov	r8, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	46a2      	mov	sl, r4
 80015e2:	46ab      	mov	fp, r5
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	465b      	mov	r3, fp
 80015e8:	433b      	orrs	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dmul+0x110>
 80015ee:	e12f      	b.n	8001850 <__aeabi_dmul+0x370>
 80015f0:	2f00      	cmp	r7, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dmul+0x116>
 80015f4:	e1a5      	b.n	8001942 <__aeabi_dmul+0x462>
 80015f6:	0038      	movs	r0, r7
 80015f8:	f000 fdea 	bl	80021d0 <__clzsi2>
 80015fc:	0003      	movs	r3, r0
 80015fe:	3b0b      	subs	r3, #11
 8001600:	2b1c      	cmp	r3, #28
 8001602:	dd00      	ble.n	8001606 <__aeabi_dmul+0x126>
 8001604:	e196      	b.n	8001934 <__aeabi_dmul+0x454>
 8001606:	221d      	movs	r2, #29
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	465a      	mov	r2, fp
 800160c:	0001      	movs	r1, r0
 800160e:	40da      	lsrs	r2, r3
 8001610:	465e      	mov	r6, fp
 8001612:	3908      	subs	r1, #8
 8001614:	408f      	lsls	r7, r1
 8001616:	0013      	movs	r3, r2
 8001618:	408e      	lsls	r6, r1
 800161a:	433b      	orrs	r3, r7
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	4b9c      	ldr	r3, [pc, #624]	; (8001890 <__aeabi_dmul+0x3b0>)
 8001620:	2700      	movs	r7, #0
 8001622:	1a1b      	subs	r3, r3, r0
 8001624:	4699      	mov	r9, r3
 8001626:	2300      	movs	r3, #0
 8001628:	469b      	mov	fp, r3
 800162a:	e77d      	b.n	8001528 <__aeabi_dmul+0x48>
 800162c:	4641      	mov	r1, r8
 800162e:	4653      	mov	r3, sl
 8001630:	430b      	orrs	r3, r1
 8001632:	4993      	ldr	r1, [pc, #588]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001634:	468c      	mov	ip, r1
 8001636:	44e1      	add	r9, ip
 8001638:	2b00      	cmp	r3, #0
 800163a:	d000      	beq.n	800163e <__aeabi_dmul+0x15e>
 800163c:	e11a      	b.n	8001874 <__aeabi_dmul+0x394>
 800163e:	2202      	movs	r2, #2
 8001640:	2002      	movs	r0, #2
 8001642:	4317      	orrs	r7, r2
 8001644:	2200      	movs	r2, #0
 8001646:	e78c      	b.n	8001562 <__aeabi_dmul+0x82>
 8001648:	4313      	orrs	r3, r2
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x16e>
 800164c:	e10d      	b.n	800186a <__aeabi_dmul+0x38a>
 800164e:	4643      	mov	r3, r8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dmul+0x176>
 8001654:	e181      	b.n	800195a <__aeabi_dmul+0x47a>
 8001656:	4640      	mov	r0, r8
 8001658:	f000 fdba 	bl	80021d0 <__clzsi2>
 800165c:	0002      	movs	r2, r0
 800165e:	3a0b      	subs	r2, #11
 8001660:	2a1c      	cmp	r2, #28
 8001662:	dd00      	ble.n	8001666 <__aeabi_dmul+0x186>
 8001664:	e172      	b.n	800194c <__aeabi_dmul+0x46c>
 8001666:	0001      	movs	r1, r0
 8001668:	4643      	mov	r3, r8
 800166a:	3908      	subs	r1, #8
 800166c:	408b      	lsls	r3, r1
 800166e:	4698      	mov	r8, r3
 8001670:	231d      	movs	r3, #29
 8001672:	1a9a      	subs	r2, r3, r2
 8001674:	4653      	mov	r3, sl
 8001676:	40d3      	lsrs	r3, r2
 8001678:	001a      	movs	r2, r3
 800167a:	4643      	mov	r3, r8
 800167c:	4313      	orrs	r3, r2
 800167e:	4652      	mov	r2, sl
 8001680:	408a      	lsls	r2, r1
 8001682:	4649      	mov	r1, r9
 8001684:	1a08      	subs	r0, r1, r0
 8001686:	4982      	ldr	r1, [pc, #520]	; (8001890 <__aeabi_dmul+0x3b0>)
 8001688:	4689      	mov	r9, r1
 800168a:	4481      	add	r9, r0
 800168c:	2000      	movs	r0, #0
 800168e:	e768      	b.n	8001562 <__aeabi_dmul+0x82>
 8001690:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001692:	2700      	movs	r7, #0
 8001694:	2600      	movs	r6, #0
 8001696:	e78e      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001698:	0c14      	lsrs	r4, r2, #16
 800169a:	0412      	lsls	r2, r2, #16
 800169c:	0c12      	lsrs	r2, r2, #16
 800169e:	0011      	movs	r1, r2
 80016a0:	0c37      	lsrs	r7, r6, #16
 80016a2:	0436      	lsls	r6, r6, #16
 80016a4:	0c35      	lsrs	r5, r6, #16
 80016a6:	4379      	muls	r1, r7
 80016a8:	0028      	movs	r0, r5
 80016aa:	468c      	mov	ip, r1
 80016ac:	002e      	movs	r6, r5
 80016ae:	4360      	muls	r0, r4
 80016b0:	4460      	add	r0, ip
 80016b2:	4683      	mov	fp, r0
 80016b4:	4356      	muls	r6, r2
 80016b6:	0021      	movs	r1, r4
 80016b8:	0c30      	lsrs	r0, r6, #16
 80016ba:	4680      	mov	r8, r0
 80016bc:	4658      	mov	r0, fp
 80016be:	4379      	muls	r1, r7
 80016c0:	4440      	add	r0, r8
 80016c2:	9102      	str	r1, [sp, #8]
 80016c4:	4584      	cmp	ip, r0
 80016c6:	d906      	bls.n	80016d6 <__aeabi_dmul+0x1f6>
 80016c8:	4688      	mov	r8, r1
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0249      	lsls	r1, r1, #9
 80016ce:	468c      	mov	ip, r1
 80016d0:	44e0      	add	r8, ip
 80016d2:	4641      	mov	r1, r8
 80016d4:	9102      	str	r1, [sp, #8]
 80016d6:	0436      	lsls	r6, r6, #16
 80016d8:	0c01      	lsrs	r1, r0, #16
 80016da:	0c36      	lsrs	r6, r6, #16
 80016dc:	0400      	lsls	r0, r0, #16
 80016de:	468b      	mov	fp, r1
 80016e0:	1981      	adds	r1, r0, r6
 80016e2:	0c1e      	lsrs	r6, r3, #16
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	9103      	str	r1, [sp, #12]
 80016ea:	0019      	movs	r1, r3
 80016ec:	4379      	muls	r1, r7
 80016ee:	468c      	mov	ip, r1
 80016f0:	0028      	movs	r0, r5
 80016f2:	4375      	muls	r5, r6
 80016f4:	4465      	add	r5, ip
 80016f6:	46a8      	mov	r8, r5
 80016f8:	4358      	muls	r0, r3
 80016fa:	0c05      	lsrs	r5, r0, #16
 80016fc:	4445      	add	r5, r8
 80016fe:	4377      	muls	r7, r6
 8001700:	42a9      	cmp	r1, r5
 8001702:	d903      	bls.n	800170c <__aeabi_dmul+0x22c>
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0249      	lsls	r1, r1, #9
 8001708:	468c      	mov	ip, r1
 800170a:	4467      	add	r7, ip
 800170c:	0c29      	lsrs	r1, r5, #16
 800170e:	468c      	mov	ip, r1
 8001710:	0039      	movs	r1, r7
 8001712:	0400      	lsls	r0, r0, #16
 8001714:	0c00      	lsrs	r0, r0, #16
 8001716:	042d      	lsls	r5, r5, #16
 8001718:	182d      	adds	r5, r5, r0
 800171a:	4461      	add	r1, ip
 800171c:	44ab      	add	fp, r5
 800171e:	9105      	str	r1, [sp, #20]
 8001720:	4659      	mov	r1, fp
 8001722:	9104      	str	r1, [sp, #16]
 8001724:	9901      	ldr	r1, [sp, #4]
 8001726:	040f      	lsls	r7, r1, #16
 8001728:	0c3f      	lsrs	r7, r7, #16
 800172a:	0c08      	lsrs	r0, r1, #16
 800172c:	0039      	movs	r1, r7
 800172e:	4351      	muls	r1, r2
 8001730:	4342      	muls	r2, r0
 8001732:	4690      	mov	r8, r2
 8001734:	0002      	movs	r2, r0
 8001736:	468c      	mov	ip, r1
 8001738:	0c09      	lsrs	r1, r1, #16
 800173a:	468b      	mov	fp, r1
 800173c:	4362      	muls	r2, r4
 800173e:	437c      	muls	r4, r7
 8001740:	4444      	add	r4, r8
 8001742:	445c      	add	r4, fp
 8001744:	45a0      	cmp	r8, r4
 8001746:	d903      	bls.n	8001750 <__aeabi_dmul+0x270>
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0249      	lsls	r1, r1, #9
 800174c:	4688      	mov	r8, r1
 800174e:	4442      	add	r2, r8
 8001750:	0c21      	lsrs	r1, r4, #16
 8001752:	4688      	mov	r8, r1
 8001754:	4661      	mov	r1, ip
 8001756:	0409      	lsls	r1, r1, #16
 8001758:	0c09      	lsrs	r1, r1, #16
 800175a:	468c      	mov	ip, r1
 800175c:	0039      	movs	r1, r7
 800175e:	4359      	muls	r1, r3
 8001760:	4343      	muls	r3, r0
 8001762:	4370      	muls	r0, r6
 8001764:	437e      	muls	r6, r7
 8001766:	0c0f      	lsrs	r7, r1, #16
 8001768:	18f6      	adds	r6, r6, r3
 800176a:	0424      	lsls	r4, r4, #16
 800176c:	19be      	adds	r6, r7, r6
 800176e:	4464      	add	r4, ip
 8001770:	4442      	add	r2, r8
 8001772:	468c      	mov	ip, r1
 8001774:	42b3      	cmp	r3, r6
 8001776:	d903      	bls.n	8001780 <__aeabi_dmul+0x2a0>
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	4698      	mov	r8, r3
 800177e:	4440      	add	r0, r8
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4661      	mov	r1, ip
 8001784:	4698      	mov	r8, r3
 8001786:	9b04      	ldr	r3, [sp, #16]
 8001788:	0437      	lsls	r7, r6, #16
 800178a:	4443      	add	r3, r8
 800178c:	469b      	mov	fp, r3
 800178e:	45ab      	cmp	fp, r5
 8001790:	41ad      	sbcs	r5, r5
 8001792:	426b      	negs	r3, r5
 8001794:	040d      	lsls	r5, r1, #16
 8001796:	9905      	ldr	r1, [sp, #20]
 8001798:	0c2d      	lsrs	r5, r5, #16
 800179a:	468c      	mov	ip, r1
 800179c:	197f      	adds	r7, r7, r5
 800179e:	4467      	add	r7, ip
 80017a0:	18fd      	adds	r5, r7, r3
 80017a2:	46a8      	mov	r8, r5
 80017a4:	465d      	mov	r5, fp
 80017a6:	192d      	adds	r5, r5, r4
 80017a8:	42a5      	cmp	r5, r4
 80017aa:	41a4      	sbcs	r4, r4
 80017ac:	4693      	mov	fp, r2
 80017ae:	4264      	negs	r4, r4
 80017b0:	46a4      	mov	ip, r4
 80017b2:	44c3      	add	fp, r8
 80017b4:	44dc      	add	ip, fp
 80017b6:	428f      	cmp	r7, r1
 80017b8:	41bf      	sbcs	r7, r7
 80017ba:	4598      	cmp	r8, r3
 80017bc:	419b      	sbcs	r3, r3
 80017be:	4593      	cmp	fp, r2
 80017c0:	4192      	sbcs	r2, r2
 80017c2:	45a4      	cmp	ip, r4
 80017c4:	41a4      	sbcs	r4, r4
 80017c6:	425b      	negs	r3, r3
 80017c8:	427f      	negs	r7, r7
 80017ca:	431f      	orrs	r7, r3
 80017cc:	0c36      	lsrs	r6, r6, #16
 80017ce:	4252      	negs	r2, r2
 80017d0:	4264      	negs	r4, r4
 80017d2:	19bf      	adds	r7, r7, r6
 80017d4:	4322      	orrs	r2, r4
 80017d6:	18bf      	adds	r7, r7, r2
 80017d8:	4662      	mov	r2, ip
 80017da:	1838      	adds	r0, r7, r0
 80017dc:	0243      	lsls	r3, r0, #9
 80017de:	0dd2      	lsrs	r2, r2, #23
 80017e0:	9903      	ldr	r1, [sp, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	026a      	lsls	r2, r5, #9
 80017e6:	430a      	orrs	r2, r1
 80017e8:	1e50      	subs	r0, r2, #1
 80017ea:	4182      	sbcs	r2, r0
 80017ec:	4661      	mov	r1, ip
 80017ee:	0ded      	lsrs	r5, r5, #23
 80017f0:	432a      	orrs	r2, r5
 80017f2:	024e      	lsls	r6, r1, #9
 80017f4:	4332      	orrs	r2, r6
 80017f6:	01d9      	lsls	r1, r3, #7
 80017f8:	d400      	bmi.n	80017fc <__aeabi_dmul+0x31c>
 80017fa:	e0b3      	b.n	8001964 <__aeabi_dmul+0x484>
 80017fc:	2601      	movs	r6, #1
 80017fe:	0850      	lsrs	r0, r2, #1
 8001800:	4032      	ands	r2, r6
 8001802:	4302      	orrs	r2, r0
 8001804:	07de      	lsls	r6, r3, #31
 8001806:	4332      	orrs	r2, r6
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	4c22      	ldr	r4, [pc, #136]	; (8001894 <__aeabi_dmul+0x3b4>)
 800180c:	4454      	add	r4, sl
 800180e:	2c00      	cmp	r4, #0
 8001810:	dd62      	ble.n	80018d8 <__aeabi_dmul+0x3f8>
 8001812:	0751      	lsls	r1, r2, #29
 8001814:	d009      	beq.n	800182a <__aeabi_dmul+0x34a>
 8001816:	200f      	movs	r0, #15
 8001818:	4010      	ands	r0, r2
 800181a:	2804      	cmp	r0, #4
 800181c:	d005      	beq.n	800182a <__aeabi_dmul+0x34a>
 800181e:	1d10      	adds	r0, r2, #4
 8001820:	4290      	cmp	r0, r2
 8001822:	4192      	sbcs	r2, r2
 8001824:	4252      	negs	r2, r2
 8001826:	189b      	adds	r3, r3, r2
 8001828:	0002      	movs	r2, r0
 800182a:	01d9      	lsls	r1, r3, #7
 800182c:	d504      	bpl.n	8001838 <__aeabi_dmul+0x358>
 800182e:	2480      	movs	r4, #128	; 0x80
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <__aeabi_dmul+0x3b8>)
 8001832:	00e4      	lsls	r4, r4, #3
 8001834:	4003      	ands	r3, r0
 8001836:	4454      	add	r4, sl
 8001838:	4818      	ldr	r0, [pc, #96]	; (800189c <__aeabi_dmul+0x3bc>)
 800183a:	4284      	cmp	r4, r0
 800183c:	dd00      	ble.n	8001840 <__aeabi_dmul+0x360>
 800183e:	e727      	b.n	8001690 <__aeabi_dmul+0x1b0>
 8001840:	075e      	lsls	r6, r3, #29
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	08d2      	lsrs	r2, r2, #3
 8001846:	0b1f      	lsrs	r7, r3, #12
 8001848:	0563      	lsls	r3, r4, #21
 800184a:	4316      	orrs	r6, r2
 800184c:	0d5b      	lsrs	r3, r3, #21
 800184e:	e6b2      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001850:	2300      	movs	r3, #0
 8001852:	4699      	mov	r9, r3
 8001854:	3301      	adds	r3, #1
 8001856:	2704      	movs	r7, #4
 8001858:	2600      	movs	r6, #0
 800185a:	469b      	mov	fp, r3
 800185c:	e664      	b.n	8001528 <__aeabi_dmul+0x48>
 800185e:	2303      	movs	r3, #3
 8001860:	9701      	str	r7, [sp, #4]
 8001862:	4681      	mov	r9, r0
 8001864:	270c      	movs	r7, #12
 8001866:	469b      	mov	fp, r3
 8001868:	e65e      	b.n	8001528 <__aeabi_dmul+0x48>
 800186a:	2201      	movs	r2, #1
 800186c:	2001      	movs	r0, #1
 800186e:	4317      	orrs	r7, r2
 8001870:	2200      	movs	r2, #0
 8001872:	e676      	b.n	8001562 <__aeabi_dmul+0x82>
 8001874:	2303      	movs	r3, #3
 8001876:	2003      	movs	r0, #3
 8001878:	431f      	orrs	r7, r3
 800187a:	4643      	mov	r3, r8
 800187c:	e671      	b.n	8001562 <__aeabi_dmul+0x82>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff
 8001884:	fffffc01 	.word	0xfffffc01
 8001888:	0800a87c 	.word	0x0800a87c
 800188c:	800fffff 	.word	0x800fffff
 8001890:	fffffc0d 	.word	0xfffffc0d
 8001894:	000003ff 	.word	0x000003ff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	2300      	movs	r3, #0
 80018a2:	2780      	movs	r7, #128	; 0x80
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	033f      	lsls	r7, r7, #12
 80018a8:	2600      	movs	r6, #0
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80018ac:	e683      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80018ae:	9b01      	ldr	r3, [sp, #4]
 80018b0:	0032      	movs	r2, r6
 80018b2:	46a4      	mov	ip, r4
 80018b4:	4658      	mov	r0, fp
 80018b6:	e670      	b.n	800159a <__aeabi_dmul+0xba>
 80018b8:	46ac      	mov	ip, r5
 80018ba:	e66e      	b.n	800159a <__aeabi_dmul+0xba>
 80018bc:	2780      	movs	r7, #128	; 0x80
 80018be:	9901      	ldr	r1, [sp, #4]
 80018c0:	033f      	lsls	r7, r7, #12
 80018c2:	4239      	tst	r1, r7
 80018c4:	d02d      	beq.n	8001922 <__aeabi_dmul+0x442>
 80018c6:	423b      	tst	r3, r7
 80018c8:	d12b      	bne.n	8001922 <__aeabi_dmul+0x442>
 80018ca:	431f      	orrs	r7, r3
 80018cc:	033f      	lsls	r7, r7, #12
 80018ce:	0b3f      	lsrs	r7, r7, #12
 80018d0:	9500      	str	r5, [sp, #0]
 80018d2:	0016      	movs	r6, r2
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80018d6:	e66e      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80018d8:	2501      	movs	r5, #1
 80018da:	1b2d      	subs	r5, r5, r4
 80018dc:	2d38      	cmp	r5, #56	; 0x38
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dmul+0x402>
 80018e0:	e666      	b.n	80015b0 <__aeabi_dmul+0xd0>
 80018e2:	2d1f      	cmp	r5, #31
 80018e4:	dc40      	bgt.n	8001968 <__aeabi_dmul+0x488>
 80018e6:	4835      	ldr	r0, [pc, #212]	; (80019bc <__aeabi_dmul+0x4dc>)
 80018e8:	001c      	movs	r4, r3
 80018ea:	4450      	add	r0, sl
 80018ec:	0016      	movs	r6, r2
 80018ee:	4082      	lsls	r2, r0
 80018f0:	4084      	lsls	r4, r0
 80018f2:	40ee      	lsrs	r6, r5
 80018f4:	1e50      	subs	r0, r2, #1
 80018f6:	4182      	sbcs	r2, r0
 80018f8:	4334      	orrs	r4, r6
 80018fa:	4314      	orrs	r4, r2
 80018fc:	40eb      	lsrs	r3, r5
 80018fe:	0762      	lsls	r2, r4, #29
 8001900:	d009      	beq.n	8001916 <__aeabi_dmul+0x436>
 8001902:	220f      	movs	r2, #15
 8001904:	4022      	ands	r2, r4
 8001906:	2a04      	cmp	r2, #4
 8001908:	d005      	beq.n	8001916 <__aeabi_dmul+0x436>
 800190a:	0022      	movs	r2, r4
 800190c:	1d14      	adds	r4, r2, #4
 800190e:	4294      	cmp	r4, r2
 8001910:	4180      	sbcs	r0, r0
 8001912:	4240      	negs	r0, r0
 8001914:	181b      	adds	r3, r3, r0
 8001916:	021a      	lsls	r2, r3, #8
 8001918:	d53e      	bpl.n	8001998 <__aeabi_dmul+0x4b8>
 800191a:	2301      	movs	r3, #1
 800191c:	2700      	movs	r7, #0
 800191e:	2600      	movs	r6, #0
 8001920:	e649      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001922:	2780      	movs	r7, #128	; 0x80
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	033f      	lsls	r7, r7, #12
 8001928:	431f      	orrs	r7, r3
 800192a:	033f      	lsls	r7, r7, #12
 800192c:	0b3f      	lsrs	r7, r7, #12
 800192e:	9400      	str	r4, [sp, #0]
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <__aeabi_dmul+0x4d8>)
 8001932:	e640      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001934:	0003      	movs	r3, r0
 8001936:	465a      	mov	r2, fp
 8001938:	3b28      	subs	r3, #40	; 0x28
 800193a:	409a      	lsls	r2, r3
 800193c:	2600      	movs	r6, #0
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	e66d      	b.n	800161e <__aeabi_dmul+0x13e>
 8001942:	4658      	mov	r0, fp
 8001944:	f000 fc44 	bl	80021d0 <__clzsi2>
 8001948:	3020      	adds	r0, #32
 800194a:	e657      	b.n	80015fc <__aeabi_dmul+0x11c>
 800194c:	0003      	movs	r3, r0
 800194e:	4652      	mov	r2, sl
 8001950:	3b28      	subs	r3, #40	; 0x28
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	e693      	b.n	8001682 <__aeabi_dmul+0x1a2>
 800195a:	4650      	mov	r0, sl
 800195c:	f000 fc38 	bl	80021d0 <__clzsi2>
 8001960:	3020      	adds	r0, #32
 8001962:	e67b      	b.n	800165c <__aeabi_dmul+0x17c>
 8001964:	46ca      	mov	sl, r9
 8001966:	e750      	b.n	800180a <__aeabi_dmul+0x32a>
 8001968:	201f      	movs	r0, #31
 800196a:	001e      	movs	r6, r3
 800196c:	4240      	negs	r0, r0
 800196e:	1b04      	subs	r4, r0, r4
 8001970:	40e6      	lsrs	r6, r4
 8001972:	2d20      	cmp	r5, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dmul+0x49e>
 8001976:	4c12      	ldr	r4, [pc, #72]	; (80019c0 <__aeabi_dmul+0x4e0>)
 8001978:	4454      	add	r4, sl
 800197a:	40a3      	lsls	r3, r4
 800197c:	431a      	orrs	r2, r3
 800197e:	1e50      	subs	r0, r2, #1
 8001980:	4182      	sbcs	r2, r0
 8001982:	4332      	orrs	r2, r6
 8001984:	2607      	movs	r6, #7
 8001986:	2700      	movs	r7, #0
 8001988:	4016      	ands	r6, r2
 800198a:	d009      	beq.n	80019a0 <__aeabi_dmul+0x4c0>
 800198c:	200f      	movs	r0, #15
 800198e:	2300      	movs	r3, #0
 8001990:	4010      	ands	r0, r2
 8001992:	0014      	movs	r4, r2
 8001994:	2804      	cmp	r0, #4
 8001996:	d1b9      	bne.n	800190c <__aeabi_dmul+0x42c>
 8001998:	0022      	movs	r2, r4
 800199a:	075e      	lsls	r6, r3, #29
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	0b1f      	lsrs	r7, r3, #12
 80019a0:	08d2      	lsrs	r2, r2, #3
 80019a2:	4316      	orrs	r6, r2
 80019a4:	2300      	movs	r3, #0
 80019a6:	e606      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80019a8:	2780      	movs	r7, #128	; 0x80
 80019aa:	033f      	lsls	r7, r7, #12
 80019ac:	431f      	orrs	r7, r3
 80019ae:	033f      	lsls	r7, r7, #12
 80019b0:	0b3f      	lsrs	r7, r7, #12
 80019b2:	0016      	movs	r6, r2
 80019b4:	4b00      	ldr	r3, [pc, #0]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80019b6:	e5fe      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80019b8:	000007ff 	.word	0x000007ff
 80019bc:	0000041e 	.word	0x0000041e
 80019c0:	0000043e 	.word	0x0000043e

080019c4 <__aeabi_dsub>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	4657      	mov	r7, sl
 80019c8:	464e      	mov	r6, r9
 80019ca:	4645      	mov	r5, r8
 80019cc:	46de      	mov	lr, fp
 80019ce:	000c      	movs	r4, r1
 80019d0:	0309      	lsls	r1, r1, #12
 80019d2:	b5e0      	push	{r5, r6, r7, lr}
 80019d4:	0a49      	lsrs	r1, r1, #9
 80019d6:	0f46      	lsrs	r6, r0, #29
 80019d8:	005f      	lsls	r7, r3, #1
 80019da:	4331      	orrs	r1, r6
 80019dc:	031e      	lsls	r6, r3, #12
 80019de:	0fdb      	lsrs	r3, r3, #31
 80019e0:	0a76      	lsrs	r6, r6, #9
 80019e2:	469b      	mov	fp, r3
 80019e4:	0f53      	lsrs	r3, r2, #29
 80019e6:	4333      	orrs	r3, r6
 80019e8:	4ec8      	ldr	r6, [pc, #800]	; (8001d0c <__aeabi_dsub+0x348>)
 80019ea:	0065      	lsls	r5, r4, #1
 80019ec:	00c0      	lsls	r0, r0, #3
 80019ee:	0fe4      	lsrs	r4, r4, #31
 80019f0:	00d2      	lsls	r2, r2, #3
 80019f2:	0d6d      	lsrs	r5, r5, #21
 80019f4:	46a2      	mov	sl, r4
 80019f6:	4681      	mov	r9, r0
 80019f8:	0d7f      	lsrs	r7, r7, #21
 80019fa:	469c      	mov	ip, r3
 80019fc:	4690      	mov	r8, r2
 80019fe:	42b7      	cmp	r7, r6
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x40>
 8001a02:	e0b9      	b.n	8001b78 <__aeabi_dsub+0x1b4>
 8001a04:	465b      	mov	r3, fp
 8001a06:	2601      	movs	r6, #1
 8001a08:	4073      	eors	r3, r6
 8001a0a:	469b      	mov	fp, r3
 8001a0c:	1bee      	subs	r6, r5, r7
 8001a0e:	45a3      	cmp	fp, r4
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x50>
 8001a12:	e083      	b.n	8001b1c <__aeabi_dsub+0x158>
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	dd63      	ble.n	8001ae0 <__aeabi_dsub+0x11c>
 8001a18:	2f00      	cmp	r7, #0
 8001a1a:	d000      	beq.n	8001a1e <__aeabi_dsub+0x5a>
 8001a1c:	e0b1      	b.n	8001b82 <__aeabi_dsub+0x1be>
 8001a1e:	4663      	mov	r3, ip
 8001a20:	4313      	orrs	r3, r2
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x62>
 8001a24:	e123      	b.n	8001c6e <__aeabi_dsub+0x2aa>
 8001a26:	1e73      	subs	r3, r6, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x6a>
 8001a2c:	e1ba      	b.n	8001da4 <__aeabi_dsub+0x3e0>
 8001a2e:	1a86      	subs	r6, r0, r2
 8001a30:	4663      	mov	r3, ip
 8001a32:	42b0      	cmp	r0, r6
 8001a34:	4180      	sbcs	r0, r0
 8001a36:	2501      	movs	r5, #1
 8001a38:	1ac9      	subs	r1, r1, r3
 8001a3a:	4240      	negs	r0, r0
 8001a3c:	1a09      	subs	r1, r1, r0
 8001a3e:	020b      	lsls	r3, r1, #8
 8001a40:	d400      	bmi.n	8001a44 <__aeabi_dsub+0x80>
 8001a42:	e147      	b.n	8001cd4 <__aeabi_dsub+0x310>
 8001a44:	0249      	lsls	r1, r1, #9
 8001a46:	0a4b      	lsrs	r3, r1, #9
 8001a48:	4698      	mov	r8, r3
 8001a4a:	4643      	mov	r3, r8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x8e>
 8001a50:	e189      	b.n	8001d66 <__aeabi_dsub+0x3a2>
 8001a52:	4640      	mov	r0, r8
 8001a54:	f000 fbbc 	bl	80021d0 <__clzsi2>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	dd00      	ble.n	8001a62 <__aeabi_dsub+0x9e>
 8001a60:	e17c      	b.n	8001d5c <__aeabi_dsub+0x398>
 8001a62:	2220      	movs	r2, #32
 8001a64:	0030      	movs	r0, r6
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	4641      	mov	r1, r8
 8001a6a:	40d0      	lsrs	r0, r2
 8001a6c:	4099      	lsls	r1, r3
 8001a6e:	0002      	movs	r2, r0
 8001a70:	409e      	lsls	r6, r3
 8001a72:	430a      	orrs	r2, r1
 8001a74:	429d      	cmp	r5, r3
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dsub+0xb6>
 8001a78:	e16a      	b.n	8001d50 <__aeabi_dsub+0x38c>
 8001a7a:	1b5d      	subs	r5, r3, r5
 8001a7c:	1c6b      	adds	r3, r5, #1
 8001a7e:	2b1f      	cmp	r3, #31
 8001a80:	dd00      	ble.n	8001a84 <__aeabi_dsub+0xc0>
 8001a82:	e194      	b.n	8001dae <__aeabi_dsub+0x3ea>
 8001a84:	2120      	movs	r1, #32
 8001a86:	0010      	movs	r0, r2
 8001a88:	0035      	movs	r5, r6
 8001a8a:	1ac9      	subs	r1, r1, r3
 8001a8c:	408e      	lsls	r6, r1
 8001a8e:	40da      	lsrs	r2, r3
 8001a90:	4088      	lsls	r0, r1
 8001a92:	40dd      	lsrs	r5, r3
 8001a94:	1e71      	subs	r1, r6, #1
 8001a96:	418e      	sbcs	r6, r1
 8001a98:	0011      	movs	r1, r2
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4328      	orrs	r0, r5
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	4306      	orrs	r6, r0
 8001aa2:	4032      	ands	r2, r6
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d009      	beq.n	8001abc <__aeabi_dsub+0xf8>
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	4033      	ands	r3, r6
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d005      	beq.n	8001abc <__aeabi_dsub+0xf8>
 8001ab0:	1d33      	adds	r3, r6, #4
 8001ab2:	42b3      	cmp	r3, r6
 8001ab4:	41b6      	sbcs	r6, r6
 8001ab6:	4276      	negs	r6, r6
 8001ab8:	1989      	adds	r1, r1, r6
 8001aba:	001e      	movs	r6, r3
 8001abc:	020b      	lsls	r3, r1, #8
 8001abe:	d400      	bmi.n	8001ac2 <__aeabi_dsub+0xfe>
 8001ac0:	e23d      	b.n	8001f3e <__aeabi_dsub+0x57a>
 8001ac2:	1c6a      	adds	r2, r5, #1
 8001ac4:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <__aeabi_dsub+0x348>)
 8001ac6:	0555      	lsls	r5, r2, #21
 8001ac8:	0d6d      	lsrs	r5, r5, #21
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x10c>
 8001ace:	e119      	b.n	8001d04 <__aeabi_dsub+0x340>
 8001ad0:	4a8f      	ldr	r2, [pc, #572]	; (8001d10 <__aeabi_dsub+0x34c>)
 8001ad2:	08f6      	lsrs	r6, r6, #3
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	0757      	lsls	r7, r2, #29
 8001ad8:	0252      	lsls	r2, r2, #9
 8001ada:	4337      	orrs	r7, r6
 8001adc:	0b12      	lsrs	r2, r2, #12
 8001ade:	e09b      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001ae0:	2e00      	cmp	r6, #0
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x122>
 8001ae4:	e0c5      	b.n	8001c72 <__aeabi_dsub+0x2ae>
 8001ae6:	1c6e      	adds	r6, r5, #1
 8001ae8:	0576      	lsls	r6, r6, #21
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	2e01      	cmp	r6, #1
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dsub+0x12e>
 8001af0:	e148      	b.n	8001d84 <__aeabi_dsub+0x3c0>
 8001af2:	4667      	mov	r7, ip
 8001af4:	1a86      	subs	r6, r0, r2
 8001af6:	1bcb      	subs	r3, r1, r7
 8001af8:	42b0      	cmp	r0, r6
 8001afa:	41bf      	sbcs	r7, r7
 8001afc:	427f      	negs	r7, r7
 8001afe:	46b8      	mov	r8, r7
 8001b00:	001f      	movs	r7, r3
 8001b02:	4643      	mov	r3, r8
 8001b04:	1aff      	subs	r7, r7, r3
 8001b06:	003b      	movs	r3, r7
 8001b08:	46b8      	mov	r8, r7
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	d500      	bpl.n	8001b10 <__aeabi_dsub+0x14c>
 8001b0e:	e15f      	b.n	8001dd0 <__aeabi_dsub+0x40c>
 8001b10:	4337      	orrs	r7, r6
 8001b12:	d19a      	bne.n	8001a4a <__aeabi_dsub+0x86>
 8001b14:	2200      	movs	r2, #0
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e079      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001b1c:	2e00      	cmp	r6, #0
 8001b1e:	dc00      	bgt.n	8001b22 <__aeabi_dsub+0x15e>
 8001b20:	e0fa      	b.n	8001d18 <__aeabi_dsub+0x354>
 8001b22:	2f00      	cmp	r7, #0
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x164>
 8001b26:	e08d      	b.n	8001c44 <__aeabi_dsub+0x280>
 8001b28:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b2a:	429d      	cmp	r5, r3
 8001b2c:	d067      	beq.n	8001bfe <__aeabi_dsub+0x23a>
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	4667      	mov	r7, ip
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	431f      	orrs	r7, r3
 8001b36:	46bc      	mov	ip, r7
 8001b38:	2e38      	cmp	r6, #56	; 0x38
 8001b3a:	dc00      	bgt.n	8001b3e <__aeabi_dsub+0x17a>
 8001b3c:	e152      	b.n	8001de4 <__aeabi_dsub+0x420>
 8001b3e:	4663      	mov	r3, ip
 8001b40:	4313      	orrs	r3, r2
 8001b42:	1e5a      	subs	r2, r3, #1
 8001b44:	4193      	sbcs	r3, r2
 8001b46:	181e      	adds	r6, r3, r0
 8001b48:	4286      	cmp	r6, r0
 8001b4a:	4180      	sbcs	r0, r0
 8001b4c:	4240      	negs	r0, r0
 8001b4e:	1809      	adds	r1, r1, r0
 8001b50:	020b      	lsls	r3, r1, #8
 8001b52:	d400      	bmi.n	8001b56 <__aeabi_dsub+0x192>
 8001b54:	e0be      	b.n	8001cd4 <__aeabi_dsub+0x310>
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b58:	3501      	adds	r5, #1
 8001b5a:	429d      	cmp	r5, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x19c>
 8001b5e:	e0d2      	b.n	8001d06 <__aeabi_dsub+0x342>
 8001b60:	4a6b      	ldr	r2, [pc, #428]	; (8001d10 <__aeabi_dsub+0x34c>)
 8001b62:	0873      	lsrs	r3, r6, #1
 8001b64:	400a      	ands	r2, r1
 8001b66:	2101      	movs	r1, #1
 8001b68:	400e      	ands	r6, r1
 8001b6a:	431e      	orrs	r6, r3
 8001b6c:	0851      	lsrs	r1, r2, #1
 8001b6e:	07d3      	lsls	r3, r2, #31
 8001b70:	2207      	movs	r2, #7
 8001b72:	431e      	orrs	r6, r3
 8001b74:	4032      	ands	r2, r6
 8001b76:	e795      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001b78:	001e      	movs	r6, r3
 8001b7a:	4316      	orrs	r6, r2
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dsub+0x1bc>
 8001b7e:	e745      	b.n	8001a0c <__aeabi_dsub+0x48>
 8001b80:	e740      	b.n	8001a04 <__aeabi_dsub+0x40>
 8001b82:	4b62      	ldr	r3, [pc, #392]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b84:	429d      	cmp	r5, r3
 8001b86:	d03a      	beq.n	8001bfe <__aeabi_dsub+0x23a>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	4667      	mov	r7, ip
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431f      	orrs	r7, r3
 8001b90:	46bc      	mov	ip, r7
 8001b92:	2e38      	cmp	r6, #56	; 0x38
 8001b94:	dd00      	ble.n	8001b98 <__aeabi_dsub+0x1d4>
 8001b96:	e0eb      	b.n	8001d70 <__aeabi_dsub+0x3ac>
 8001b98:	2e1f      	cmp	r6, #31
 8001b9a:	dc00      	bgt.n	8001b9e <__aeabi_dsub+0x1da>
 8001b9c:	e13a      	b.n	8001e14 <__aeabi_dsub+0x450>
 8001b9e:	0033      	movs	r3, r6
 8001ba0:	4667      	mov	r7, ip
 8001ba2:	3b20      	subs	r3, #32
 8001ba4:	40df      	lsrs	r7, r3
 8001ba6:	003b      	movs	r3, r7
 8001ba8:	2e20      	cmp	r6, #32
 8001baa:	d005      	beq.n	8001bb8 <__aeabi_dsub+0x1f4>
 8001bac:	2740      	movs	r7, #64	; 0x40
 8001bae:	1bbf      	subs	r7, r7, r6
 8001bb0:	4666      	mov	r6, ip
 8001bb2:	40be      	lsls	r6, r7
 8001bb4:	4332      	orrs	r2, r6
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4646      	mov	r6, r8
 8001bba:	1e72      	subs	r2, r6, #1
 8001bbc:	4196      	sbcs	r6, r2
 8001bbe:	4333      	orrs	r3, r6
 8001bc0:	e0da      	b.n	8001d78 <__aeabi_dsub+0x3b4>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x204>
 8001bc6:	e214      	b.n	8001ff2 <__aeabi_dsub+0x62e>
 8001bc8:	4663      	mov	r3, ip
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x20c>
 8001bce:	e168      	b.n	8001ea2 <__aeabi_dsub+0x4de>
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	074e      	lsls	r6, r1, #29
 8001bd4:	08c0      	lsrs	r0, r0, #3
 8001bd6:	08c9      	lsrs	r1, r1, #3
 8001bd8:	031b      	lsls	r3, r3, #12
 8001bda:	4306      	orrs	r6, r0
 8001bdc:	4219      	tst	r1, r3
 8001bde:	d008      	beq.n	8001bf2 <__aeabi_dsub+0x22e>
 8001be0:	4660      	mov	r0, ip
 8001be2:	08c0      	lsrs	r0, r0, #3
 8001be4:	4218      	tst	r0, r3
 8001be6:	d104      	bne.n	8001bf2 <__aeabi_dsub+0x22e>
 8001be8:	4663      	mov	r3, ip
 8001bea:	0001      	movs	r1, r0
 8001bec:	08d2      	lsrs	r2, r2, #3
 8001bee:	075e      	lsls	r6, r3, #29
 8001bf0:	4316      	orrs	r6, r2
 8001bf2:	00f3      	lsls	r3, r6, #3
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	00c9      	lsls	r1, r1, #3
 8001bf8:	0f72      	lsrs	r2, r6, #29
 8001bfa:	4d44      	ldr	r5, [pc, #272]	; (8001d0c <__aeabi_dsub+0x348>)
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	464b      	mov	r3, r9
 8001c00:	08de      	lsrs	r6, r3, #3
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <__aeabi_dsub+0x348>)
 8001c04:	074f      	lsls	r7, r1, #29
 8001c06:	4337      	orrs	r7, r6
 8001c08:	08ca      	lsrs	r2, r1, #3
 8001c0a:	429d      	cmp	r5, r3
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x24c>
 8001c0e:	e06e      	b.n	8001cee <__aeabi_dsub+0x32a>
 8001c10:	0312      	lsls	r2, r2, #12
 8001c12:	056d      	lsls	r5, r5, #21
 8001c14:	0b12      	lsrs	r2, r2, #12
 8001c16:	0d6d      	lsrs	r5, r5, #21
 8001c18:	2100      	movs	r1, #0
 8001c1a:	0312      	lsls	r2, r2, #12
 8001c1c:	0b13      	lsrs	r3, r2, #12
 8001c1e:	0d0a      	lsrs	r2, r1, #20
 8001c20:	0512      	lsls	r2, r2, #20
 8001c22:	431a      	orrs	r2, r3
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <__aeabi_dsub+0x350>)
 8001c26:	052d      	lsls	r5, r5, #20
 8001c28:	4013      	ands	r3, r2
 8001c2a:	432b      	orrs	r3, r5
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	07e4      	lsls	r4, r4, #31
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	4323      	orrs	r3, r4
 8001c34:	0038      	movs	r0, r7
 8001c36:	0019      	movs	r1, r3
 8001c38:	bc3c      	pop	{r2, r3, r4, r5}
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	46a2      	mov	sl, r4
 8001c40:	46ab      	mov	fp, r5
 8001c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c44:	4663      	mov	r3, ip
 8001c46:	4313      	orrs	r3, r2
 8001c48:	d011      	beq.n	8001c6e <__aeabi_dsub+0x2aa>
 8001c4a:	1e73      	subs	r3, r6, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dsub+0x28e>
 8001c50:	e107      	b.n	8001e62 <__aeabi_dsub+0x49e>
 8001c52:	1886      	adds	r6, r0, r2
 8001c54:	4286      	cmp	r6, r0
 8001c56:	4180      	sbcs	r0, r0
 8001c58:	4461      	add	r1, ip
 8001c5a:	4240      	negs	r0, r0
 8001c5c:	1809      	adds	r1, r1, r0
 8001c5e:	2501      	movs	r5, #1
 8001c60:	020b      	lsls	r3, r1, #8
 8001c62:	d537      	bpl.n	8001cd4 <__aeabi_dsub+0x310>
 8001c64:	2502      	movs	r5, #2
 8001c66:	e77b      	b.n	8001b60 <__aeabi_dsub+0x19c>
 8001c68:	003e      	movs	r6, r7
 8001c6a:	4661      	mov	r1, ip
 8001c6c:	4691      	mov	r9, r2
 8001c6e:	0035      	movs	r5, r6
 8001c70:	e7c5      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001c72:	465c      	mov	r4, fp
 8001c74:	2d00      	cmp	r5, #0
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dsub+0x2b6>
 8001c78:	e0e1      	b.n	8001e3e <__aeabi_dsub+0x47a>
 8001c7a:	000b      	movs	r3, r1
 8001c7c:	4303      	orrs	r3, r0
 8001c7e:	d0f3      	beq.n	8001c68 <__aeabi_dsub+0x2a4>
 8001c80:	1c73      	adds	r3, r6, #1
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x2c2>
 8001c84:	e1ac      	b.n	8001fe0 <__aeabi_dsub+0x61c>
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <__aeabi_dsub+0x348>)
 8001c88:	429f      	cmp	r7, r3
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x2ca>
 8001c8c:	e13a      	b.n	8001f04 <__aeabi_dsub+0x540>
 8001c8e:	43f3      	mvns	r3, r6
 8001c90:	2b38      	cmp	r3, #56	; 0x38
 8001c92:	dd00      	ble.n	8001c96 <__aeabi_dsub+0x2d2>
 8001c94:	e16f      	b.n	8001f76 <__aeabi_dsub+0x5b2>
 8001c96:	2b1f      	cmp	r3, #31
 8001c98:	dd00      	ble.n	8001c9c <__aeabi_dsub+0x2d8>
 8001c9a:	e18c      	b.n	8001fb6 <__aeabi_dsub+0x5f2>
 8001c9c:	2520      	movs	r5, #32
 8001c9e:	000e      	movs	r6, r1
 8001ca0:	1aed      	subs	r5, r5, r3
 8001ca2:	40ae      	lsls	r6, r5
 8001ca4:	46b0      	mov	r8, r6
 8001ca6:	0006      	movs	r6, r0
 8001ca8:	46aa      	mov	sl, r5
 8001caa:	40de      	lsrs	r6, r3
 8001cac:	4645      	mov	r5, r8
 8001cae:	4335      	orrs	r5, r6
 8001cb0:	002e      	movs	r6, r5
 8001cb2:	4655      	mov	r5, sl
 8001cb4:	40d9      	lsrs	r1, r3
 8001cb6:	40a8      	lsls	r0, r5
 8001cb8:	4663      	mov	r3, ip
 8001cba:	1e45      	subs	r5, r0, #1
 8001cbc:	41a8      	sbcs	r0, r5
 8001cbe:	1a5b      	subs	r3, r3, r1
 8001cc0:	469c      	mov	ip, r3
 8001cc2:	4330      	orrs	r0, r6
 8001cc4:	1a16      	subs	r6, r2, r0
 8001cc6:	42b2      	cmp	r2, r6
 8001cc8:	4192      	sbcs	r2, r2
 8001cca:	4663      	mov	r3, ip
 8001ccc:	4252      	negs	r2, r2
 8001cce:	1a99      	subs	r1, r3, r2
 8001cd0:	003d      	movs	r5, r7
 8001cd2:	e6b4      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4032      	ands	r2, r6
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d000      	beq.n	8001cde <__aeabi_dsub+0x31a>
 8001cdc:	e6e4      	b.n	8001aa8 <__aeabi_dsub+0xe4>
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__aeabi_dsub+0x348>)
 8001ce0:	08f6      	lsrs	r6, r6, #3
 8001ce2:	074f      	lsls	r7, r1, #29
 8001ce4:	4337      	orrs	r7, r6
 8001ce6:	08ca      	lsrs	r2, r1, #3
 8001ce8:	429d      	cmp	r5, r3
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x32a>
 8001cec:	e790      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001cee:	003b      	movs	r3, r7
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x332>
 8001cf4:	e1a6      	b.n	8002044 <__aeabi_dsub+0x680>
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	0312      	lsls	r2, r2, #12
 8001cfe:	0b12      	lsrs	r2, r2, #12
 8001d00:	4d02      	ldr	r5, [pc, #8]	; (8001d0c <__aeabi_dsub+0x348>)
 8001d02:	e789      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001d04:	0015      	movs	r5, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	2700      	movs	r7, #0
 8001d0a:	e785      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	ff7fffff 	.word	0xff7fffff
 8001d14:	800fffff 	.word	0x800fffff
 8001d18:	2e00      	cmp	r6, #0
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x35a>
 8001d1c:	e0c7      	b.n	8001eae <__aeabi_dsub+0x4ea>
 8001d1e:	1c6b      	adds	r3, r5, #1
 8001d20:	055e      	lsls	r6, r3, #21
 8001d22:	0d76      	lsrs	r6, r6, #21
 8001d24:	2e01      	cmp	r6, #1
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x366>
 8001d28:	e0f0      	b.n	8001f0c <__aeabi_dsub+0x548>
 8001d2a:	4dc8      	ldr	r5, [pc, #800]	; (800204c <__aeabi_dsub+0x688>)
 8001d2c:	42ab      	cmp	r3, r5
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x36e>
 8001d30:	e0b9      	b.n	8001ea6 <__aeabi_dsub+0x4e2>
 8001d32:	1885      	adds	r5, r0, r2
 8001d34:	000a      	movs	r2, r1
 8001d36:	4285      	cmp	r5, r0
 8001d38:	4189      	sbcs	r1, r1
 8001d3a:	4462      	add	r2, ip
 8001d3c:	4249      	negs	r1, r1
 8001d3e:	1851      	adds	r1, r2, r1
 8001d40:	2207      	movs	r2, #7
 8001d42:	07ce      	lsls	r6, r1, #31
 8001d44:	086d      	lsrs	r5, r5, #1
 8001d46:	432e      	orrs	r6, r5
 8001d48:	0849      	lsrs	r1, r1, #1
 8001d4a:	4032      	ands	r2, r6
 8001d4c:	001d      	movs	r5, r3
 8001d4e:	e6a9      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001d50:	49bf      	ldr	r1, [pc, #764]	; (8002050 <__aeabi_dsub+0x68c>)
 8001d52:	1aed      	subs	r5, r5, r3
 8001d54:	4011      	ands	r1, r2
 8001d56:	2207      	movs	r2, #7
 8001d58:	4032      	ands	r2, r6
 8001d5a:	e6a3      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001d5c:	0032      	movs	r2, r6
 8001d5e:	3828      	subs	r0, #40	; 0x28
 8001d60:	4082      	lsls	r2, r0
 8001d62:	2600      	movs	r6, #0
 8001d64:	e686      	b.n	8001a74 <__aeabi_dsub+0xb0>
 8001d66:	0030      	movs	r0, r6
 8001d68:	f000 fa32 	bl	80021d0 <__clzsi2>
 8001d6c:	3020      	adds	r0, #32
 8001d6e:	e673      	b.n	8001a58 <__aeabi_dsub+0x94>
 8001d70:	4663      	mov	r3, ip
 8001d72:	4313      	orrs	r3, r2
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	4193      	sbcs	r3, r2
 8001d78:	1ac6      	subs	r6, r0, r3
 8001d7a:	42b0      	cmp	r0, r6
 8001d7c:	4180      	sbcs	r0, r0
 8001d7e:	4240      	negs	r0, r0
 8001d80:	1a09      	subs	r1, r1, r0
 8001d82:	e65c      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001d84:	000e      	movs	r6, r1
 8001d86:	4667      	mov	r7, ip
 8001d88:	4306      	orrs	r6, r0
 8001d8a:	4317      	orrs	r7, r2
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d15e      	bne.n	8001e4e <__aeabi_dsub+0x48a>
 8001d90:	2e00      	cmp	r6, #0
 8001d92:	d000      	beq.n	8001d96 <__aeabi_dsub+0x3d2>
 8001d94:	e0f3      	b.n	8001f7e <__aeabi_dsub+0x5ba>
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x3d8>
 8001d9a:	e11e      	b.n	8001fda <__aeabi_dsub+0x616>
 8001d9c:	465c      	mov	r4, fp
 8001d9e:	4661      	mov	r1, ip
 8001da0:	4691      	mov	r9, r2
 8001da2:	e72c      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001da4:	4fa9      	ldr	r7, [pc, #676]	; (800204c <__aeabi_dsub+0x688>)
 8001da6:	42be      	cmp	r6, r7
 8001da8:	d07b      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001daa:	001e      	movs	r6, r3
 8001dac:	e6f1      	b.n	8001b92 <__aeabi_dsub+0x1ce>
 8001dae:	0010      	movs	r0, r2
 8001db0:	3d1f      	subs	r5, #31
 8001db2:	40e8      	lsrs	r0, r5
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d003      	beq.n	8001dc0 <__aeabi_dsub+0x3fc>
 8001db8:	2140      	movs	r1, #64	; 0x40
 8001dba:	1acb      	subs	r3, r1, r3
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	4316      	orrs	r6, r2
 8001dc0:	1e73      	subs	r3, r6, #1
 8001dc2:	419e      	sbcs	r6, r3
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4306      	orrs	r6, r0
 8001dc8:	4032      	ands	r2, r6
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2500      	movs	r5, #0
 8001dce:	e783      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8001dd0:	1a16      	subs	r6, r2, r0
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	42b2      	cmp	r2, r6
 8001dd6:	4180      	sbcs	r0, r0
 8001dd8:	1a59      	subs	r1, r3, r1
 8001dda:	4240      	negs	r0, r0
 8001ddc:	1a0b      	subs	r3, r1, r0
 8001dde:	4698      	mov	r8, r3
 8001de0:	465c      	mov	r4, fp
 8001de2:	e632      	b.n	8001a4a <__aeabi_dsub+0x86>
 8001de4:	2e1f      	cmp	r6, #31
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x426>
 8001de8:	e0ab      	b.n	8001f42 <__aeabi_dsub+0x57e>
 8001dea:	2720      	movs	r7, #32
 8001dec:	1bbb      	subs	r3, r7, r6
 8001dee:	469a      	mov	sl, r3
 8001df0:	4663      	mov	r3, ip
 8001df2:	4657      	mov	r7, sl
 8001df4:	40bb      	lsls	r3, r7
 8001df6:	4699      	mov	r9, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	464f      	mov	r7, r9
 8001dfc:	40f3      	lsrs	r3, r6
 8001dfe:	431f      	orrs	r7, r3
 8001e00:	003b      	movs	r3, r7
 8001e02:	4657      	mov	r7, sl
 8001e04:	40ba      	lsls	r2, r7
 8001e06:	1e57      	subs	r7, r2, #1
 8001e08:	41ba      	sbcs	r2, r7
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	4662      	mov	r2, ip
 8001e0e:	40f2      	lsrs	r2, r6
 8001e10:	1889      	adds	r1, r1, r2
 8001e12:	e698      	b.n	8001b46 <__aeabi_dsub+0x182>
 8001e14:	2720      	movs	r7, #32
 8001e16:	1bbb      	subs	r3, r7, r6
 8001e18:	469a      	mov	sl, r3
 8001e1a:	4663      	mov	r3, ip
 8001e1c:	4657      	mov	r7, sl
 8001e1e:	40bb      	lsls	r3, r7
 8001e20:	4699      	mov	r9, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	464f      	mov	r7, r9
 8001e26:	40f3      	lsrs	r3, r6
 8001e28:	431f      	orrs	r7, r3
 8001e2a:	003b      	movs	r3, r7
 8001e2c:	4657      	mov	r7, sl
 8001e2e:	40ba      	lsls	r2, r7
 8001e30:	1e57      	subs	r7, r2, #1
 8001e32:	41ba      	sbcs	r2, r7
 8001e34:	4313      	orrs	r3, r2
 8001e36:	4662      	mov	r2, ip
 8001e38:	40f2      	lsrs	r2, r6
 8001e3a:	1a89      	subs	r1, r1, r2
 8001e3c:	e79c      	b.n	8001d78 <__aeabi_dsub+0x3b4>
 8001e3e:	4b83      	ldr	r3, [pc, #524]	; (800204c <__aeabi_dsub+0x688>)
 8001e40:	429f      	cmp	r7, r3
 8001e42:	d05f      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001e44:	2580      	movs	r5, #128	; 0x80
 8001e46:	042d      	lsls	r5, r5, #16
 8001e48:	4273      	negs	r3, r6
 8001e4a:	4329      	orrs	r1, r5
 8001e4c:	e720      	b.n	8001c90 <__aeabi_dsub+0x2cc>
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	d10c      	bne.n	8001e6c <__aeabi_dsub+0x4a8>
 8001e52:	2f00      	cmp	r7, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x494>
 8001e56:	e0d0      	b.n	8001ffa <__aeabi_dsub+0x636>
 8001e58:	465c      	mov	r4, fp
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	4691      	mov	r9, r2
 8001e5e:	4d7b      	ldr	r5, [pc, #492]	; (800204c <__aeabi_dsub+0x688>)
 8001e60:	e6cd      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001e62:	4f7a      	ldr	r7, [pc, #488]	; (800204c <__aeabi_dsub+0x688>)
 8001e64:	42be      	cmp	r6, r7
 8001e66:	d01c      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001e68:	001e      	movs	r6, r3
 8001e6a:	e665      	b.n	8001b38 <__aeabi_dsub+0x174>
 8001e6c:	2f00      	cmp	r7, #0
 8001e6e:	d018      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001e70:	08c0      	lsrs	r0, r0, #3
 8001e72:	074e      	lsls	r6, r1, #29
 8001e74:	4306      	orrs	r6, r0
 8001e76:	2080      	movs	r0, #128	; 0x80
 8001e78:	08c9      	lsrs	r1, r1, #3
 8001e7a:	0300      	lsls	r0, r0, #12
 8001e7c:	4201      	tst	r1, r0
 8001e7e:	d008      	beq.n	8001e92 <__aeabi_dsub+0x4ce>
 8001e80:	4663      	mov	r3, ip
 8001e82:	08dc      	lsrs	r4, r3, #3
 8001e84:	4204      	tst	r4, r0
 8001e86:	d104      	bne.n	8001e92 <__aeabi_dsub+0x4ce>
 8001e88:	0021      	movs	r1, r4
 8001e8a:	46da      	mov	sl, fp
 8001e8c:	08d2      	lsrs	r2, r2, #3
 8001e8e:	075e      	lsls	r6, r3, #29
 8001e90:	4316      	orrs	r6, r2
 8001e92:	00f3      	lsls	r3, r6, #3
 8001e94:	4699      	mov	r9, r3
 8001e96:	2401      	movs	r4, #1
 8001e98:	4653      	mov	r3, sl
 8001e9a:	00c9      	lsls	r1, r1, #3
 8001e9c:	0f72      	lsrs	r2, r6, #29
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	401c      	ands	r4, r3
 8001ea2:	4d6a      	ldr	r5, [pc, #424]	; (800204c <__aeabi_dsub+0x688>)
 8001ea4:	e6ab      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001ea6:	001d      	movs	r5, r3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2700      	movs	r7, #0
 8001eac:	e6b4      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	d159      	bne.n	8001f66 <__aeabi_dsub+0x5a2>
 8001eb2:	000b      	movs	r3, r1
 8001eb4:	4303      	orrs	r3, r0
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x4f6>
 8001eb8:	e6d6      	b.n	8001c68 <__aeabi_dsub+0x2a4>
 8001eba:	1c73      	adds	r3, r6, #1
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x4fc>
 8001ebe:	e0b2      	b.n	8002026 <__aeabi_dsub+0x662>
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <__aeabi_dsub+0x688>)
 8001ec2:	429f      	cmp	r7, r3
 8001ec4:	d01e      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001ec6:	43f3      	mvns	r3, r6
 8001ec8:	2b38      	cmp	r3, #56	; 0x38
 8001eca:	dc6f      	bgt.n	8001fac <__aeabi_dsub+0x5e8>
 8001ecc:	2b1f      	cmp	r3, #31
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x50e>
 8001ed0:	e097      	b.n	8002002 <__aeabi_dsub+0x63e>
 8001ed2:	2520      	movs	r5, #32
 8001ed4:	000e      	movs	r6, r1
 8001ed6:	1aed      	subs	r5, r5, r3
 8001ed8:	40ae      	lsls	r6, r5
 8001eda:	46b0      	mov	r8, r6
 8001edc:	0006      	movs	r6, r0
 8001ede:	46aa      	mov	sl, r5
 8001ee0:	40de      	lsrs	r6, r3
 8001ee2:	4645      	mov	r5, r8
 8001ee4:	4335      	orrs	r5, r6
 8001ee6:	002e      	movs	r6, r5
 8001ee8:	4655      	mov	r5, sl
 8001eea:	40a8      	lsls	r0, r5
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	1e45      	subs	r5, r0, #1
 8001ef0:	41a8      	sbcs	r0, r5
 8001ef2:	448c      	add	ip, r1
 8001ef4:	4306      	orrs	r6, r0
 8001ef6:	18b6      	adds	r6, r6, r2
 8001ef8:	4296      	cmp	r6, r2
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4251      	negs	r1, r2
 8001efe:	4461      	add	r1, ip
 8001f00:	003d      	movs	r5, r7
 8001f02:	e625      	b.n	8001b50 <__aeabi_dsub+0x18c>
 8001f04:	003d      	movs	r5, r7
 8001f06:	4661      	mov	r1, ip
 8001f08:	4691      	mov	r9, r2
 8001f0a:	e678      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f0c:	000b      	movs	r3, r1
 8001f0e:	4303      	orrs	r3, r0
 8001f10:	2d00      	cmp	r5, #0
 8001f12:	d000      	beq.n	8001f16 <__aeabi_dsub+0x552>
 8001f14:	e655      	b.n	8001bc2 <__aeabi_dsub+0x1fe>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f5      	beq.n	8001f06 <__aeabi_dsub+0x542>
 8001f1a:	4663      	mov	r3, ip
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x55e>
 8001f20:	e66d      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f22:	1886      	adds	r6, r0, r2
 8001f24:	4286      	cmp	r6, r0
 8001f26:	4180      	sbcs	r0, r0
 8001f28:	4461      	add	r1, ip
 8001f2a:	4240      	negs	r0, r0
 8001f2c:	1809      	adds	r1, r1, r0
 8001f2e:	2200      	movs	r2, #0
 8001f30:	020b      	lsls	r3, r1, #8
 8001f32:	d400      	bmi.n	8001f36 <__aeabi_dsub+0x572>
 8001f34:	e6d0      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <__aeabi_dsub+0x68c>)
 8001f38:	3501      	adds	r5, #1
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	e5b2      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001f3e:	46b1      	mov	r9, r6
 8001f40:	e65d      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f42:	0033      	movs	r3, r6
 8001f44:	4667      	mov	r7, ip
 8001f46:	3b20      	subs	r3, #32
 8001f48:	40df      	lsrs	r7, r3
 8001f4a:	003b      	movs	r3, r7
 8001f4c:	2e20      	cmp	r6, #32
 8001f4e:	d005      	beq.n	8001f5c <__aeabi_dsub+0x598>
 8001f50:	2740      	movs	r7, #64	; 0x40
 8001f52:	1bbf      	subs	r7, r7, r6
 8001f54:	4666      	mov	r6, ip
 8001f56:	40be      	lsls	r6, r7
 8001f58:	4332      	orrs	r2, r6
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4646      	mov	r6, r8
 8001f5e:	1e72      	subs	r2, r6, #1
 8001f60:	4196      	sbcs	r6, r2
 8001f62:	4333      	orrs	r3, r6
 8001f64:	e5ef      	b.n	8001b46 <__aeabi_dsub+0x182>
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <__aeabi_dsub+0x688>)
 8001f68:	429f      	cmp	r7, r3
 8001f6a:	d0cb      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001f6c:	2580      	movs	r5, #128	; 0x80
 8001f6e:	042d      	lsls	r5, r5, #16
 8001f70:	4273      	negs	r3, r6
 8001f72:	4329      	orrs	r1, r5
 8001f74:	e7a8      	b.n	8001ec8 <__aeabi_dsub+0x504>
 8001f76:	4308      	orrs	r0, r1
 8001f78:	1e41      	subs	r1, r0, #1
 8001f7a:	4188      	sbcs	r0, r1
 8001f7c:	e6a2      	b.n	8001cc4 <__aeabi_dsub+0x300>
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x5c0>
 8001f82:	e63c      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f84:	4663      	mov	r3, ip
 8001f86:	1a86      	subs	r6, r0, r2
 8001f88:	1acf      	subs	r7, r1, r3
 8001f8a:	42b0      	cmp	r0, r6
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	425b      	negs	r3, r3
 8001f90:	1afb      	subs	r3, r7, r3
 8001f92:	4698      	mov	r8, r3
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	d54e      	bpl.n	8002036 <__aeabi_dsub+0x672>
 8001f98:	1a16      	subs	r6, r2, r0
 8001f9a:	4663      	mov	r3, ip
 8001f9c:	42b2      	cmp	r2, r6
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	1a59      	subs	r1, r3, r1
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	1a89      	subs	r1, r1, r2
 8001fa6:	465c      	mov	r4, fp
 8001fa8:	2200      	movs	r2, #0
 8001faa:	e57b      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001fac:	4301      	orrs	r1, r0
 8001fae:	000e      	movs	r6, r1
 8001fb0:	1e71      	subs	r1, r6, #1
 8001fb2:	418e      	sbcs	r6, r1
 8001fb4:	e79f      	b.n	8001ef6 <__aeabi_dsub+0x532>
 8001fb6:	001d      	movs	r5, r3
 8001fb8:	000e      	movs	r6, r1
 8001fba:	3d20      	subs	r5, #32
 8001fbc:	40ee      	lsrs	r6, r5
 8001fbe:	46b0      	mov	r8, r6
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d004      	beq.n	8001fce <__aeabi_dsub+0x60a>
 8001fc4:	2540      	movs	r5, #64	; 0x40
 8001fc6:	1aeb      	subs	r3, r5, r3
 8001fc8:	4099      	lsls	r1, r3
 8001fca:	4308      	orrs	r0, r1
 8001fcc:	4681      	mov	r9, r0
 8001fce:	4648      	mov	r0, r9
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	1e41      	subs	r1, r0, #1
 8001fd4:	4188      	sbcs	r0, r1
 8001fd6:	4318      	orrs	r0, r3
 8001fd8:	e674      	b.n	8001cc4 <__aeabi_dsub+0x300>
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2400      	movs	r4, #0
 8001fde:	e617      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001fe0:	1a16      	subs	r6, r2, r0
 8001fe2:	4663      	mov	r3, ip
 8001fe4:	42b2      	cmp	r2, r6
 8001fe6:	4192      	sbcs	r2, r2
 8001fe8:	1a59      	subs	r1, r3, r1
 8001fea:	4252      	negs	r2, r2
 8001fec:	1a89      	subs	r1, r1, r2
 8001fee:	003d      	movs	r5, r7
 8001ff0:	e525      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001ff2:	4661      	mov	r1, ip
 8001ff4:	4691      	mov	r9, r2
 8001ff6:	4d15      	ldr	r5, [pc, #84]	; (800204c <__aeabi_dsub+0x688>)
 8001ff8:	e601      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	0312      	lsls	r2, r2, #12
 8002000:	e679      	b.n	8001cf6 <__aeabi_dsub+0x332>
 8002002:	001d      	movs	r5, r3
 8002004:	000e      	movs	r6, r1
 8002006:	3d20      	subs	r5, #32
 8002008:	40ee      	lsrs	r6, r5
 800200a:	46b0      	mov	r8, r6
 800200c:	2b20      	cmp	r3, #32
 800200e:	d004      	beq.n	800201a <__aeabi_dsub+0x656>
 8002010:	2540      	movs	r5, #64	; 0x40
 8002012:	1aeb      	subs	r3, r5, r3
 8002014:	4099      	lsls	r1, r3
 8002016:	4308      	orrs	r0, r1
 8002018:	4681      	mov	r9, r0
 800201a:	464e      	mov	r6, r9
 800201c:	4643      	mov	r3, r8
 800201e:	1e71      	subs	r1, r6, #1
 8002020:	418e      	sbcs	r6, r1
 8002022:	431e      	orrs	r6, r3
 8002024:	e767      	b.n	8001ef6 <__aeabi_dsub+0x532>
 8002026:	1886      	adds	r6, r0, r2
 8002028:	4296      	cmp	r6, r2
 800202a:	419b      	sbcs	r3, r3
 800202c:	4461      	add	r1, ip
 800202e:	425b      	negs	r3, r3
 8002030:	18c9      	adds	r1, r1, r3
 8002032:	003d      	movs	r5, r7
 8002034:	e58c      	b.n	8001b50 <__aeabi_dsub+0x18c>
 8002036:	4647      	mov	r7, r8
 8002038:	4337      	orrs	r7, r6
 800203a:	d0ce      	beq.n	8001fda <__aeabi_dsub+0x616>
 800203c:	2207      	movs	r2, #7
 800203e:	4641      	mov	r1, r8
 8002040:	4032      	ands	r2, r6
 8002042:	e649      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8002044:	2700      	movs	r7, #0
 8002046:	003a      	movs	r2, r7
 8002048:	e5e6      	b.n	8001c18 <__aeabi_dsub+0x254>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff
 8002050:	ff7fffff 	.word	0xff7fffff

08002054 <__aeabi_dcmpun>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	4e0c      	ldr	r6, [pc, #48]	; (8002088 <__aeabi_dcmpun+0x34>)
 8002058:	030d      	lsls	r5, r1, #12
 800205a:	031c      	lsls	r4, r3, #12
 800205c:	0049      	lsls	r1, r1, #1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	0b2d      	lsrs	r5, r5, #12
 8002062:	0d49      	lsrs	r1, r1, #21
 8002064:	0b24      	lsrs	r4, r4, #12
 8002066:	0d5b      	lsrs	r3, r3, #21
 8002068:	42b1      	cmp	r1, r6
 800206a:	d008      	beq.n	800207e <__aeabi_dcmpun+0x2a>
 800206c:	4906      	ldr	r1, [pc, #24]	; (8002088 <__aeabi_dcmpun+0x34>)
 800206e:	2000      	movs	r0, #0
 8002070:	428b      	cmp	r3, r1
 8002072:	d103      	bne.n	800207c <__aeabi_dcmpun+0x28>
 8002074:	4314      	orrs	r4, r2
 8002076:	0020      	movs	r0, r4
 8002078:	1e44      	subs	r4, r0, #1
 800207a:	41a0      	sbcs	r0, r4
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	4305      	orrs	r5, r0
 8002080:	2001      	movs	r0, #1
 8002082:	2d00      	cmp	r5, #0
 8002084:	d1fa      	bne.n	800207c <__aeabi_dcmpun+0x28>
 8002086:	e7f1      	b.n	800206c <__aeabi_dcmpun+0x18>
 8002088:	000007ff 	.word	0x000007ff

0800208c <__aeabi_d2iz>:
 800208c:	b530      	push	{r4, r5, lr}
 800208e:	4d14      	ldr	r5, [pc, #80]	; (80020e0 <__aeabi_d2iz+0x54>)
 8002090:	030a      	lsls	r2, r1, #12
 8002092:	004b      	lsls	r3, r1, #1
 8002094:	0b12      	lsrs	r2, r2, #12
 8002096:	0d5b      	lsrs	r3, r3, #21
 8002098:	0fc9      	lsrs	r1, r1, #31
 800209a:	2400      	movs	r4, #0
 800209c:	42ab      	cmp	r3, r5
 800209e:	dd11      	ble.n	80020c4 <__aeabi_d2iz+0x38>
 80020a0:	4c10      	ldr	r4, [pc, #64]	; (80020e4 <__aeabi_d2iz+0x58>)
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	dc10      	bgt.n	80020c8 <__aeabi_d2iz+0x3c>
 80020a6:	2480      	movs	r4, #128	; 0x80
 80020a8:	0364      	lsls	r4, r4, #13
 80020aa:	4322      	orrs	r2, r4
 80020ac:	4c0e      	ldr	r4, [pc, #56]	; (80020e8 <__aeabi_d2iz+0x5c>)
 80020ae:	1ae4      	subs	r4, r4, r3
 80020b0:	2c1f      	cmp	r4, #31
 80020b2:	dd0c      	ble.n	80020ce <__aeabi_d2iz+0x42>
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <__aeabi_d2iz+0x60>)
 80020b6:	1ac3      	subs	r3, r0, r3
 80020b8:	40da      	lsrs	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	425c      	negs	r4, r3
 80020be:	2900      	cmp	r1, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_d2iz+0x38>
 80020c2:	001c      	movs	r4, r3
 80020c4:	0020      	movs	r0, r4
 80020c6:	bd30      	pop	{r4, r5, pc}
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <__aeabi_d2iz+0x64>)
 80020ca:	18cc      	adds	r4, r1, r3
 80020cc:	e7fa      	b.n	80020c4 <__aeabi_d2iz+0x38>
 80020ce:	4d09      	ldr	r5, [pc, #36]	; (80020f4 <__aeabi_d2iz+0x68>)
 80020d0:	40e0      	lsrs	r0, r4
 80020d2:	46ac      	mov	ip, r5
 80020d4:	4463      	add	r3, ip
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	4303      	orrs	r3, r0
 80020dc:	e7ee      	b.n	80020bc <__aeabi_d2iz+0x30>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	000003fe 	.word	0x000003fe
 80020e4:	0000041d 	.word	0x0000041d
 80020e8:	00000433 	.word	0x00000433
 80020ec:	00000413 	.word	0x00000413
 80020f0:	7fffffff 	.word	0x7fffffff
 80020f4:	fffffbed 	.word	0xfffffbed

080020f8 <__aeabi_i2d>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	2800      	cmp	r0, #0
 80020fc:	d02d      	beq.n	800215a <__aeabi_i2d+0x62>
 80020fe:	17c3      	asrs	r3, r0, #31
 8002100:	18c5      	adds	r5, r0, r3
 8002102:	405d      	eors	r5, r3
 8002104:	0fc4      	lsrs	r4, r0, #31
 8002106:	0028      	movs	r0, r5
 8002108:	f000 f862 	bl	80021d0 <__clzsi2>
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <__aeabi_i2d+0x6c>)
 800210e:	1a1b      	subs	r3, r3, r0
 8002110:	055b      	lsls	r3, r3, #21
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	280a      	cmp	r0, #10
 8002116:	dd15      	ble.n	8002144 <__aeabi_i2d+0x4c>
 8002118:	380b      	subs	r0, #11
 800211a:	4085      	lsls	r5, r0
 800211c:	2200      	movs	r2, #0
 800211e:	032d      	lsls	r5, r5, #12
 8002120:	0b2d      	lsrs	r5, r5, #12
 8002122:	2100      	movs	r1, #0
 8002124:	0010      	movs	r0, r2
 8002126:	032d      	lsls	r5, r5, #12
 8002128:	0d0a      	lsrs	r2, r1, #20
 800212a:	0b2d      	lsrs	r5, r5, #12
 800212c:	0512      	lsls	r2, r2, #20
 800212e:	432a      	orrs	r2, r5
 8002130:	4d0d      	ldr	r5, [pc, #52]	; (8002168 <__aeabi_i2d+0x70>)
 8002132:	051b      	lsls	r3, r3, #20
 8002134:	402a      	ands	r2, r5
 8002136:	4313      	orrs	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	07e4      	lsls	r4, r4, #31
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	4323      	orrs	r3, r4
 8002140:	0019      	movs	r1, r3
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	0002      	movs	r2, r0
 8002146:	0029      	movs	r1, r5
 8002148:	3215      	adds	r2, #21
 800214a:	4091      	lsls	r1, r2
 800214c:	000a      	movs	r2, r1
 800214e:	210b      	movs	r1, #11
 8002150:	1a08      	subs	r0, r1, r0
 8002152:	40c5      	lsrs	r5, r0
 8002154:	032d      	lsls	r5, r5, #12
 8002156:	0b2d      	lsrs	r5, r5, #12
 8002158:	e7e3      	b.n	8002122 <__aeabi_i2d+0x2a>
 800215a:	2400      	movs	r4, #0
 800215c:	2300      	movs	r3, #0
 800215e:	2500      	movs	r5, #0
 8002160:	2200      	movs	r2, #0
 8002162:	e7de      	b.n	8002122 <__aeabi_i2d+0x2a>
 8002164:	0000041e 	.word	0x0000041e
 8002168:	800fffff 	.word	0x800fffff

0800216c <__aeabi_ui2d>:
 800216c:	b510      	push	{r4, lr}
 800216e:	1e04      	subs	r4, r0, #0
 8002170:	d025      	beq.n	80021be <__aeabi_ui2d+0x52>
 8002172:	f000 f82d 	bl	80021d0 <__clzsi2>
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <__aeabi_ui2d+0x5c>)
 8002178:	1a1b      	subs	r3, r3, r0
 800217a:	055b      	lsls	r3, r3, #21
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	280a      	cmp	r0, #10
 8002180:	dd12      	ble.n	80021a8 <__aeabi_ui2d+0x3c>
 8002182:	380b      	subs	r0, #11
 8002184:	4084      	lsls	r4, r0
 8002186:	2200      	movs	r2, #0
 8002188:	0324      	lsls	r4, r4, #12
 800218a:	0b24      	lsrs	r4, r4, #12
 800218c:	2100      	movs	r1, #0
 800218e:	0010      	movs	r0, r2
 8002190:	0324      	lsls	r4, r4, #12
 8002192:	0d0a      	lsrs	r2, r1, #20
 8002194:	0b24      	lsrs	r4, r4, #12
 8002196:	0512      	lsls	r2, r2, #20
 8002198:	4322      	orrs	r2, r4
 800219a:	4c0c      	ldr	r4, [pc, #48]	; (80021cc <__aeabi_ui2d+0x60>)
 800219c:	051b      	lsls	r3, r3, #20
 800219e:	4022      	ands	r2, r4
 80021a0:	4313      	orrs	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	0859      	lsrs	r1, r3, #1
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	0002      	movs	r2, r0
 80021aa:	0021      	movs	r1, r4
 80021ac:	3215      	adds	r2, #21
 80021ae:	4091      	lsls	r1, r2
 80021b0:	000a      	movs	r2, r1
 80021b2:	210b      	movs	r1, #11
 80021b4:	1a08      	subs	r0, r1, r0
 80021b6:	40c4      	lsrs	r4, r0
 80021b8:	0324      	lsls	r4, r4, #12
 80021ba:	0b24      	lsrs	r4, r4, #12
 80021bc:	e7e6      	b.n	800218c <__aeabi_ui2d+0x20>
 80021be:	2300      	movs	r3, #0
 80021c0:	2400      	movs	r4, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	e7e2      	b.n	800218c <__aeabi_ui2d+0x20>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	0000041e 	.word	0x0000041e
 80021cc:	800fffff 	.word	0x800fffff

080021d0 <__clzsi2>:
 80021d0:	211c      	movs	r1, #28
 80021d2:	2301      	movs	r3, #1
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	4298      	cmp	r0, r3
 80021d8:	d301      	bcc.n	80021de <__clzsi2+0xe>
 80021da:	0c00      	lsrs	r0, r0, #16
 80021dc:	3910      	subs	r1, #16
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	4298      	cmp	r0, r3
 80021e2:	d301      	bcc.n	80021e8 <__clzsi2+0x18>
 80021e4:	0a00      	lsrs	r0, r0, #8
 80021e6:	3908      	subs	r1, #8
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	4298      	cmp	r0, r3
 80021ec:	d301      	bcc.n	80021f2 <__clzsi2+0x22>
 80021ee:	0900      	lsrs	r0, r0, #4
 80021f0:	3904      	subs	r1, #4
 80021f2:	a202      	add	r2, pc, #8	; (adr r2, 80021fc <__clzsi2+0x2c>)
 80021f4:	5c10      	ldrb	r0, [r2, r0]
 80021f6:	1840      	adds	r0, r0, r1
 80021f8:	4770      	bx	lr
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	02020304 	.word	0x02020304
 8002200:	01010101 	.word	0x01010101
	...

0800220c <__clzdi2>:
 800220c:	b510      	push	{r4, lr}
 800220e:	2900      	cmp	r1, #0
 8002210:	d103      	bne.n	800221a <__clzdi2+0xe>
 8002212:	f7ff ffdd 	bl	80021d0 <__clzsi2>
 8002216:	3020      	adds	r0, #32
 8002218:	e002      	b.n	8002220 <__clzdi2+0x14>
 800221a:	1c08      	adds	r0, r1, #0
 800221c:	f7ff ffd8 	bl	80021d0 <__clzsi2>
 8002220:	bd10      	pop	{r4, pc}
 8002222:	46c0      	nop			; (mov r8, r8)

08002224 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_Init+0x3c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_Init+0x3c>)
 8002236:	2140      	movs	r1, #64	; 0x40
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800223c:	2000      	movs	r0, #0
 800223e:	f000 f811 	bl	8002264 <HAL_InitTick>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d003      	beq.n	800224e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e001      	b.n	8002252 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800224e:	f004 fb13 	bl	8006878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b002      	add	sp, #8
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800226c:	230f      	movs	r3, #15
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_InitTick+0x50>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	23fa      	movs	r3, #250	; 0xfa
 800227a:	0099      	lsls	r1, r3, #2
 800227c:	0010      	movs	r0, r2
 800227e:	f7fd ff55 	bl	800012c <__udivsi3>
 8002282:	0003      	movs	r3, r0
 8002284:	0018      	movs	r0, r3
 8002286:	f000 fb0a 	bl	800289e <HAL_SYSTICK_Config>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d004      	beq.n	8002298 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800228e:	230f      	movs	r3, #15
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e006      	b.n	80022a6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	2301      	movs	r3, #1
 800229c:	425b      	negs	r3, r3
 800229e:	2200      	movs	r2, #0
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fae7 	bl	8002874 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80022a6:	230f      	movs	r3, #15
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  uwTick++;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_IncTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	4b02      	ldr	r3, [pc, #8]	; (80022cc <HAL_IncTick+0x14>)
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000270 	.word	0x20000270

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <HAL_GetTick+0x10>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	20000270 	.word	0x20000270

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_Delay+0x20>
  {
    wait++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	f7ff ffe3 	bl	80022d0 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	429a      	cmp	r2, r3
 8002314:	d8f7      	bhi.n	8002306 <HAL_Delay+0x22>
  {
  }
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e159      	b.n	80025e6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2250      	movs	r2, #80	; 0x50
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f004 f8d0 	bl	80064f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	2210      	movs	r2, #16
 8002356:	4013      	ands	r3, r2
 8002358:	2b10      	cmp	r3, #16
 800235a:	d005      	beq.n	8002368 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2204      	movs	r2, #4
 8002364:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002366:	d00b      	beq.n	8002380 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	2210      	movs	r2, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2250      	movs	r2, #80	; 0x50
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e132      	b.n	80025e6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	4a9a      	ldr	r2, [pc, #616]	; (80025f0 <HAL_ADC_Init+0x2d0>)
 8002386:	4013      	ands	r3, r2
 8002388:	2202      	movs	r2, #2
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2203      	movs	r2, #3
 8002398:	4013      	ands	r3, r2
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_ADC_Init+0x90>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_Init+0x90>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_Init+0x92>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d149      	bne.n	800244a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	23c0      	movs	r3, #192	; 0xc0
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	429a      	cmp	r2, r3
 80023c0:	d00b      	beq.n	80023da <HAL_ADC_Init+0xba>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d005      	beq.n	80023da <HAL_ADC_Init+0xba>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d111      	bne.n	80023fe <HAL_ADC_Init+0xde>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	0892      	lsrs	r2, r2, #2
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6919      	ldr	r1, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	e014      	b.n	8002428 <HAL_ADC_Init+0x108>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	0892      	lsrs	r2, r2, #2
 800240c:	611a      	str	r2, [r3, #16]
 800240e:	4b79      	ldr	r3, [pc, #484]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b78      	ldr	r3, [pc, #480]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 8002414:	4978      	ldr	r1, [pc, #480]	; (80025f8 <HAL_ADC_Init+0x2d8>)
 8002416:	400a      	ands	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	4b74      	ldr	r3, [pc, #464]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2118      	movs	r1, #24
 8002434:	438a      	bics	r2, r1
 8002436:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68d9      	ldr	r1, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800244a:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b69      	ldr	r3, [pc, #420]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 8002450:	496a      	ldr	r1, [pc, #424]	; (80025fc <HAL_ADC_Init+0x2dc>)
 8002452:	400a      	ands	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	065a      	lsls	r2, r3, #25
 8002460:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_ADC_Init+0x2d4>)
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	055b      	lsls	r3, r3, #21
 8002470:	4013      	ands	r3, r2
 8002472:	d108      	bne.n	8002486 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	0549      	lsls	r1, r1, #21
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	495b      	ldr	r1, [pc, #364]	; (8002600 <HAL_ADC_Init+0x2e0>)
 8002492:	400a      	ands	r2, r1
 8002494:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68d9      	ldr	r1, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_Init+0x18c>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e000      	b.n	80024ae <HAL_ADC_Init+0x18e>
 80024ac:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80024ae:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2020      	movs	r0, #32
 80024b4:	5c1b      	ldrb	r3, [r3, r0]
 80024b6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80024b8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	202c      	movs	r0, #44	; 0x2c
 80024be:	5c1b      	ldrb	r3, [r3, r0]
 80024c0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024c2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80024c8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80024d0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80024d8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e6:	23c2      	movs	r3, #194	; 0xc2
 80024e8:	33ff      	adds	r3, #255	; 0xff
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d00b      	beq.n	8002506 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68d9      	ldr	r1, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2221      	movs	r2, #33	; 0x21
 800250a:	5c9b      	ldrb	r3, [r3, r2]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d11a      	bne.n	8002546 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	5c9b      	ldrb	r3, [r3, r2]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0249      	lsls	r1, r1, #9
 8002528:	430a      	orrs	r2, r1
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	e00b      	b.n	8002546 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	2220      	movs	r2, #32
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	2201      	movs	r2, #1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d11f      	bne.n	800258e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	492a      	ldr	r1, [pc, #168]	; (8002604 <HAL_ADC_Init+0x2e4>)
 800255a:	400a      	ands	r2, r1
 800255c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6919      	ldr	r1, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800256c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002572:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	430a      	orrs	r2, r1
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	e00e      	b.n	80025ac <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2101      	movs	r1, #1
 80025a8:	438a      	bics	r2, r1
 80025aa:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2107      	movs	r1, #7
 80025b8:	438a      	bics	r2, r1
 80025ba:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6959      	ldr	r1, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	2203      	movs	r2, #3
 80025da:	4393      	bics	r3, r2
 80025dc:	2201      	movs	r2, #1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b002      	add	sp, #8
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	fffffefd 	.word	0xfffffefd
 80025f4:	40012708 	.word	0x40012708
 80025f8:	ffc3ffff 	.word	0xffc3ffff
 80025fc:	fdffffff 	.word	0xfdffffff
 8002600:	fffe0219 	.word	0xfffe0219
 8002604:	fffffc03 	.word	0xfffffc03

08002608 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2250      	movs	r2, #80	; 0x50
 8002616:	5c9b      	ldrb	r3, [r3, r2]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x18>
 800261c:	2302      	movs	r3, #2
 800261e:	e06c      	b.n	80026fa <HAL_ADC_ConfigChannel+0xf2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2250      	movs	r2, #80	; 0x50
 8002624:	2101      	movs	r1, #1
 8002626:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d00b      	beq.n	800264c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	2220      	movs	r2, #32
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2250      	movs	r2, #80	; 0x50
 8002644:	2100      	movs	r1, #0
 8002646:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e056      	b.n	80026fa <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a2c      	ldr	r2, [pc, #176]	; (8002704 <HAL_ADC_ConfigChannel+0xfc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d028      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	035b      	lsls	r3, r3, #13
 8002662:	0b5a      	lsrs	r2, r3, #13
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	02db      	lsls	r3, r3, #11
 8002674:	4013      	ands	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002678:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0409      	lsls	r1, r1, #16
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002686:	200a      	movs	r0, #10
 8002688:	f000 f844 	bl	8002714 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	029b      	lsls	r3, r3, #10
 8002694:	4013      	ands	r3, r2
 8002696:	d02b      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	03c9      	lsls	r1, r1, #15
 80026a2:	430a      	orrs	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e023      	b.n	80026f0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	035b      	lsls	r3, r3, #13
 80026b4:	0b5b      	lsrs	r3, r3, #13
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	02db      	lsls	r3, r3, #11
 80026c8:	4013      	ands	r3, r2
 80026ca:	d005      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 80026d2:	490e      	ldr	r1, [pc, #56]	; (800270c <HAL_ADC_ConfigChannel+0x104>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	4013      	ands	r3, r2
 80026e2:	d005      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <HAL_ADC_ConfigChannel+0x100>)
 80026ea:	4909      	ldr	r1, [pc, #36]	; (8002710 <HAL_ADC_ConfigChannel+0x108>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2250      	movs	r2, #80	; 0x50
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b002      	add	sp, #8
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	00001001 	.word	0x00001001
 8002708:	40012708 	.word	0x40012708
 800270c:	ff7fffff 	.word	0xff7fffff
 8002710:	ffbfffff 	.word	0xffbfffff

08002714 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <ADC_DelayMicroSecond+0x34>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	490a      	ldr	r1, [pc, #40]	; (800274c <ADC_DelayMicroSecond+0x38>)
 8002722:	0018      	movs	r0, r3
 8002724:	f7fd fd02 	bl	800012c <__udivsi3>
 8002728:	0003      	movs	r3, r0
 800272a:	001a      	movs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4353      	muls	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002732:	e002      	b.n	800273a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3b01      	subs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f9      	bne.n	8002734 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000004 	.word	0x20000004
 800274c:	000f4240 	.word	0x000f4240

08002750 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	0002      	movs	r2, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b7f      	cmp	r3, #127	; 0x7f
 8002764:	d932      	bls.n	80027cc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002766:	4a2f      	ldr	r2, [pc, #188]	; (8002824 <NVIC_SetPriority+0xd4>)
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	0019      	movs	r1, r3
 800276e:	230f      	movs	r3, #15
 8002770:	400b      	ands	r3, r1
 8002772:	3b08      	subs	r3, #8
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3306      	adds	r3, #6
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	18d3      	adds	r3, r2, r3
 800277c:	3304      	adds	r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1dfa      	adds	r2, r7, #7
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	0011      	movs	r1, r2
 8002786:	2203      	movs	r2, #3
 8002788:	400a      	ands	r2, r1
 800278a:	00d2      	lsls	r2, r2, #3
 800278c:	21ff      	movs	r1, #255	; 0xff
 800278e:	4091      	lsls	r1, r2
 8002790:	000a      	movs	r2, r1
 8002792:	43d2      	mvns	r2, r2
 8002794:	401a      	ands	r2, r3
 8002796:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	019b      	lsls	r3, r3, #6
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	401a      	ands	r2, r3
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	2303      	movs	r3, #3
 80027a8:	4003      	ands	r3, r0
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ae:	481d      	ldr	r0, [pc, #116]	; (8002824 <NVIC_SetPriority+0xd4>)
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	001c      	movs	r4, r3
 80027b6:	230f      	movs	r3, #15
 80027b8:	4023      	ands	r3, r4
 80027ba:	3b08      	subs	r3, #8
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	430a      	orrs	r2, r1
 80027c0:	3306      	adds	r3, #6
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	18c3      	adds	r3, r0, r3
 80027c6:	3304      	adds	r3, #4
 80027c8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027ca:	e027      	b.n	800281c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027cc:	4a16      	ldr	r2, [pc, #88]	; (8002828 <NVIC_SetPriority+0xd8>)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	33c0      	adds	r3, #192	; 0xc0
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	589b      	ldr	r3, [r3, r2]
 80027dc:	1dfa      	adds	r2, r7, #7
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	0011      	movs	r1, r2
 80027e2:	2203      	movs	r2, #3
 80027e4:	400a      	ands	r2, r1
 80027e6:	00d2      	lsls	r2, r2, #3
 80027e8:	21ff      	movs	r1, #255	; 0xff
 80027ea:	4091      	lsls	r1, r2
 80027ec:	000a      	movs	r2, r1
 80027ee:	43d2      	mvns	r2, r2
 80027f0:	401a      	ands	r2, r3
 80027f2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	019b      	lsls	r3, r3, #6
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	401a      	ands	r2, r3
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	0018      	movs	r0, r3
 8002802:	2303      	movs	r3, #3
 8002804:	4003      	ands	r3, r0
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <NVIC_SetPriority+0xd8>)
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b25b      	sxtb	r3, r3
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	430a      	orrs	r2, r1
 8002816:	33c0      	adds	r3, #192	; 0xc0
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	501a      	str	r2, [r3, r0]
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b003      	add	sp, #12
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	e000ed00 	.word	0xe000ed00
 8002828:	e000e100 	.word	0xe000e100

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <SysTick_Config+0x40>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e010      	b.n	8002864 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <SysTick_Config+0x44>)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	3a01      	subs	r2, #1
 8002848:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	2301      	movs	r3, #1
 800284c:	425b      	negs	r3, r3
 800284e:	2103      	movs	r1, #3
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff ff7d 	bl	8002750 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <SysTick_Config+0x44>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <SysTick_Config+0x44>)
 800285e:	2207      	movs	r2, #7
 8002860:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}
 800286c:	00ffffff 	.word	0x00ffffff
 8002870:	e000e010 	.word	0xe000e010

08002874 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	210f      	movs	r1, #15
 8002880:	187b      	adds	r3, r7, r1
 8002882:	1c02      	adds	r2, r0, #0
 8002884:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	187b      	adds	r3, r7, r1
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b25b      	sxtb	r3, r3
 800288e:	0011      	movs	r1, r2
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <NVIC_SetPriority>
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b004      	add	sp, #16
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff ffbf 	bl	800282c <SysTick_Config>
 80028ae:	0003      	movs	r3, r0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80028ce:	e155      	b.n	8002b7c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4091      	lsls	r1, r2
 80028da:	000a      	movs	r2, r1
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d100      	bne.n	80028e8 <HAL_GPIO_Init+0x30>
 80028e6:	e146      	b.n	8002b76 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x40>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b12      	cmp	r3, #18
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	58d3      	ldr	r3, [r2, r3]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2207      	movs	r2, #7
 800290a:	4013      	ands	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	409a      	lsls	r2, r3
 8002912:	0013      	movs	r3, r2
 8002914:	43da      	mvns	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2107      	movs	r1, #7
 8002924:	400b      	ands	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	409a      	lsls	r2, r3
 800292a:	0013      	movs	r3, r2
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	6939      	ldr	r1, [r7, #16]
 800293e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d00b      	beq.n	8002960 <HAL_GPIO_Init+0xa8>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002954:	2b11      	cmp	r3, #17
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	409a      	lsls	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	43da      	mvns	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	43da      	mvns	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	2201      	movs	r2, #1
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
 80029b4:	0013      	movs	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	409a      	lsls	r2, r3
 80029d0:	0013      	movs	r3, r2
 80029d2:	43da      	mvns	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2203      	movs	r2, #3
 80029e0:	401a      	ands	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	0013      	movs	r3, r2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	43da      	mvns	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	0013      	movs	r3, r2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	055b      	lsls	r3, r3, #21
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d100      	bne.n	8002a34 <HAL_GPIO_Init+0x17c>
 8002a32:	e0a0      	b.n	8002b76 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a34:	4b57      	ldr	r3, [pc, #348]	; (8002b94 <HAL_GPIO_Init+0x2dc>)
 8002a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a38:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_GPIO_Init+0x2dc>)
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a40:	4a55      	ldr	r2, [pc, #340]	; (8002b98 <HAL_GPIO_Init+0x2e0>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	589b      	ldr	r3, [r3, r2]
 8002a4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2203      	movs	r2, #3
 8002a52:	4013      	ands	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	23a0      	movs	r3, #160	; 0xa0
 8002a68:	05db      	lsls	r3, r3, #23
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d01f      	beq.n	8002aae <HAL_GPIO_Init+0x1f6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <HAL_GPIO_Init+0x2e4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x1f2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <HAL_GPIO_Init+0x2e8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x1ee>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a48      	ldr	r2, [pc, #288]	; (8002ba4 <HAL_GPIO_Init+0x2ec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x1ea>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a47      	ldr	r2, [pc, #284]	; (8002ba8 <HAL_GPIO_Init+0x2f0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x1e6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a46      	ldr	r2, [pc, #280]	; (8002bac <HAL_GPIO_Init+0x2f4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x1e2>
 8002a96:	2305      	movs	r3, #5
 8002a98:	e00a      	b.n	8002ab0 <HAL_GPIO_Init+0x1f8>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e008      	b.n	8002ab0 <HAL_GPIO_Init+0x1f8>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x1f8>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x1f8>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x1f8>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x1f8>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_GPIO_Init+0x2e0>)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	025b      	lsls	r3, r3, #9
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002af2:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43da      	mvns	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	4013      	ands	r3, r2
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	035b      	lsls	r3, r3, #13
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43da      	mvns	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	039b      	lsls	r3, r3, #14
 8002b64:	4013      	ands	r3, r2
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	40da      	lsrs	r2, r3
 8002b84:	1e13      	subs	r3, r2, #0
 8002b86:	d000      	beq.n	8002b8a <HAL_GPIO_Init+0x2d2>
 8002b88:	e6a2      	b.n	80028d0 <HAL_GPIO_Init+0x18>
  }
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b006      	add	sp, #24
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	50000400 	.word	0x50000400
 8002ba0:	50000800 	.word	0x50000800
 8002ba4:	50000c00 	.word	0x50000c00
 8002ba8:	50001000 	.word	0x50001000
 8002bac:	50001c00 	.word	0x50001c00
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	000a      	movs	r2, r1
 8002bbe:	1cbb      	adds	r3, r7, #2
 8002bc0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	1cba      	adds	r2, r7, #2
 8002bc8:	8812      	ldrh	r2, [r2, #0]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e003      	b.n	8002be0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bd8:	230f      	movs	r3, #15
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002be0:	230f      	movs	r3, #15
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	781b      	ldrb	r3, [r3, #0]
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b004      	add	sp, #16
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	0008      	movs	r0, r1
 8002bf8:	0011      	movs	r1, r2
 8002bfa:	1cbb      	adds	r3, r7, #2
 8002bfc:	1c02      	adds	r2, r0, #0
 8002bfe:	801a      	strh	r2, [r3, #0]
 8002c00:	1c7b      	adds	r3, r7, #1
 8002c02:	1c0a      	adds	r2, r1, #0
 8002c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002c06:	1c7b      	adds	r3, r7, #1
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0e:	1cbb      	adds	r3, r7, #2
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c16:	e003      	b.n	8002c20 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c18:	1cbb      	adds	r3, r7, #2
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	000a      	movs	r2, r1
 8002c32:	1cbb      	adds	r3, r7, #2
 8002c34:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	1cbb      	adds	r3, r7, #2
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	405a      	eors	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	615a      	str	r2, [r3, #20]
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f000 fb6a 	bl	8003334 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c60:	4bc7      	ldr	r3, [pc, #796]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	220c      	movs	r2, #12
 8002c66:	4013      	ands	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c6a:	4bc5      	ldr	r3, [pc, #788]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	025b      	lsls	r3, r3, #9
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <HAL_RCC_OscConfig+0x36>
 8002c80:	e07d      	b.n	8002d7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d007      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x68>
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	4bb9      	ldr	r3, [pc, #740]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	029b      	lsls	r3, r3, #10
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5a>
 8002ca4:	e06a      	b.n	8002d7c <HAL_RCC_OscConfig+0x130>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d166      	bne.n	8002d7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f000 fb40 	bl	8003334 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x84>
 8002cc0:	4baf      	ldr	r3, [pc, #700]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4bae      	ldr	r3, [pc, #696]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	0249      	lsls	r1, r1, #9
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e027      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	23a0      	movs	r3, #160	; 0xa0
 8002cd6:	02db      	lsls	r3, r3, #11
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10e      	bne.n	8002cfa <HAL_RCC_OscConfig+0xae>
 8002cdc:	4ba8      	ldr	r3, [pc, #672]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4ba7      	ldr	r3, [pc, #668]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	02c9      	lsls	r1, r1, #11
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	4ba5      	ldr	r3, [pc, #660]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4ba4      	ldr	r3, [pc, #656]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0249      	lsls	r1, r1, #9
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e012      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002cfa:	4ba1      	ldr	r3, [pc, #644]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4ba0      	ldr	r3, [pc, #640]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d00:	49a0      	ldr	r1, [pc, #640]	; (8002f84 <HAL_RCC_OscConfig+0x338>)
 8002d02:	400a      	ands	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	4b9e      	ldr	r3, [pc, #632]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4b9a      	ldr	r3, [pc, #616]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d1a:	499b      	ldr	r1, [pc, #620]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d014      	beq.n	8002d52 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff fad2 	bl	80022d0 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d32:	f7ff facd 	bl	80022d0 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b64      	cmp	r3, #100	; 0x64
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e2f7      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d44:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	029b      	lsls	r3, r3, #10
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0xe6>
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7ff fabd 	bl	80022d0 <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7ff fab8 	bl	80022d0 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e2e2      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d6e:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	029b      	lsls	r3, r3, #10
 8002d76:	4013      	ands	r3, r2
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x110>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2202      	movs	r2, #2
 8002d84:	4013      	ands	r3, r2
 8002d86:	d100      	bne.n	8002d8a <HAL_RCC_OscConfig+0x13e>
 8002d88:	e098      	b.n	8002ebc <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	2220      	movs	r2, #32
 8002d94:	4013      	ands	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002d9e:	2120      	movs	r1, #32
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	2220      	movs	r2, #32
 8002da8:	4393      	bics	r3, r2
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d13d      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1e8>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d13a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x186>
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e2b0      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b6b      	ldr	r3, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a6d      	ldr	r2, [pc, #436]	; (8002f8c <HAL_RCC_OscConfig+0x340>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	021a      	lsls	r2, r3, #8
 8002de2:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002de8:	4b65      	ldr	r3, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2209      	movs	r2, #9
 8002dee:	4393      	bics	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 fbcb 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8002dfe:	0001      	movs	r1, r0
 8002e00:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	220f      	movs	r2, #15
 8002e08:	4013      	ands	r3, r2
 8002e0a:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x344>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	000a      	movs	r2, r1
 8002e10:	40da      	lsrs	r2, r3
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <HAL_RCC_OscConfig+0x348>)
 8002e14:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002e16:	2513      	movs	r5, #19
 8002e18:	197c      	adds	r4, r7, r5
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff fa22 	bl	8002264 <HAL_InitTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e24:	197b      	adds	r3, r7, r5
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d047      	beq.n	8002ebc <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8002e2c:	2313      	movs	r3, #19
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	e27f      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d027      	beq.n	8002e8a <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e3a:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2209      	movs	r2, #9
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	4b4e      	ldr	r3, [pc, #312]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff fa40 	bl	80022d0 <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e56:	f7ff fa3b 	bl	80022d0 <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e265      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e68:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d0f1      	beq.n	8002e56 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a45      	ldr	r2, [pc, #276]	; (8002f8c <HAL_RCC_OscConfig+0x340>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	e018      	b.n	8002ebc <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b3c      	ldr	r3, [pc, #240]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002e90:	2101      	movs	r1, #1
 8002e92:	438a      	bics	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7ff fa1b 	bl	80022d0 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7ff fa16 	bl	80022d0 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e240      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb2:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d1f1      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d100      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x27c>
 8002ec6:	e09e      	b.n	8003006 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d13f      	bne.n	8002f4e <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ece:	4b2c      	ldr	r3, [pc, #176]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x29a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e226      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	; (8002f98 <HAL_RCC_OscConfig+0x34c>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	0a19      	lsrs	r1, r3, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	061a      	lsls	r2, r3, #24
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	0b5b      	lsrs	r3, r3, #13
 8002f14:	3301      	adds	r3, #1
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	0212      	lsls	r2, r2, #8
 8002f1a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	210f      	movs	r1, #15
 8002f24:	400b      	ands	r3, r1
 8002f26:	491a      	ldr	r1, [pc, #104]	; (8002f90 <HAL_RCC_OscConfig+0x344>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_OscConfig+0x348>)
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002f30:	2513      	movs	r5, #19
 8002f32:	197c      	adds	r4, r7, r5
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff f995 	bl	8002264 <HAL_InitTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f3e:	197b      	adds	r3, r7, r5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d05f      	beq.n	8003006 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8002f46:	2313      	movs	r3, #19
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	e1f2      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d03d      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_OscConfig+0x334>)
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	0049      	lsls	r1, r1, #1
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff f9b4 	bl	80022d0 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f6c:	e016      	b.n	8002f9c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6e:	f7ff f9af 	bl	80022d0 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d90f      	bls.n	8002f9c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e1d9      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
 8002f80:	40021000 	.word	0x40021000
 8002f84:	fffeffff 	.word	0xfffeffff
 8002f88:	fffbffff 	.word	0xfffbffff
 8002f8c:	ffffe0ff 	.word	0xffffe0ff
 8002f90:	0800a928 	.word	0x0800a928
 8002f94:	20000004 	.word	0x20000004
 8002f98:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f9c:	4bca      	ldr	r3, [pc, #808]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d0e2      	beq.n	8002f6e <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa8:	4bc7      	ldr	r3, [pc, #796]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4ac7      	ldr	r2, [pc, #796]	; (80032cc <HAL_RCC_OscConfig+0x680>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	4bc4      	ldr	r3, [pc, #784]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbc:	4bc2      	ldr	r3, [pc, #776]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	0a19      	lsrs	r1, r3, #8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	061a      	lsls	r2, r3, #24
 8002fca:	4bbf      	ldr	r3, [pc, #764]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	e019      	b.n	8003006 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fd2:	4bbd      	ldr	r3, [pc, #756]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4bbc      	ldr	r3, [pc, #752]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002fd8:	49bd      	ldr	r1, [pc, #756]	; (80032d0 <HAL_RCC_OscConfig+0x684>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7ff f977 	bl	80022d0 <HAL_GetTick>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe8:	f7ff f972 	bl	80022d0 <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e19c      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ffa:	4bb3      	ldr	r3, [pc, #716]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4013      	ands	r3, r2
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2208      	movs	r2, #8
 800300c:	4013      	ands	r3, r2
 800300e:	d036      	beq.n	800307e <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d019      	beq.n	800304c <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003018:	4bab      	ldr	r3, [pc, #684]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800301a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800301c:	4baa      	ldr	r3, [pc, #680]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800301e:	2101      	movs	r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7ff f954 	bl	80022d0 <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302e:	f7ff f94f 	bl	80022d0 <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e179      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003040:	4ba1      	ldr	r3, [pc, #644]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	2202      	movs	r2, #2
 8003046:	4013      	ands	r3, r2
 8003048:	d0f1      	beq.n	800302e <HAL_RCC_OscConfig+0x3e2>
 800304a:	e018      	b.n	800307e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304c:	4b9e      	ldr	r3, [pc, #632]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800304e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003050:	4b9d      	ldr	r3, [pc, #628]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003052:	2101      	movs	r1, #1
 8003054:	438a      	bics	r2, r1
 8003056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7ff f93a 	bl	80022d0 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003062:	f7ff f935 	bl	80022d0 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e15f      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003074:	4b94      	ldr	r3, [pc, #592]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	2202      	movs	r2, #2
 800307a:	4013      	ands	r3, r2
 800307c:	d1f1      	bne.n	8003062 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	d100      	bne.n	800308a <HAL_RCC_OscConfig+0x43e>
 8003088:	e0af      	b.n	80031ea <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2323      	movs	r3, #35	; 0x23
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b8d      	ldr	r3, [pc, #564]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	055b      	lsls	r3, r3, #21
 800309a:	4013      	ands	r3, r2
 800309c:	d10a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b8a      	ldr	r3, [pc, #552]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	4b89      	ldr	r3, [pc, #548]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	0549      	lsls	r1, r1, #21
 80030a8:	430a      	orrs	r2, r1
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80030ac:	2323      	movs	r3, #35	; 0x23
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b87      	ldr	r3, [pc, #540]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	d11a      	bne.n	80030f6 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c0:	4b84      	ldr	r3, [pc, #528]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b83      	ldr	r3, [pc, #524]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	0049      	lsls	r1, r1, #1
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7ff f8ff 	bl	80022d0 <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7ff f8fa 	bl	80022d0 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e124      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b7a      	ldr	r3, [pc, #488]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	429a      	cmp	r2, r3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_OscConfig+0x4c6>
 8003102:	4b71      	ldr	r3, [pc, #452]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003106:	4b70      	ldr	r3, [pc, #448]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0049      	lsls	r1, r1, #1
 800310c:	430a      	orrs	r2, r1
 800310e:	651a      	str	r2, [r3, #80]	; 0x50
 8003110:	e031      	b.n	8003176 <HAL_RCC_OscConfig+0x52a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x4e8>
 800311a:	4b6b      	ldr	r3, [pc, #428]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800311c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800311e:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003120:	496b      	ldr	r1, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x684>)
 8003122:	400a      	ands	r2, r1
 8003124:	651a      	str	r2, [r3, #80]	; 0x50
 8003126:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800312c:	496a      	ldr	r1, [pc, #424]	; (80032d8 <HAL_RCC_OscConfig+0x68c>)
 800312e:	400a      	ands	r2, r1
 8003130:	651a      	str	r2, [r3, #80]	; 0x50
 8003132:	e020      	b.n	8003176 <HAL_RCC_OscConfig+0x52a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	23a0      	movs	r3, #160	; 0xa0
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	429a      	cmp	r2, r3
 800313e:	d10e      	bne.n	800315e <HAL_RCC_OscConfig+0x512>
 8003140:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003144:	4b60      	ldr	r3, [pc, #384]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	00c9      	lsls	r1, r1, #3
 800314a:	430a      	orrs	r2, r1
 800314c:	651a      	str	r2, [r3, #80]	; 0x50
 800314e:	4b5e      	ldr	r3, [pc, #376]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0049      	lsls	r1, r1, #1
 8003158:	430a      	orrs	r2, r1
 800315a:	651a      	str	r2, [r3, #80]	; 0x50
 800315c:	e00b      	b.n	8003176 <HAL_RCC_OscConfig+0x52a>
 800315e:	4b5a      	ldr	r3, [pc, #360]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003162:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003164:	495a      	ldr	r1, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x684>)
 8003166:	400a      	ands	r2, r1
 8003168:	651a      	str	r2, [r3, #80]	; 0x50
 800316a:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800316c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316e:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003170:	4959      	ldr	r1, [pc, #356]	; (80032d8 <HAL_RCC_OscConfig+0x68c>)
 8003172:	400a      	ands	r2, r1
 8003174:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d015      	beq.n	80031aa <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7ff f8a7 	bl	80022d0 <HAL_GetTick>
 8003182:	0003      	movs	r3, r0
 8003184:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003186:	e009      	b.n	800319c <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7ff f8a2 	bl	80022d0 <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	4a52      	ldr	r2, [pc, #328]	; (80032dc <HAL_RCC_OscConfig+0x690>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0cb      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800319c:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800319e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4013      	ands	r3, r2
 80031a6:	d0ef      	beq.n	8003188 <HAL_RCC_OscConfig+0x53c>
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7ff f891 	bl	80022d0 <HAL_GetTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031b2:	e009      	b.n	80031c8 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_GetTick>
 80031b8:	0002      	movs	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	4a47      	ldr	r2, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x690>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0b5      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 80031ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	d1ef      	bne.n	80031b4 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031d4:	2323      	movs	r3, #35	; 0x23
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 80031e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 80031e4:	493e      	ldr	r1, [pc, #248]	; (80032e0 <HAL_RCC_OscConfig+0x694>)
 80031e6:	400a      	ands	r2, r1
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d100      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5a8>
 80031f2:	e09e      	b.n	8003332 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d100      	bne.n	80031fc <HAL_RCC_OscConfig+0x5b0>
 80031fa:	e077      	b.n	80032ec <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b02      	cmp	r3, #2
 8003202:	d145      	bne.n	8003290 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800320a:	4936      	ldr	r1, [pc, #216]	; (80032e4 <HAL_RCC_OscConfig+0x698>)
 800320c:	400a      	ands	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7ff f85e 	bl	80022d0 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321a:	f7ff f859 	bl	80022d0 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e083      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800322c:	4b26      	ldr	r3, [pc, #152]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	049b      	lsls	r3, r3, #18
 8003234:	4013      	ands	r3, r2
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <HAL_RCC_OscConfig+0x69c>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	431a      	orrs	r2, r3
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	0449      	lsls	r1, r1, #17
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7ff f833 	bl	80022d0 <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7ff f82e 	bl	80022d0 <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e058      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	049b      	lsls	r3, r3, #18
 800328a:	4013      	ands	r3, r2
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x624>
 800328e:	e050      	b.n	8003332 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 8003296:	4913      	ldr	r1, [pc, #76]	; (80032e4 <HAL_RCC_OscConfig+0x698>)
 8003298:	400a      	ands	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7ff f818 	bl	80022d0 <HAL_GetTick>
 80032a0:	0003      	movs	r3, r0
 80032a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7ff f813 	bl	80022d0 <HAL_GetTick>
 80032aa:	0002      	movs	r2, r0
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e03d      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_RCC_OscConfig+0x67c>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	049b      	lsls	r3, r3, #18
 80032c0:	4013      	ands	r3, r2
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x65a>
 80032c4:	e035      	b.n	8003332 <HAL_RCC_OscConfig+0x6e6>
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	40021000 	.word	0x40021000
 80032cc:	ffff1fff 	.word	0xffff1fff
 80032d0:	fffffeff 	.word	0xfffffeff
 80032d4:	40007000 	.word	0x40007000
 80032d8:	fffffbff 	.word	0xfffffbff
 80032dc:	00001388 	.word	0x00001388
 80032e0:	efffffff 	.word	0xefffffff
 80032e4:	feffffff 	.word	0xfeffffff
 80032e8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x6f0>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	025b      	lsls	r3, r3, #9
 8003304:	401a      	ands	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	429a      	cmp	r2, r3
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	23f0      	movs	r3, #240	; 0xf0
 8003312:	039b      	lsls	r3, r3, #14
 8003314:	401a      	ands	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d107      	bne.n	800332e <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	23c0      	movs	r3, #192	; 0xc0
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	401a      	ands	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b00a      	add	sp, #40	; 0x28
 800333a:	bdb0      	pop	{r4, r5, r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e10d      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b88      	ldr	r3, [pc, #544]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	4013      	ands	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d911      	bls.n	8003386 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b85      	ldr	r3, [pc, #532]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	4393      	bics	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	4b82      	ldr	r3, [pc, #520]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b80      	ldr	r3, [pc, #512]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0f4      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b7a      	ldr	r3, [pc, #488]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	22f0      	movs	r2, #240	; 0xf0
 8003396:	4393      	bics	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	4b77      	ldr	r3, [pc, #476]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	d100      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x70>
 80033ae:	e089      	b.n	80034c4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b8:	4b70      	ldr	r3, [pc, #448]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	4013      	ands	r3, r2
 80033c2:	d120      	bne.n	8003406 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0d3      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	049b      	lsls	r3, r3, #18
 80033d8:	4013      	ands	r3, r2
 80033da:	d114      	bne.n	8003406 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0c7      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e8:	4b64      	ldr	r3, [pc, #400]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2204      	movs	r2, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0bc      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033f6:	4b61      	ldr	r3, [pc, #388]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e0b4      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b5d      	ldr	r3, [pc, #372]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2203      	movs	r2, #3
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003416:	430a      	orrs	r2, r1
 8003418:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341a:	f7fe ff59 	bl	80022d0 <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d111      	bne.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800342a:	e009      	b.n	8003440 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe ff50 	bl	80022d0 <HAL_GetTick>
 8003430:	0002      	movs	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e097      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003440:	4b4e      	ldr	r3, [pc, #312]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	220c      	movs	r2, #12
 8003446:	4013      	ands	r3, r2
 8003448:	2b08      	cmp	r3, #8
 800344a:	d1ef      	bne.n	800342c <HAL_RCC_ClockConfig+0xec>
 800344c:	e03a      	b.n	80034c4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d111      	bne.n	800347a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003456:	e009      	b.n	800346c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe ff3a 	bl	80022d0 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	4a47      	ldr	r2, [pc, #284]	; (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e081      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346c:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	220c      	movs	r2, #12
 8003472:	4013      	ands	r3, r2
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d1ef      	bne.n	8003458 <HAL_RCC_ClockConfig+0x118>
 8003478:	e024      	b.n	80034c4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d11b      	bne.n	80034ba <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003482:	e009      	b.n	8003498 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fe ff24 	bl	80022d0 <HAL_GetTick>
 8003488:	0002      	movs	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e06b      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003498:	4b38      	ldr	r3, [pc, #224]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	220c      	movs	r2, #12
 800349e:	4013      	ands	r3, r2
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d1ef      	bne.n	8003484 <HAL_RCC_ClockConfig+0x144>
 80034a4:	e00e      	b.n	80034c4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a6:	f7fe ff13 	bl	80022d0 <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	4a33      	ldr	r2, [pc, #204]	; (8003580 <HAL_RCC_ClockConfig+0x240>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e05a      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ba:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	220c      	movs	r2, #12
 80034c0:	4013      	ands	r3, r2
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d211      	bcs.n	80034f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4393      	bics	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_ClockConfig+0x238>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03c      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2204      	movs	r2, #4
 80034fc:	4013      	ands	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003500:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <HAL_RCC_ClockConfig+0x244>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	4013      	ands	r3, r2
 800351c:	d00a      	beq.n	8003534 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x248>)
 8003524:	4013      	ands	r3, r2
 8003526:	0019      	movs	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	00da      	lsls	r2, r3, #3
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003534:	f000 f82e 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8003538:	0001      	movs	r1, r0
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_RCC_ClockConfig+0x23c>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	220f      	movs	r2, #15
 8003542:	4013      	ands	r3, r2
 8003544:	4a11      	ldr	r2, [pc, #68]	; (800358c <HAL_RCC_ClockConfig+0x24c>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	000a      	movs	r2, r1
 800354a:	40da      	lsrs	r2, r3
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_ClockConfig+0x250>)
 800354e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003550:	250b      	movs	r5, #11
 8003552:	197c      	adds	r4, r7, r5
 8003554:	2000      	movs	r0, #0
 8003556:	f7fe fe85 	bl	8002264 <HAL_InitTick>
 800355a:	0003      	movs	r3, r0
 800355c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800355e:	197b      	adds	r3, r7, r5
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8003566:	230b      	movs	r3, #11
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	e000      	b.n	8003570 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b004      	add	sp, #16
 8003576:	bdb0      	pop	{r4, r5, r7, pc}
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	00001388 	.word	0x00001388
 8003584:	fffff8ff 	.word	0xfffff8ff
 8003588:	ffffc7ff 	.word	0xffffc7ff
 800358c:	0800a928 	.word	0x0800a928
 8003590:	20000004 	.word	0x20000004

08003594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_GetSysClockFreq+0xf4>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	220c      	movs	r2, #12
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d00e      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x34>
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d00f      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x3a>
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d157      	bne.n	8003662 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80035b2:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2210      	movs	r2, #16
 80035b8:	4013      	ands	r3, r2
 80035ba:	d002      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035be:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80035c0:	e05d      	b.n	800367e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035c4:	613b      	str	r3, [r7, #16]
      break;
 80035c6:	e05a      	b.n	800367e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <HAL_RCC_GetSysClockFreq+0x100>)
 80035ca:	613b      	str	r3, [r7, #16]
      break;
 80035cc:	e057      	b.n	800367e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0c9b      	lsrs	r3, r3, #18
 80035d2:	220f      	movs	r2, #15
 80035d4:	4013      	ands	r3, r2
 80035d6:	4a30      	ldr	r2, [pc, #192]	; (8003698 <HAL_RCC_GetSysClockFreq+0x104>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	0d9b      	lsrs	r3, r3, #22
 80035e0:	2203      	movs	r2, #3
 80035e2:	4013      	ands	r3, r2
 80035e4:	3301      	adds	r3, #1
 80035e6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	025b      	lsls	r3, r3, #9
 80035f0:	4013      	ands	r3, r2
 80035f2:	d00f      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	000a      	movs	r2, r1
 80035f8:	0152      	lsls	r2, r2, #5
 80035fa:	1a52      	subs	r2, r2, r1
 80035fc:	0193      	lsls	r3, r2, #6
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	185b      	adds	r3, r3, r1
 8003604:	025b      	lsls	r3, r3, #9
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f7fc fd8f 	bl	800012c <__udivsi3>
 800360e:	0003      	movs	r3, r0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e023      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2210      	movs	r2, #16
 800361a:	4013      	ands	r3, r2
 800361c:	d00f      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	000a      	movs	r2, r1
 8003622:	0152      	lsls	r2, r2, #5
 8003624:	1a52      	subs	r2, r2, r1
 8003626:	0193      	lsls	r3, r2, #6
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	185b      	adds	r3, r3, r1
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	0018      	movs	r0, r3
 8003634:	f7fc fd7a 	bl	800012c <__udivsi3>
 8003638:	0003      	movs	r3, r0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e00e      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	000a      	movs	r2, r1
 8003642:	0152      	lsls	r2, r2, #5
 8003644:	1a52      	subs	r2, r2, r1
 8003646:	0193      	lsls	r3, r2, #6
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	185b      	adds	r3, r3, r1
 800364e:	029b      	lsls	r3, r3, #10
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f7fc fd6a 	bl	800012c <__udivsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	613b      	str	r3, [r7, #16]
      break;
 8003660:	e00d      	b.n	800367e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	2207      	movs	r2, #7
 800366a:	4013      	ands	r3, r2
 800366c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	0212      	lsls	r2, r2, #8
 8003676:	409a      	lsls	r2, r3
 8003678:	0013      	movs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
      break;
 800367c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800367e:	693b      	ldr	r3, [r7, #16]
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b006      	add	sp, #24
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	003d0900 	.word	0x003d0900
 8003690:	00f42400 	.word	0x00f42400
 8003694:	007a1200 	.word	0x007a1200
 8003698:	0800a940 	.word	0x0800a940

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b02      	ldr	r3, [pc, #8]	; (80036ac <HAL_RCC_GetHCLKFreq+0x10>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b4:	f7ff fff2 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036b8:	0001      	movs	r1, r0
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	2207      	movs	r2, #7
 80036c2:	4013      	ands	r3, r2
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	40d9      	lsrs	r1, r3
 80036ca:	000b      	movs	r3, r1
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	40021000 	.word	0x40021000
 80036d8:	0800a938 	.word	0x0800a938

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffdc 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e4:	0001      	movs	r1, r0
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	0adb      	lsrs	r3, r3, #11
 80036ec:	2207      	movs	r2, #7
 80036ee:	4013      	ands	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	40d9      	lsrs	r1, r3
 80036f6:	000b      	movs	r3, r1
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	40021000 	.word	0x40021000
 8003704:	0800a938 	.word	0x0800a938

08003708 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2220      	movs	r2, #32
 8003716:	4013      	ands	r3, r2
 8003718:	d100      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x14>
 800371a:	e0c7      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800371c:	2317      	movs	r3, #23
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003724:	4b91      	ldr	r3, [pc, #580]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	055b      	lsls	r3, r3, #21
 800372c:	4013      	ands	r3, r2
 800372e:	d10a      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	4b8e      	ldr	r3, [pc, #568]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003734:	4b8d      	ldr	r3, [pc, #564]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0549      	lsls	r1, r1, #21
 800373a:	430a      	orrs	r2, r1
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800373e:	2317      	movs	r3, #23
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b8a      	ldr	r3, [pc, #552]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4013      	ands	r3, r2
 8003750:	d11a      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003752:	4b87      	ldr	r3, [pc, #540]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b86      	ldr	r3, [pc, #536]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	0049      	lsls	r1, r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003760:	f7fe fdb6 	bl	80022d0 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe fdb1 	bl	80022d0 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	; 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0f3      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b7c      	ldr	r3, [pc, #496]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d0f0      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003788:	4b78      	ldr	r3, [pc, #480]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	23c0      	movs	r3, #192	; 0xc0
 800378e:	039b      	lsls	r3, r3, #14
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	23c0      	movs	r3, #192	; 0xc0
 800379a:	039b      	lsls	r3, r3, #14
 800379c:	4013      	ands	r3, r2
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d013      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	23c0      	movs	r3, #192	; 0xc0
 80037aa:	029b      	lsls	r3, r3, #10
 80037ac:	401a      	ands	r2, r3
 80037ae:	23c0      	movs	r3, #192	; 0xc0
 80037b0:	029b      	lsls	r3, r3, #10
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d10a      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80037b6:	4b6d      	ldr	r3, [pc, #436]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	401a      	ands	r2, r3
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	029b      	lsls	r3, r3, #10
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d101      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0cb      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80037cc:	4b67      	ldr	r3, [pc, #412]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037d0:	23c0      	movs	r3, #192	; 0xc0
 80037d2:	029b      	lsls	r3, r3, #10
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d03b      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	23c0      	movs	r3, #192	; 0xc0
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	4013      	ands	r3, r2
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d033      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2220      	movs	r2, #32
 80037f4:	4013      	ands	r3, r2
 80037f6:	d02e      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80037f8:	4b5c      	ldr	r3, [pc, #368]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fc:	4a5d      	ldr	r2, [pc, #372]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037fe:	4013      	ands	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003802:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003806:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	0309      	lsls	r1, r1, #12
 800380c:	430a      	orrs	r2, r1
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003810:	4b56      	ldr	r3, [pc, #344]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003816:	4958      	ldr	r1, [pc, #352]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003818:	400a      	ands	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800381c:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d014      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe fd50 	bl	80022d0 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003834:	e009      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe fd4b 	bl	80022d0 <HAL_GetTick>
 800383a:	0002      	movs	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	4a4e      	ldr	r2, [pc, #312]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e08c      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800384a:	4b48      	ldr	r3, [pc, #288]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800384c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d0ef      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	23c0      	movs	r3, #192	; 0xc0
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	401a      	ands	r2, r3
 8003860:	23c0      	movs	r3, #192	; 0xc0
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	429a      	cmp	r2, r3
 8003866:	d10c      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003868:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a44      	ldr	r2, [pc, #272]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800386e:	4013      	ands	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	23c0      	movs	r3, #192	; 0xc0
 8003878:	039b      	lsls	r3, r3, #14
 800387a:	401a      	ands	r2, r3
 800387c:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003884:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	23c0      	movs	r3, #192	; 0xc0
 800388c:	029b      	lsls	r3, r3, #10
 800388e:	401a      	ands	r2, r3
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003892:	430a      	orrs	r2, r1
 8003894:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003896:	2317      	movs	r3, #23
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a4:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038a6:	4937      	ldr	r1, [pc, #220]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b6:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	2203      	movs	r2, #3
 80038bc:	4393      	bics	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c6:	430a      	orrs	r2, r1
 80038c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2202      	movs	r2, #2
 80038d0:	4013      	ands	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d8:	220c      	movs	r2, #12
 80038da:	4393      	bics	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038e4:	430a      	orrs	r2, r1
 80038e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2204      	movs	r2, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038f2:	4b1e      	ldr	r3, [pc, #120]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	4a24      	ldr	r2, [pc, #144]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	0019      	movs	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003902:	430a      	orrs	r2, r1
 8003904:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2208      	movs	r2, #8
 800390c:	4013      	ands	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003910:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003920:	430a      	orrs	r2, r1
 8003922:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4013      	ands	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003934:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003940:	430a      	orrs	r2, r1
 8003942:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	4013      	ands	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	4a0f      	ldr	r2, [pc, #60]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800395e:	430a      	orrs	r2, r1
 8003960:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b006      	add	sp, #24
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	40007000 	.word	0x40007000
 8003974:	fffcffff 	.word	0xfffcffff
 8003978:	fff7ffff 	.word	0xfff7ffff
 800397c:	00001388 	.word	0x00001388
 8003980:	ffcfffff 	.word	0xffcfffff
 8003984:	efffffff 	.word	0xefffffff
 8003988:	fffff3ff 	.word	0xfffff3ff
 800398c:	ffffcfff 	.word	0xffffcfff
 8003990:	fff3ffff 	.word	0xfff3ffff

08003994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e059      	b.n	8003a5a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2251      	movs	r2, #81	; 0x51
 80039b0:	5c9b      	ldrb	r3, [r3, r2]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2250      	movs	r2, #80	; 0x50
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f002 ff14 	bl	80067f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2251      	movs	r2, #81	; 0x51
 80039cc:	2102      	movs	r1, #2
 80039ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2140      	movs	r1, #64	; 0x40
 80039dc:	438a      	bics	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6999      	ldr	r1, [r3, #24]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	400b      	ands	r3, r1
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	0011      	movs	r1, r2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	2204      	movs	r2, #4
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4907      	ldr	r1, [pc, #28]	; (8003a64 <HAL_SPI_Init+0xd0>)
 8003a46:	400a      	ands	r2, r1
 8003a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2251      	movs	r2, #81	; 0x51
 8003a54:	2101      	movs	r1, #1
 8003a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	fffff7ff 	.word	0xfffff7ff

08003a68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	1dbb      	adds	r3, r7, #6
 8003a76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a78:	231f      	movs	r3, #31
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2250      	movs	r2, #80	; 0x50
 8003a84:	5c9b      	ldrb	r3, [r3, r2]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Transmit+0x26>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e136      	b.n	8003cfc <HAL_SPI_Transmit+0x294>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2250      	movs	r2, #80	; 0x50
 8003a92:	2101      	movs	r1, #1
 8003a94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a96:	f7fe fc1b 	bl	80022d0 <HAL_GetTick>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a9e:	2316      	movs	r3, #22
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	1dba      	adds	r2, r7, #6
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2251      	movs	r2, #81	; 0x51
 8003aac:	5c9b      	ldrb	r3, [r3, r2]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d004      	beq.n	8003abe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003ab4:	231f      	movs	r3, #31
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	2202      	movs	r2, #2
 8003aba:	701a      	strb	r2, [r3, #0]
    goto error;
 8003abc:	e113      	b.n	8003ce6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_SPI_Transmit+0x64>
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003acc:	231f      	movs	r3, #31
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ad4:	e107      	b.n	8003ce6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2251      	movs	r2, #81	; 0x51
 8003ada:	2103      	movs	r1, #3
 8003adc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1dba      	adds	r2, r7, #6
 8003aee:	8812      	ldrh	r2, [r2, #0]
 8003af0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1dba      	adds	r2, r7, #6
 8003af6:	8812      	ldrh	r2, [r2, #0]
 8003af8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d108      	bne.n	8003b36 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	01c9      	lsls	r1, r1, #7
 8003b32:	430a      	orrs	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2240      	movs	r2, #64	; 0x40
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d007      	beq.n	8003b54 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2140      	movs	r1, #64	; 0x40
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d14e      	bne.n	8003bfe <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_SPI_Transmit+0x10a>
 8003b68:	2316      	movs	r3, #22
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d13f      	bne.n	8003bf2 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	1c9a      	adds	r2, r3, #2
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b96:	e02c      	b.n	8003bf2 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d112      	bne.n	8003bcc <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	881a      	ldrh	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bca:	e012      	b.n	8003bf2 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bcc:	f7fe fb80 	bl	80022d0 <HAL_GetTick>
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d802      	bhi.n	8003be2 <HAL_SPI_Transmit+0x17a>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	d102      	bne.n	8003be8 <HAL_SPI_Transmit+0x180>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8003be8:	231f      	movs	r3, #31
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	2203      	movs	r2, #3
 8003bee:	701a      	strb	r2, [r3, #0]
          goto error;
 8003bf0:	e079      	b.n	8003ce6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1cd      	bne.n	8003b98 <HAL_SPI_Transmit+0x130>
 8003bfc:	e04f      	b.n	8003c9e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <HAL_SPI_Transmit+0x1a8>
 8003c06:	2316      	movs	r3, #22
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d141      	bne.n	8003c94 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c36:	e02d      	b.n	8003c94 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d113      	bne.n	8003c6e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c6c:	e012      	b.n	8003c94 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c6e:	f7fe fb2f 	bl	80022d0 <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d802      	bhi.n	8003c84 <HAL_SPI_Transmit+0x21c>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	d102      	bne.n	8003c8a <HAL_SPI_Transmit+0x222>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8003c8a:	231f      	movs	r3, #31
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2203      	movs	r2, #3
 8003c90:	701a      	strb	r2, [r3, #0]
          goto error;
 8003c92:	e028      	b.n	8003ce6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1cc      	bne.n	8003c38 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 fa59 	bl	800415c <SPI_EndRxTxTransaction>
 8003caa:	1e03      	subs	r3, r0, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8003cda:	231f      	movs	r3, #31
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e000      	b.n	8003ce6 <HAL_SPI_Transmit+0x27e>
  }

error:
 8003ce4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2251      	movs	r2, #81	; 0x51
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2250      	movs	r2, #80	; 0x50
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003cf6:	231f      	movs	r3, #31
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	781b      	ldrb	r3, [r3, #0]
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b008      	add	sp, #32
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	001a      	movs	r2, r3
 8003d12:	1cbb      	adds	r3, r7, #2
 8003d14:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d16:	2301      	movs	r3, #1
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d1a:	232b      	movs	r3, #43	; 0x2b
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2250      	movs	r2, #80	; 0x50
 8003d26:	5c9b      	ldrb	r3, [r3, r2]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_SPI_TransmitReceive+0x2c>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e1a1      	b.n	8004074 <HAL_SPI_TransmitReceive+0x370>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2250      	movs	r2, #80	; 0x50
 8003d34:	2101      	movs	r1, #1
 8003d36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d38:	f7fe faca 	bl	80022d0 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d40:	2023      	movs	r0, #35	; 0x23
 8003d42:	183b      	adds	r3, r7, r0
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	2151      	movs	r1, #81	; 0x51
 8003d48:	5c52      	ldrb	r2, [r2, r1]
 8003d4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d52:	231a      	movs	r3, #26
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	1cba      	adds	r2, r7, #2
 8003d58:	8812      	ldrh	r2, [r2, #0]
 8003d5a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d5c:	183b      	adds	r3, r7, r0
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d012      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x86>
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	2382      	movs	r3, #130	; 0x82
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d108      	bne.n	8003d80 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <HAL_SPI_TransmitReceive+0x7c>
 8003d76:	2323      	movs	r3, #35	; 0x23
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d004      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8003d80:	232b      	movs	r3, #43	; 0x2b
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2202      	movs	r2, #2
 8003d86:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d88:	e169      	b.n	800405e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d006      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x9a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x9a>
 8003d96:	1cbb      	adds	r3, r7, #2
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8003d9e:	232b      	movs	r3, #43	; 0x2b
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003da6:	e15a      	b.n	800405e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2251      	movs	r2, #81	; 0x51
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d003      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2251      	movs	r2, #81	; 0x51
 8003db8:	2105      	movs	r1, #5
 8003dba:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1cba      	adds	r2, r7, #2
 8003dcc:	8812      	ldrh	r2, [r2, #0]
 8003dce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1cba      	adds	r2, r7, #2
 8003dd4:	8812      	ldrh	r2, [r2, #0]
 8003dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1cba      	adds	r2, r7, #2
 8003de2:	8812      	ldrh	r2, [r2, #0]
 8003de4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1cba      	adds	r2, r7, #2
 8003dea:	8812      	ldrh	r2, [r2, #0]
 8003dec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2240      	movs	r2, #64	; 0x40
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d007      	beq.n	8003e18 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2140      	movs	r1, #64	; 0x40
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d000      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x122>
 8003e24:	e07a      	b.n	8003f1c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0x134>
 8003e2e:	231a      	movs	r3, #26
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d166      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5c:	e053      	b.n	8003f06 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2202      	movs	r2, #2
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x1a0>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_SPI_TransmitReceive+0x1a0>
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d113      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	881a      	ldrh	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d119      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0x1e2>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d014      	beq.n	8003ee6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ee6:	f7fe f9f3 	bl	80022d0 <HAL_GetTick>
 8003eea:	0002      	movs	r2, r0
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d807      	bhi.n	8003f06 <HAL_SPI_TransmitReceive+0x202>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	3301      	adds	r3, #1
 8003efa:	d004      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8003efc:	232b      	movs	r3, #43	; 0x2b
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	2203      	movs	r2, #3
 8003f02:	701a      	strb	r2, [r3, #0]
        goto error;
 8003f04:	e0ab      	b.n	800405e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1a6      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x15a>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1a1      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x15a>
 8003f1a:	e07f      	b.n	800401c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x22c>
 8003f24:	231a      	movs	r3, #26
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d000      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x22c>
 8003f2e:	e06b      	b.n	8004008 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f56:	e057      	b.n	8004008 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d11c      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x29c>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x29c>
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d114      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d119      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x2de>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d014      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fe2:	f7fe f975 	bl	80022d0 <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d802      	bhi.n	8003ff8 <HAL_SPI_TransmitReceive+0x2f4>
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x2fa>
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8003ffe:	232b      	movs	r3, #43	; 0x2b
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	2203      	movs	r2, #3
 8004004:	701a      	strb	r2, [r3, #0]
        goto error;
 8004006:	e02a      	b.n	800405e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1a2      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x254>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d19d      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	0018      	movs	r0, r3
 8004024:	f000 f89a 	bl	800415c <SPI_EndRxTxTransaction>
 8004028:	1e03      	subs	r3, r0, #0
 800402a:	d007      	beq.n	800403c <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800402c:	232b      	movs	r3, #43	; 0x2b
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800403a:	e010      	b.n	800405e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	e000      	b.n	800405e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800405c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2251      	movs	r2, #81	; 0x51
 8004062:	2101      	movs	r1, #1
 8004064:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2250      	movs	r2, #80	; 0x50
 800406a:	2100      	movs	r1, #0
 800406c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800406e:	232b      	movs	r3, #43	; 0x2b
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	781b      	ldrb	r3, [r3, #0]
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b00c      	add	sp, #48	; 0x30
 800407a:	bd80      	pop	{r7, pc}

0800407c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	1dfb      	adds	r3, r7, #7
 800408a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408c:	e050      	b.n	8004130 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	d04d      	beq.n	8004130 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004094:	f7fe f91c 	bl	80022d0 <HAL_GetTick>
 8004098:	0002      	movs	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d902      	bls.n	80040aa <SPI_WaitFlagStateUntilTimeout+0x2e>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d142      	bne.n	8004130 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	21e0      	movs	r1, #224	; 0xe0
 80040b6:	438a      	bics	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	2382      	movs	r3, #130	; 0x82
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d113      	bne.n	80040ee <SPI_WaitFlagStateUntilTimeout+0x72>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d005      	beq.n	80040de <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	429a      	cmp	r2, r3
 80040dc:	d107      	bne.n	80040ee <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	438a      	bics	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d110      	bne.n	800411c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4914      	ldr	r1, [pc, #80]	; (8004158 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8004106:	400a      	ands	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	0189      	lsls	r1, r1, #6
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2251      	movs	r2, #81	; 0x51
 8004120:	2101      	movs	r1, #1
 8004122:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2250      	movs	r2, #80	; 0x50
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e00f      	b.n	8004150 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	425a      	negs	r2, r3
 8004140:	4153      	adcs	r3, r2
 8004142:	b2db      	uxtb	r3, r3
 8004144:	001a      	movs	r2, r3
 8004146:	1dfb      	adds	r3, r7, #7
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d19f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b004      	add	sp, #16
 8004156:	bd80      	pop	{r7, pc}
 8004158:	ffffdfff 	.word	0xffffdfff

0800415c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	2382      	movs	r3, #130	; 0x82
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	429a      	cmp	r2, r3
 8004172:	d112      	bne.n	800419a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	0013      	movs	r3, r2
 800417e:	2200      	movs	r2, #0
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	f7ff ff7b 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 8004186:	1e03      	subs	r3, r0, #0
 8004188:	d020      	beq.n	80041cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	2220      	movs	r2, #32
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e019      	b.n	80041ce <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2251      	movs	r2, #81	; 0x51
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d112      	bne.n	80041cc <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	0013      	movs	r3, r2
 80041b0:	2200      	movs	r2, #0
 80041b2:	2101      	movs	r1, #1
 80041b4:	f7ff ff62 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 80041b8:	1e03      	subs	r3, r0, #0
 80041ba:	d007      	beq.n	80041cc <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	2220      	movs	r2, #32
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e000      	b.n	80041ce <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b004      	add	sp, #16
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e01e      	b.n	8004226 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2239      	movs	r2, #57	; 0x39
 80041ec:	5c9b      	ldrb	r3, [r3, r2]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2238      	movs	r2, #56	; 0x38
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 f815 	bl	800422e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2239      	movs	r2, #57	; 0x39
 8004208:	2102      	movs	r1, #2
 800420a:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	0019      	movs	r1, r3
 8004216:	0010      	movs	r0, r2
 8004218:	f000 f988 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2239      	movs	r2, #57	; 0x39
 8004220:	2101      	movs	r1, #1
 8004222:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b002      	add	sp, #8
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	b002      	add	sp, #8
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	0018      	movs	r0, r3
 8004252:	f000 facd 	bl	80047f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2207      	movs	r2, #7
 800425e:	4013      	ands	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b06      	cmp	r3, #6
 8004266:	d007      	beq.n	8004278 <HAL_TIM_OC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2101      	movs	r1, #1
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b004      	add	sp, #16
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	0018      	movs	r0, r3
 8004298:	f000 faaa 	bl	80047f0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <HAL_TIM_OC_Stop+0x40>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	d107      	bne.n	80042b8 <HAL_TIM_OC_Stop+0x34>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2101      	movs	r1, #1
 80042b4:	438a      	bics	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b002      	add	sp, #8
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	00001111 	.word	0x00001111

080042c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e01e      	b.n	8004318 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2239      	movs	r2, #57	; 0x39
 80042de:	5c9b      	ldrb	r3, [r3, r2]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2238      	movs	r2, #56	; 0x38
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f002 fc25 	bl	8006b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2239      	movs	r2, #57	; 0x39
 80042fa:	2102      	movs	r1, #2
 80042fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	0019      	movs	r1, r3
 8004308:	0010      	movs	r0, r2
 800430a:	f000 f90f 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2239      	movs	r2, #57	; 0x39
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2238      	movs	r2, #56	; 0x38
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004336:	2302      	movs	r3, #2
 8004338:	e03c      	b.n	80043b4 <HAL_TIM_OC_ConfigChannel+0x94>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2238      	movs	r2, #56	; 0x38
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2239      	movs	r2, #57	; 0x39
 8004346:	2102      	movs	r1, #2
 8004348:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d010      	beq.n	8004372 <HAL_TIM_OC_ConfigChannel+0x52>
 8004350:	d802      	bhi.n	8004358 <HAL_TIM_OC_ConfigChannel+0x38>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8004356:	e024      	b.n	80043a2 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8004358:	2b08      	cmp	r3, #8
 800435a:	d012      	beq.n	8004382 <HAL_TIM_OC_ConfigChannel+0x62>
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d018      	beq.n	8004392 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8004360:	e01f      	b.n	80043a2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	0011      	movs	r1, r2
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f93c 	bl	80045e8 <TIM_OC1_SetConfig>
      break;
 8004370:	e017      	b.n	80043a2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f000 f970 	bl	8004660 <TIM_OC2_SetConfig>
      break;
 8004380:	e00f      	b.n	80043a2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	0011      	movs	r1, r2
 800438a:	0018      	movs	r0, r3
 800438c:	f000 f9aa 	bl	80046e4 <TIM_OC3_SetConfig>
      break;
 8004390:	e007      	b.n	80043a2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	0011      	movs	r1, r2
 800439a:	0018      	movs	r0, r3
 800439c:	f000 f9e2 	bl	8004764 <TIM_OC4_SetConfig>
      break;
 80043a0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2239      	movs	r2, #57	; 0x39
 80043a6:	2101      	movs	r1, #1
 80043a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2238      	movs	r2, #56	; 0x38
 80043ae:	2100      	movs	r1, #0
 80043b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b004      	add	sp, #16
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2238      	movs	r2, #56	; 0x38
 80043cc:	5c9b      	ldrb	r3, [r3, r2]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0a4      	b.n	8004520 <HAL_TIM_PWM_ConfigChannel+0x164>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2238      	movs	r2, #56	; 0x38
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2239      	movs	r2, #57	; 0x39
 80043e2:	2102      	movs	r1, #2
 80043e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d029      	beq.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x84>
 80043ec:	d802      	bhi.n	80043f4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80043f2:	e08c      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d046      	beq.n	8004486 <HAL_TIM_PWM_ConfigChannel+0xca>
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d065      	beq.n	80044c8 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80043fc:	e087      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f8ee 	bl	80045e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2108      	movs	r1, #8
 8004418:	430a      	orrs	r2, r1
 800441a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2104      	movs	r1, #4
 8004428:	438a      	bics	r2, r1
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
      break;
 800443e:	e066      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	0011      	movs	r1, r2
 8004448:	0018      	movs	r0, r3
 800444a:	f000 f909 	bl	8004660 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0109      	lsls	r1, r1, #4
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	492f      	ldr	r1, [pc, #188]	; (8004528 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800446c:	400a      	ands	r2, r1
 800446e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6999      	ldr	r1, [r3, #24]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	619a      	str	r2, [r3, #24]
      break;
 8004484:	e043      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	0011      	movs	r1, r2
 800448e:	0018      	movs	r0, r3
 8004490:	f000 f928 	bl	80046e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2108      	movs	r1, #8
 80044a0:	430a      	orrs	r2, r1
 80044a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2104      	movs	r1, #4
 80044b0:	438a      	bics	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69d9      	ldr	r1, [r3, #28]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	61da      	str	r2, [r3, #28]
      break;
 80044c6:	e022      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	0011      	movs	r1, r2
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 f947 	bl	8004764 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	0109      	lsls	r1, r1, #4
 80044e4:	430a      	orrs	r2, r1
 80044e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69da      	ldr	r2, [r3, #28]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	490d      	ldr	r1, [pc, #52]	; (8004528 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69d9      	ldr	r1, [r3, #28]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	61da      	str	r2, [r3, #28]
      break;
 800450c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2239      	movs	r2, #57	; 0x39
 8004512:	2101      	movs	r1, #1
 8004514:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2238      	movs	r2, #56	; 0x38
 800451a:	2100      	movs	r1, #0
 800451c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b004      	add	sp, #16
 8004526:	bd80      	pop	{r7, pc}
 8004528:	fffffbff 	.word	0xfffffbff

0800452c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	05db      	lsls	r3, r3, #23
 8004542:	429a      	cmp	r2, r3
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0x32>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <TIM_Base_SetConfig+0xac>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0x32>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <TIM_Base_SetConfig+0xb0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0x32>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <TIM_Base_SetConfig+0xb4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2270      	movs	r2, #112	; 0x70
 8004562:	4393      	bics	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	05db      	lsls	r3, r3, #23
 8004576:	429a      	cmp	r2, r3
 8004578:	d00b      	beq.n	8004592 <TIM_Base_SetConfig+0x66>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <TIM_Base_SetConfig+0xac>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <TIM_Base_SetConfig+0x66>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_Base_SetConfig+0xb0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_Base_SetConfig+0x66>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <TIM_Base_SetConfig+0xb4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d108      	bne.n	80045a4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <TIM_Base_SetConfig+0xb8>)
 8004596:	4013      	ands	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	4393      	bics	r3, r2
 80045aa:	001a      	movs	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	615a      	str	r2, [r3, #20]
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b004      	add	sp, #16
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40010800 	.word	0x40010800
 80045e0:	40011400 	.word	0x40011400
 80045e4:	fffffcff 	.word	0xfffffcff

080045e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4393      	bics	r3, r2
 80045fa:	001a      	movs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2270      	movs	r2, #112	; 0x70
 8004616:	4393      	bics	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2203      	movs	r2, #3
 800461e:	4393      	bics	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2202      	movs	r2, #2
 8004630:	4393      	bics	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b006      	add	sp, #24
 800465e:	bd80      	pop	{r7, pc}

08004660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	2210      	movs	r2, #16
 8004670:	4393      	bics	r3, r2
 8004672:	001a      	movs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <TIM_OC2_SetConfig+0x7c>)
 800468e:	4013      	ands	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <TIM_OC2_SetConfig+0x80>)
 8004696:	4013      	ands	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2220      	movs	r2, #32
 80046aa:	4393      	bics	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	621a      	str	r2, [r3, #32]
}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b006      	add	sp, #24
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	ffff8fff 	.word	0xffff8fff
 80046e0:	fffffcff 	.word	0xfffffcff

080046e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4a1a      	ldr	r2, [pc, #104]	; (800475c <TIM_OC3_SetConfig+0x78>)
 80046f4:	401a      	ands	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2270      	movs	r2, #112	; 0x70
 8004710:	4393      	bics	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2203      	movs	r2, #3
 8004718:	4393      	bics	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <TIM_OC3_SetConfig+0x7c>)
 800472a:	4013      	ands	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b006      	add	sp, #24
 800475a:	bd80      	pop	{r7, pc}
 800475c:	fffffeff 	.word	0xfffffeff
 8004760:	fffffdff 	.word	0xfffffdff

08004764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <TIM_OC4_SetConfig+0x7c>)
 8004774:	401a      	ands	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <TIM_OC4_SetConfig+0x80>)
 8004790:	4013      	ands	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <TIM_OC4_SetConfig+0x84>)
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <TIM_OC4_SetConfig+0x88>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b006      	add	sp, #24
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	ffffefff 	.word	0xffffefff
 80047e4:	ffff8fff 	.word	0xffff8fff
 80047e8:	fffffcff 	.word	0xfffffcff
 80047ec:	ffffdfff 	.word	0xffffdfff

080047f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	221f      	movs	r2, #31
 8004800:	4013      	ands	r3, r2
 8004802:	2201      	movs	r2, #1
 8004804:	409a      	lsls	r2, r3
 8004806:	0013      	movs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	43d2      	mvns	r2, r2
 8004812:	401a      	ands	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	211f      	movs	r1, #31
 8004820:	400b      	ands	r3, r1
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4099      	lsls	r1, r3
 8004826:	000b      	movs	r3, r1
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	46bd      	mov	sp, r7
 8004832:	b006      	add	sp, #24
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2238      	movs	r2, #56	; 0x38
 8004844:	5c9b      	ldrb	r3, [r3, r2]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800484a:	2302      	movs	r3, #2
 800484c:	e032      	b.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2238      	movs	r2, #56	; 0x38
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2239      	movs	r2, #57	; 0x39
 800485a:	2102      	movs	r1, #2
 800485c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2270      	movs	r2, #112	; 0x70
 8004872:	4393      	bics	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2280      	movs	r2, #128	; 0x80
 8004884:	4393      	bics	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4313      	orrs	r3, r2
 8004890:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2239      	movs	r2, #57	; 0x39
 80048a6:	2101      	movs	r1, #1
 80048a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2238      	movs	r2, #56	; 0x38
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b004      	add	sp, #16
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2238      	movs	r2, #56	; 0x38
 80048ca:	5c9b      	ldrb	r3, [r3, r2]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_TIMEx_RemapConfig+0x18>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e00c      	b.n	80048ee <HAL_TIMEx_RemapConfig+0x32>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2238      	movs	r2, #56	; 0x38
 80048d8:	2101      	movs	r1, #1
 80048da:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2238      	movs	r2, #56	; 0x38
 80048e8:	2100      	movs	r1, #0
 80048ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e044      	b.n	8004994 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2270      	movs	r2, #112	; 0x70
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f002 f993 	bl	8006c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2224      	movs	r2, #36	; 0x24
 8004926:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2101      	movs	r1, #1
 8004934:	438a      	bics	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f000 f8d8 	bl	8004af0 <UART_SetConfig>
 8004940:	0003      	movs	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e024      	b.n	8004994 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 fbff 	bl	8005158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	490d      	ldr	r1, [pc, #52]	; (800499c <HAL_UART_Init+0xa4>)
 8004966:	400a      	ands	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	212a      	movs	r1, #42	; 0x2a
 8004976:	438a      	bics	r2, r1
 8004978:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f000 fc97 	bl	80052c0 <UART_CheckIdleState>
 8004992:	0003      	movs	r3, r0
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b002      	add	sp, #8
 800499a:	bd80      	pop	{r7, pc}
 800499c:	ffffb7ff 	.word	0xffffb7ff

080049a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	1dbb      	adds	r3, r7, #6
 80049ae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d000      	beq.n	80049ba <HAL_UART_Transmit+0x1a>
 80049b8:	e094      	b.n	8004ae4 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_UART_Transmit+0x28>
 80049c0:	1dbb      	adds	r3, r7, #6
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e08c      	b.n	8004ae6 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	015b      	lsls	r3, r3, #5
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d109      	bne.n	80049ec <HAL_UART_Transmit+0x4c>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2201      	movs	r2, #1
 80049e4:	4013      	ands	r3, r2
 80049e6:	d001      	beq.n	80049ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e07c      	b.n	8004ae6 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2270      	movs	r2, #112	; 0x70
 80049f0:	5c9b      	ldrb	r3, [r3, r2]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Transmit+0x5a>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e075      	b.n	8004ae6 <HAL_UART_Transmit+0x146>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2270      	movs	r2, #112	; 0x70
 80049fe:	2101      	movs	r1, #1
 8004a00:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2221      	movs	r2, #33	; 0x21
 8004a0c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004a0e:	f7fd fc5f 	bl	80022d0 <HAL_GetTick>
 8004a12:	0003      	movs	r3, r0
 8004a14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1dba      	adds	r2, r7, #6
 8004a1a:	2150      	movs	r1, #80	; 0x50
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1dba      	adds	r2, r7, #6
 8004a24:	2152      	movs	r1, #82	; 0x52
 8004a26:	8812      	ldrh	r2, [r2, #0]
 8004a28:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	015b      	lsls	r3, r3, #5
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d108      	bne.n	8004a48 <HAL_UART_Transmit+0xa8>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	e003      	b.n	8004a50 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a50:	e02c      	b.n	8004aac <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	0013      	movs	r3, r2
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	f000 fc74 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 8004a64:	1e03      	subs	r3, r0, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e03c      	b.n	8004ae6 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	001a      	movs	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	05d2      	lsls	r2, r2, #23
 8004a7e:	0dd2      	lsrs	r2, r2, #23
 8004a80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	3302      	adds	r3, #2
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e007      	b.n	8004a9a <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3301      	adds	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2252      	movs	r2, #82	; 0x52
 8004a9e:	5a9b      	ldrh	r3, [r3, r2]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b299      	uxth	r1, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2252      	movs	r2, #82	; 0x52
 8004aaa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2252      	movs	r2, #82	; 0x52
 8004ab0:	5a9b      	ldrh	r3, [r3, r2]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1cc      	bne.n	8004a52 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	0013      	movs	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	f000 fc41 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e009      	b.n	8004ae6 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2270      	movs	r2, #112	; 0x70
 8004adc:	2100      	movs	r1, #0
 8004ade:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b008      	add	sp, #32
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b08e      	sub	sp, #56	; 0x38
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004af8:	231b      	movs	r3, #27
 8004afa:	2218      	movs	r2, #24
 8004afc:	4694      	mov	ip, r2
 8004afe:	44bc      	add	ip, r7
 8004b00:	4463      	add	r3, ip
 8004b02:	2210      	movs	r2, #16
 8004b04:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0a:	2313      	movs	r3, #19
 8004b0c:	2218      	movs	r2, #24
 8004b0e:	4694      	mov	ip, r2
 8004b10:	44bc      	add	ip, r7
 8004b12:	4463      	add	r3, ip
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4aca      	ldr	r2, [pc, #808]	; (8004e64 <UART_SetConfig+0x374>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	0019      	movs	r1, r3
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4ac5      	ldr	r2, [pc, #788]	; (8004e68 <UART_SetConfig+0x378>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4abf      	ldr	r2, [pc, #764]	; (8004e6c <UART_SetConfig+0x37c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	4abb      	ldr	r2, [pc, #748]	; (8004e70 <UART_SetConfig+0x380>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4ab7      	ldr	r2, [pc, #732]	; (8004e74 <UART_SetConfig+0x384>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d134      	bne.n	8004c06 <UART_SetConfig+0x116>
 8004b9c:	4bb6      	ldr	r3, [pc, #728]	; (8004e78 <UART_SetConfig+0x388>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d015      	beq.n	8004bd4 <UART_SetConfig+0xe4>
 8004ba8:	d304      	bcc.n	8004bb4 <UART_SetConfig+0xc4>
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d00a      	beq.n	8004bc4 <UART_SetConfig+0xd4>
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d018      	beq.n	8004be4 <UART_SetConfig+0xf4>
 8004bb2:	e01f      	b.n	8004bf4 <UART_SetConfig+0x104>
 8004bb4:	231b      	movs	r3, #27
 8004bb6:	2218      	movs	r2, #24
 8004bb8:	4694      	mov	ip, r2
 8004bba:	44bc      	add	ip, r7
 8004bbc:	4463      	add	r3, ip
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e0c5      	b.n	8004d50 <UART_SetConfig+0x260>
 8004bc4:	231b      	movs	r3, #27
 8004bc6:	2218      	movs	r2, #24
 8004bc8:	4694      	mov	ip, r2
 8004bca:	44bc      	add	ip, r7
 8004bcc:	4463      	add	r3, ip
 8004bce:	2202      	movs	r2, #2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e0bd      	b.n	8004d50 <UART_SetConfig+0x260>
 8004bd4:	231b      	movs	r3, #27
 8004bd6:	2218      	movs	r2, #24
 8004bd8:	4694      	mov	ip, r2
 8004bda:	44bc      	add	ip, r7
 8004bdc:	4463      	add	r3, ip
 8004bde:	2204      	movs	r2, #4
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e0b5      	b.n	8004d50 <UART_SetConfig+0x260>
 8004be4:	231b      	movs	r3, #27
 8004be6:	2218      	movs	r2, #24
 8004be8:	4694      	mov	ip, r2
 8004bea:	44bc      	add	ip, r7
 8004bec:	4463      	add	r3, ip
 8004bee:	2208      	movs	r2, #8
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e0ad      	b.n	8004d50 <UART_SetConfig+0x260>
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2218      	movs	r2, #24
 8004bf8:	4694      	mov	ip, r2
 8004bfa:	44bc      	add	ip, r7
 8004bfc:	4463      	add	r3, ip
 8004bfe:	2210      	movs	r2, #16
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	e0a4      	b.n	8004d50 <UART_SetConfig+0x260>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a9c      	ldr	r2, [pc, #624]	; (8004e7c <UART_SetConfig+0x38c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d137      	bne.n	8004c80 <UART_SetConfig+0x190>
 8004c10:	4b99      	ldr	r3, [pc, #612]	; (8004e78 <UART_SetConfig+0x388>)
 8004c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c14:	220c      	movs	r2, #12
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d018      	beq.n	8004c4e <UART_SetConfig+0x15e>
 8004c1c:	d802      	bhi.n	8004c24 <UART_SetConfig+0x134>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <UART_SetConfig+0x13e>
 8004c22:	e024      	b.n	8004c6e <UART_SetConfig+0x17e>
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d00a      	beq.n	8004c3e <UART_SetConfig+0x14e>
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d018      	beq.n	8004c5e <UART_SetConfig+0x16e>
 8004c2c:	e01f      	b.n	8004c6e <UART_SetConfig+0x17e>
 8004c2e:	231b      	movs	r3, #27
 8004c30:	2218      	movs	r2, #24
 8004c32:	4694      	mov	ip, r2
 8004c34:	44bc      	add	ip, r7
 8004c36:	4463      	add	r3, ip
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e088      	b.n	8004d50 <UART_SetConfig+0x260>
 8004c3e:	231b      	movs	r3, #27
 8004c40:	2218      	movs	r2, #24
 8004c42:	4694      	mov	ip, r2
 8004c44:	44bc      	add	ip, r7
 8004c46:	4463      	add	r3, ip
 8004c48:	2202      	movs	r2, #2
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e080      	b.n	8004d50 <UART_SetConfig+0x260>
 8004c4e:	231b      	movs	r3, #27
 8004c50:	2218      	movs	r2, #24
 8004c52:	4694      	mov	ip, r2
 8004c54:	44bc      	add	ip, r7
 8004c56:	4463      	add	r3, ip
 8004c58:	2204      	movs	r2, #4
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e078      	b.n	8004d50 <UART_SetConfig+0x260>
 8004c5e:	231b      	movs	r3, #27
 8004c60:	2218      	movs	r2, #24
 8004c62:	4694      	mov	ip, r2
 8004c64:	44bc      	add	ip, r7
 8004c66:	4463      	add	r3, ip
 8004c68:	2208      	movs	r2, #8
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e070      	b.n	8004d50 <UART_SetConfig+0x260>
 8004c6e:	231b      	movs	r3, #27
 8004c70:	2218      	movs	r2, #24
 8004c72:	4694      	mov	ip, r2
 8004c74:	44bc      	add	ip, r7
 8004c76:	4463      	add	r3, ip
 8004c78:	2210      	movs	r2, #16
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	e067      	b.n	8004d50 <UART_SetConfig+0x260>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a7e      	ldr	r2, [pc, #504]	; (8004e80 <UART_SetConfig+0x390>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d107      	bne.n	8004c9a <UART_SetConfig+0x1aa>
 8004c8a:	231b      	movs	r3, #27
 8004c8c:	2218      	movs	r2, #24
 8004c8e:	4694      	mov	ip, r2
 8004c90:	44bc      	add	ip, r7
 8004c92:	4463      	add	r3, ip
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e05a      	b.n	8004d50 <UART_SetConfig+0x260>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a79      	ldr	r2, [pc, #484]	; (8004e84 <UART_SetConfig+0x394>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d107      	bne.n	8004cb4 <UART_SetConfig+0x1c4>
 8004ca4:	231b      	movs	r3, #27
 8004ca6:	2218      	movs	r2, #24
 8004ca8:	4694      	mov	ip, r2
 8004caa:	44bc      	add	ip, r7
 8004cac:	4463      	add	r3, ip
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e04d      	b.n	8004d50 <UART_SetConfig+0x260>
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a6c      	ldr	r2, [pc, #432]	; (8004e6c <UART_SetConfig+0x37c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d141      	bne.n	8004d42 <UART_SetConfig+0x252>
 8004cbe:	4b6e      	ldr	r3, [pc, #440]	; (8004e78 <UART_SetConfig+0x388>)
 8004cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cc2:	23c0      	movs	r3, #192	; 0xc0
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	00d2      	lsls	r2, r2, #3
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01f      	beq.n	8004d10 <UART_SetConfig+0x220>
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	00d2      	lsls	r2, r2, #3
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d802      	bhi.n	8004cde <UART_SetConfig+0x1ee>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <UART_SetConfig+0x200>
 8004cdc:	e028      	b.n	8004d30 <UART_SetConfig+0x240>
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	0112      	lsls	r2, r2, #4
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00c      	beq.n	8004d00 <UART_SetConfig+0x210>
 8004ce6:	22c0      	movs	r2, #192	; 0xc0
 8004ce8:	0112      	lsls	r2, r2, #4
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d018      	beq.n	8004d20 <UART_SetConfig+0x230>
 8004cee:	e01f      	b.n	8004d30 <UART_SetConfig+0x240>
 8004cf0:	231b      	movs	r3, #27
 8004cf2:	2218      	movs	r2, #24
 8004cf4:	4694      	mov	ip, r2
 8004cf6:	44bc      	add	ip, r7
 8004cf8:	4463      	add	r3, ip
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e027      	b.n	8004d50 <UART_SetConfig+0x260>
 8004d00:	231b      	movs	r3, #27
 8004d02:	2218      	movs	r2, #24
 8004d04:	4694      	mov	ip, r2
 8004d06:	44bc      	add	ip, r7
 8004d08:	4463      	add	r3, ip
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e01f      	b.n	8004d50 <UART_SetConfig+0x260>
 8004d10:	231b      	movs	r3, #27
 8004d12:	2218      	movs	r2, #24
 8004d14:	4694      	mov	ip, r2
 8004d16:	44bc      	add	ip, r7
 8004d18:	4463      	add	r3, ip
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e017      	b.n	8004d50 <UART_SetConfig+0x260>
 8004d20:	231b      	movs	r3, #27
 8004d22:	2218      	movs	r2, #24
 8004d24:	4694      	mov	ip, r2
 8004d26:	44bc      	add	ip, r7
 8004d28:	4463      	add	r3, ip
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e00f      	b.n	8004d50 <UART_SetConfig+0x260>
 8004d30:	231b      	movs	r3, #27
 8004d32:	2218      	movs	r2, #24
 8004d34:	4694      	mov	ip, r2
 8004d36:	44bc      	add	ip, r7
 8004d38:	4463      	add	r3, ip
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	e006      	b.n	8004d50 <UART_SetConfig+0x260>
 8004d42:	231b      	movs	r3, #27
 8004d44:	2218      	movs	r2, #24
 8004d46:	4694      	mov	ip, r2
 8004d48:	44bc      	add	ip, r7
 8004d4a:	4463      	add	r3, ip
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a45      	ldr	r2, [pc, #276]	; (8004e6c <UART_SetConfig+0x37c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d000      	beq.n	8004d5c <UART_SetConfig+0x26c>
 8004d5a:	e09d      	b.n	8004e98 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d5c:	231b      	movs	r3, #27
 8004d5e:	2218      	movs	r2, #24
 8004d60:	4694      	mov	ip, r2
 8004d62:	44bc      	add	ip, r7
 8004d64:	4463      	add	r3, ip
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d00d      	beq.n	8004d88 <UART_SetConfig+0x298>
 8004d6c:	dc02      	bgt.n	8004d74 <UART_SetConfig+0x284>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <UART_SetConfig+0x28e>
 8004d72:	e01d      	b.n	8004db0 <UART_SetConfig+0x2c0>
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d012      	beq.n	8004d9e <UART_SetConfig+0x2ae>
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d015      	beq.n	8004da8 <UART_SetConfig+0x2b8>
 8004d7c:	e018      	b.n	8004db0 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004d7e:	f7fe fc97 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8004d82:	0003      	movs	r3, r0
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d86:	e01b      	b.n	8004dc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d88:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <UART_SetConfig+0x388>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d002      	beq.n	8004d98 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004d92:	4b3d      	ldr	r3, [pc, #244]	; (8004e88 <UART_SetConfig+0x398>)
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004d96:	e013      	b.n	8004dc0 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004d98:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <UART_SetConfig+0x39c>)
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d9c:	e010      	b.n	8004dc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004d9e:	f7fe fbf9 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8004da2:	0003      	movs	r3, r0
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004da6:	e00b      	b.n	8004dc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dae:	e007      	b.n	8004dc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004db0:	2313      	movs	r3, #19
 8004db2:	2218      	movs	r2, #24
 8004db4:	4694      	mov	ip, r2
 8004db6:	44bc      	add	ip, r7
 8004db8:	4463      	add	r3, ip
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
        break;
 8004dbe:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d100      	bne.n	8004dc8 <UART_SetConfig+0x2d8>
 8004dc6:	e1a6      	b.n	8005116 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	0013      	movs	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d305      	bcc.n	8004de4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d907      	bls.n	8004df4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8004de4:	2313      	movs	r3, #19
 8004de6:	2218      	movs	r2, #24
 8004de8:	4694      	mov	ip, r2
 8004dea:	44bc      	add	ip, r7
 8004dec:	4463      	add	r3, ip
 8004dee:	2201      	movs	r2, #1
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e190      	b.n	8005116 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	6939      	ldr	r1, [r7, #16]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	000b      	movs	r3, r1
 8004e02:	0e1b      	lsrs	r3, r3, #24
 8004e04:	0010      	movs	r0, r2
 8004e06:	0205      	lsls	r5, r0, #8
 8004e08:	431d      	orrs	r5, r3
 8004e0a:	000b      	movs	r3, r1
 8004e0c:	021c      	lsls	r4, r3, #8
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68b8      	ldr	r0, [r7, #8]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	1900      	adds	r0, r0, r4
 8004e20:	4169      	adcs	r1, r5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f7fb fb30 	bl	8000494 <__aeabi_uldivmod>
 8004e34:	0003      	movs	r3, r0
 8004e36:	000c      	movs	r4, r1
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <UART_SetConfig+0x3a0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d908      	bls.n	8004e54 <UART_SetConfig+0x364>
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <UART_SetConfig+0x3a4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d804      	bhi.n	8004e54 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	e160      	b.n	8005116 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8004e54:	2313      	movs	r3, #19
 8004e56:	2218      	movs	r2, #24
 8004e58:	4694      	mov	ip, r2
 8004e5a:	44bc      	add	ip, r7
 8004e5c:	4463      	add	r3, ip
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	e158      	b.n	8005116 <UART_SetConfig+0x626>
 8004e64:	efff69f3 	.word	0xefff69f3
 8004e68:	ffffcfff 	.word	0xffffcfff
 8004e6c:	40004800 	.word	0x40004800
 8004e70:	fffff4ff 	.word	0xfffff4ff
 8004e74:	40013800 	.word	0x40013800
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40004400 	.word	0x40004400
 8004e80:	40004c00 	.word	0x40004c00
 8004e84:	40005000 	.word	0x40005000
 8004e88:	003d0900 	.word	0x003d0900
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	000002ff 	.word	0x000002ff
 8004e94:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d000      	beq.n	8004ea6 <UART_SetConfig+0x3b6>
 8004ea4:	e0a9      	b.n	8004ffa <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8004ea6:	231b      	movs	r3, #27
 8004ea8:	2218      	movs	r2, #24
 8004eaa:	4694      	mov	ip, r2
 8004eac:	44bc      	add	ip, r7
 8004eae:	4463      	add	r3, ip
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d86d      	bhi.n	8004f92 <UART_SetConfig+0x4a2>
 8004eb6:	009a      	lsls	r2, r3, #2
 8004eb8:	4b9f      	ldr	r3, [pc, #636]	; (8005138 <UART_SetConfig+0x648>)
 8004eba:	18d3      	adds	r3, r2, r3
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ec0:	f7fe fbf6 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	005a      	lsls	r2, r3, #1
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	18d2      	adds	r2, r2, r3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	0010      	movs	r0, r2
 8004ed8:	f7fb f928 	bl	800012c <__udivsi3>
 8004edc:	0003      	movs	r3, r0
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ee2:	e05e      	b.n	8004fa2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004ee4:	f7fe fbfa 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	005a      	lsls	r2, r3, #1
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	18d2      	adds	r2, r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	0019      	movs	r1, r3
 8004efa:	0010      	movs	r0, r2
 8004efc:	f7fb f916 	bl	800012c <__udivsi3>
 8004f00:	0003      	movs	r3, r0
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f06:	e04c      	b.n	8004fa2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f08:	4b8c      	ldr	r3, [pc, #560]	; (800513c <UART_SetConfig+0x64c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	4a89      	ldr	r2, [pc, #548]	; (8005140 <UART_SetConfig+0x650>)
 8004f1a:	189a      	adds	r2, r3, r2
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	0019      	movs	r1, r3
 8004f22:	0010      	movs	r0, r2
 8004f24:	f7fb f902 	bl	800012c <__udivsi3>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004f2e:	e038      	b.n	8004fa2 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	4a83      	ldr	r2, [pc, #524]	; (8005144 <UART_SetConfig+0x654>)
 8004f38:	189a      	adds	r2, r3, r2
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	0019      	movs	r1, r3
 8004f40:	0010      	movs	r0, r2
 8004f42:	f7fb f8f3 	bl	800012c <__udivsi3>
 8004f46:	0003      	movs	r3, r0
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f4c:	e029      	b.n	8004fa2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f4e:	f7fe fb21 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8004f52:	0003      	movs	r3, r0
 8004f54:	005a      	lsls	r2, r3, #1
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	18d2      	adds	r2, r2, r3
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	0019      	movs	r1, r3
 8004f64:	0010      	movs	r0, r2
 8004f66:	f7fb f8e1 	bl	800012c <__udivsi3>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f70:	e017      	b.n	8004fa2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	0252      	lsls	r2, r2, #9
 8004f7c:	189a      	adds	r2, r3, r2
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	0019      	movs	r1, r3
 8004f84:	0010      	movs	r0, r2
 8004f86:	f7fb f8d1 	bl	800012c <__udivsi3>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f90:	e007      	b.n	8004fa2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004f92:	2313      	movs	r3, #19
 8004f94:	2218      	movs	r2, #24
 8004f96:	4694      	mov	ip, r2
 8004f98:	44bc      	add	ip, r7
 8004f9a:	4463      	add	r3, ip
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
        break;
 8004fa0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	2b0f      	cmp	r3, #15
 8004fa6:	d920      	bls.n	8004fea <UART_SetConfig+0x4fa>
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	4a67      	ldr	r2, [pc, #412]	; (8005148 <UART_SetConfig+0x658>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d81c      	bhi.n	8004fea <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	200a      	movs	r0, #10
 8004fb6:	2418      	movs	r4, #24
 8004fb8:	193b      	adds	r3, r7, r4
 8004fba:	181b      	adds	r3, r3, r0
 8004fbc:	210f      	movs	r1, #15
 8004fbe:	438a      	bics	r2, r1
 8004fc0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b299      	uxth	r1, r3
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	181b      	adds	r3, r3, r0
 8004fd2:	193a      	adds	r2, r7, r4
 8004fd4:	1812      	adds	r2, r2, r0
 8004fd6:	8812      	ldrh	r2, [r2, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	193a      	adds	r2, r7, r4
 8004fe2:	1812      	adds	r2, r2, r0
 8004fe4:	8812      	ldrh	r2, [r2, #0]
 8004fe6:	60da      	str	r2, [r3, #12]
 8004fe8:	e095      	b.n	8005116 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8004fea:	2313      	movs	r3, #19
 8004fec:	2218      	movs	r2, #24
 8004fee:	4694      	mov	ip, r2
 8004ff0:	44bc      	add	ip, r7
 8004ff2:	4463      	add	r3, ip
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e08d      	b.n	8005116 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8004ffa:	231b      	movs	r3, #27
 8004ffc:	2218      	movs	r2, #24
 8004ffe:	4694      	mov	ip, r2
 8005000:	44bc      	add	ip, r7
 8005002:	4463      	add	r3, ip
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b08      	cmp	r3, #8
 8005008:	d86a      	bhi.n	80050e0 <UART_SetConfig+0x5f0>
 800500a:	009a      	lsls	r2, r3, #2
 800500c:	4b4f      	ldr	r3, [pc, #316]	; (800514c <UART_SetConfig+0x65c>)
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005014:	f7fe fb4c 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8005018:	0002      	movs	r2, r0
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	18d2      	adds	r2, r2, r3
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	0019      	movs	r1, r3
 8005028:	0010      	movs	r0, r2
 800502a:	f7fb f87f 	bl	800012c <__udivsi3>
 800502e:	0003      	movs	r3, r0
 8005030:	b29b      	uxth	r3, r3
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005034:	e05c      	b.n	80050f0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005036:	f7fe fb51 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 800503a:	0002      	movs	r2, r0
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	18d2      	adds	r2, r2, r3
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	0019      	movs	r1, r3
 800504a:	0010      	movs	r0, r2
 800504c:	f7fb f86e 	bl	800012c <__udivsi3>
 8005050:	0003      	movs	r3, r0
 8005052:	b29b      	uxth	r3, r3
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005056:	e04b      	b.n	80050f0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005058:	4b38      	ldr	r3, [pc, #224]	; (800513c <UART_SetConfig+0x64c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2210      	movs	r2, #16
 800505e:	4013      	ands	r3, r2
 8005060:	d00e      	beq.n	8005080 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	4a39      	ldr	r2, [pc, #228]	; (8005150 <UART_SetConfig+0x660>)
 800506a:	189a      	adds	r2, r3, r2
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	0019      	movs	r1, r3
 8005072:	0010      	movs	r0, r2
 8005074:	f7fb f85a 	bl	800012c <__udivsi3>
 8005078:	0003      	movs	r3, r0
 800507a:	b29b      	uxth	r3, r3
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800507e:	e037      	b.n	80050f0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	4a33      	ldr	r2, [pc, #204]	; (8005154 <UART_SetConfig+0x664>)
 8005088:	189a      	adds	r2, r3, r2
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	0019      	movs	r1, r3
 8005090:	0010      	movs	r0, r2
 8005092:	f7fb f84b 	bl	800012c <__udivsi3>
 8005096:	0003      	movs	r3, r0
 8005098:	b29b      	uxth	r3, r3
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800509c:	e028      	b.n	80050f0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800509e:	f7fe fa79 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 80050a2:	0002      	movs	r2, r0
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	18d2      	adds	r2, r2, r3
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	0019      	movs	r1, r3
 80050b2:	0010      	movs	r0, r2
 80050b4:	f7fb f83a 	bl	800012c <__udivsi3>
 80050b8:	0003      	movs	r3, r0
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050be:	e017      	b.n	80050f0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	0212      	lsls	r2, r2, #8
 80050ca:	189a      	adds	r2, r3, r2
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	0019      	movs	r1, r3
 80050d2:	0010      	movs	r0, r2
 80050d4:	f7fb f82a 	bl	800012c <__udivsi3>
 80050d8:	0003      	movs	r3, r0
 80050da:	b29b      	uxth	r3, r3
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050de:	e007      	b.n	80050f0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80050e0:	2313      	movs	r3, #19
 80050e2:	2218      	movs	r2, #24
 80050e4:	4694      	mov	ip, r2
 80050e6:	44bc      	add	ip, r7
 80050e8:	4463      	add	r3, ip
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
        break;
 80050ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	2b0f      	cmp	r3, #15
 80050f4:	d908      	bls.n	8005108 <UART_SetConfig+0x618>
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <UART_SetConfig+0x658>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d804      	bhi.n	8005108 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	e006      	b.n	8005116 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8005108:	2313      	movs	r3, #19
 800510a:	2218      	movs	r2, #24
 800510c:	4694      	mov	ip, r2
 800510e:	44bc      	add	ip, r7
 8005110:	4463      	add	r3, ip
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2200      	movs	r2, #0
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2200      	movs	r2, #0
 8005120:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005122:	2313      	movs	r3, #19
 8005124:	2218      	movs	r2, #24
 8005126:	4694      	mov	ip, r2
 8005128:	44bc      	add	ip, r7
 800512a:	4463      	add	r3, ip
 800512c:	781b      	ldrb	r3, [r3, #0]
}
 800512e:	0018      	movs	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	b00e      	add	sp, #56	; 0x38
 8005134:	bdb0      	pop	{r4, r5, r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	0800a8bc 	.word	0x0800a8bc
 800513c:	40021000 	.word	0x40021000
 8005140:	007a1200 	.word	0x007a1200
 8005144:	01e84800 	.word	0x01e84800
 8005148:	0000ffff 	.word	0x0000ffff
 800514c:	0800a8e0 	.word	0x0800a8e0
 8005150:	003d0900 	.word	0x003d0900
 8005154:	00f42400 	.word	0x00f42400

08005158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2201      	movs	r2, #1
 8005166:	4013      	ands	r3, r2
 8005168:	d00b      	beq.n	8005182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a4a      	ldr	r2, [pc, #296]	; (800529c <UART_AdvFeatureConfig+0x144>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2202      	movs	r2, #2
 8005188:	4013      	ands	r3, r2
 800518a:	d00b      	beq.n	80051a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4a43      	ldr	r2, [pc, #268]	; (80052a0 <UART_AdvFeatureConfig+0x148>)
 8005194:	4013      	ands	r3, r2
 8005196:	0019      	movs	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2204      	movs	r2, #4
 80051aa:	4013      	ands	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4a3b      	ldr	r2, [pc, #236]	; (80052a4 <UART_AdvFeatureConfig+0x14c>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2208      	movs	r2, #8
 80051cc:	4013      	ands	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <UART_AdvFeatureConfig+0x150>)
 80051d8:	4013      	ands	r3, r2
 80051da:	0019      	movs	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2210      	movs	r2, #16
 80051ee:	4013      	ands	r3, r2
 80051f0:	d00b      	beq.n	800520a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <UART_AdvFeatureConfig+0x154>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2220      	movs	r2, #32
 8005210:	4013      	ands	r3, r2
 8005212:	d00b      	beq.n	800522c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <UART_AdvFeatureConfig+0x158>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	4013      	ands	r3, r2
 8005234:	d01d      	beq.n	8005272 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <UART_AdvFeatureConfig+0x15c>)
 800523e:	4013      	ands	r3, r2
 8005240:	0019      	movs	r1, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	035b      	lsls	r3, r3, #13
 8005256:	429a      	cmp	r2, r3
 8005258:	d10b      	bne.n	8005272 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <UART_AdvFeatureConfig+0x160>)
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	4013      	ands	r3, r2
 800527a:	d00b      	beq.n	8005294 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <UART_AdvFeatureConfig+0x164>)
 8005284:	4013      	ands	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  }
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	46bd      	mov	sp, r7
 8005298:	b002      	add	sp, #8
 800529a:	bd80      	pop	{r7, pc}
 800529c:	fffdffff 	.word	0xfffdffff
 80052a0:	fffeffff 	.word	0xfffeffff
 80052a4:	fffbffff 	.word	0xfffbffff
 80052a8:	ffff7fff 	.word	0xffff7fff
 80052ac:	ffffefff 	.word	0xffffefff
 80052b0:	ffffdfff 	.word	0xffffdfff
 80052b4:	ffefffff 	.word	0xffefffff
 80052b8:	ff9fffff 	.word	0xff9fffff
 80052bc:	fff7ffff 	.word	0xfff7ffff

080052c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052ce:	f7fc ffff 	bl	80022d0 <HAL_GetTick>
 80052d2:	0003      	movs	r3, r0
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	4013      	ands	r3, r2
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d10d      	bne.n	8005300 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	0399      	lsls	r1, r3, #14
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4b16      	ldr	r3, [pc, #88]	; (8005348 <UART_CheckIdleState+0x88>)
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	0013      	movs	r3, r2
 80052f2:	2200      	movs	r2, #0
 80052f4:	f000 f82a 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d001      	beq.n	8005300 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e01f      	b.n	8005340 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2204      	movs	r2, #4
 8005308:	4013      	ands	r3, r2
 800530a:	2b04      	cmp	r3, #4
 800530c:	d10d      	bne.n	800532a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	03d9      	lsls	r1, r3, #15
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <UART_CheckIdleState+0x88>)
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	0013      	movs	r3, r2
 800531c:	2200      	movs	r2, #0
 800531e:	f000 f815 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d001      	beq.n	800532a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e00a      	b.n	8005340 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2270      	movs	r2, #112	; 0x70
 800533a:	2100      	movs	r1, #0
 800533c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bd80      	pop	{r7, pc}
 8005348:	01ffffff 	.word	0x01ffffff

0800534c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535c:	e029      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	3301      	adds	r3, #1
 8005362:	d026      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005364:	f7fc ffb4 	bl	80022d0 <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d302      	bcc.n	800537a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d11b      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4915      	ldr	r1, [pc, #84]	; (80053dc <UART_WaitOnFlagUntilTimeout+0x90>)
 8005386:	400a      	ands	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2101      	movs	r1, #1
 8005396:	438a      	bics	r2, r1
 8005398:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2270      	movs	r2, #112	; 0x70
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e00f      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	425a      	negs	r2, r3
 80053c2:	4153      	adcs	r3, r2
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	001a      	movs	r2, r3
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d0c6      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	fffffe5f 	.word	0xfffffe5f

080053e0 <varioRun>:
#include "Peripherals/Tone.h"

#define EXTINCTION_TIME 3000

void varioRun(void)
{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
	vario();
 80053e6:	f000 f95d 	bl	80056a4 <vario>

	uint16_t btn = getButtons();
 80053ea:	1dbc      	adds	r4, r7, #6
 80053ec:	f000 ffdc 	bl	80063a8 <getButtons>
 80053f0:	0003      	movs	r3, r0
 80053f2:	8023      	strh	r3, [r4, #0]

	if( btn!= 0)
 80053f4:	1dbb      	adds	r3, r7, #6
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <varioRun+0x26>
	{
		menu(btn);
 80053fc:	1dbb      	adds	r3, r7, #6
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	0018      	movs	r0, r3
 8005402:	f000 f805 	bl	8005410 <menu>
	}

}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b003      	add	sp, #12
 800540c:	bd90      	pop	{r4, r7, pc}
	...

08005410 <menu>:

void menu(uint16_t _btn)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	0002      	movs	r2, r0
 8005418:	1dbb      	adds	r3, r7, #6
 800541a:	801a      	strh	r2, [r3, #0]
	static uint8_t volume = 1;

	switch (_btn)
 800541c:	1dbb      	adds	r3, r7, #6
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	00d2      	lsls	r2, r2, #3
 8005424:	4293      	cmp	r3, r2
 8005426:	d010      	beq.n	800544a <menu+0x3a>
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <menu+0x30>
 8005430:	2280      	movs	r2, #128	; 0x80
 8005432:	0052      	lsls	r2, r2, #1
 8005434:	4293      	cmp	r3, r2
 8005436:	d000      	beq.n	800543a <menu+0x2a>
		break;
	case BTN_DOWN_Pin:
		volumeDown(&volume);
		break;
	default:
		break;
 8005438:	e00c      	b.n	8005454 <menu+0x44>
		selectAction();
 800543a:	f000 f811 	bl	8005460 <selectAction>
		break;
 800543e:	e009      	b.n	8005454 <menu+0x44>
		volumeUp(&volume);
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <menu+0x4c>)
 8005442:	0018      	movs	r0, r3
 8005444:	f000 f888 	bl	8005558 <volumeUp>
		break;
 8005448:	e004      	b.n	8005454 <menu+0x44>
		volumeDown(&volume);
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <menu+0x4c>)
 800544c:	0018      	movs	r0, r3
 800544e:	f000 f8b0 	bl	80055b2 <volumeDown>
		break;
 8005452:	46c0      	nop			; (mov r8, r8)
	}
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000000 	.word	0x20000000

08005460 <selectAction>:

void selectAction(void)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
	uint32_t start_T = HAL_GetTick();
 8005466:	f7fc ff33 	bl	80022d0 <HAL_GetTick>
 800546a:	0003      	movs	r3, r0
 800546c:	607b      	str	r3, [r7, #4]
	uint16_t btn = BTN_PWR_ON_OFF_Pin;
 800546e:	1cbb      	adds	r3, r7, #2
 8005470:	2280      	movs	r2, #128	; 0x80
 8005472:	0052      	lsls	r2, r2, #1
 8005474:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_ON);
 8005476:	4b36      	ldr	r3, [pc, #216]	; (8005550 <selectAction+0xf0>)
 8005478:	2200      	movs	r2, #0
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	0018      	movs	r0, r3
 800547e:	f7fd fbb6 	bl	8002bee <HAL_GPIO_WritePin>

	while(btn == BTN_PWR_ON_OFF_Pin ||
 8005482:	e049      	b.n	8005518 <selectAction+0xb8>
			btn == (BTN_PWR_ON_OFF_Pin + BTN_UP_Pin) ||
			btn == (BTN_PWR_ON_OFF_Pin + BTN_DOWN_Pin))
	{
		switch (btn)
 8005484:	1cbb      	adds	r3, r7, #2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	22a0      	movs	r2, #160	; 0xa0
 800548a:	00d2      	lsls	r2, r2, #3
 800548c:	4293      	cmp	r3, r2
 800548e:	d036      	beq.n	80054fe <selectAction+0x9e>
 8005490:	2290      	movs	r2, #144	; 0x90
 8005492:	0112      	lsls	r2, r2, #4
 8005494:	4293      	cmp	r3, r2
 8005496:	d02b      	beq.n	80054f0 <selectAction+0x90>
 8005498:	2280      	movs	r2, #128	; 0x80
 800549a:	0052      	lsls	r2, r2, #1
 800549c:	4293      	cmp	r3, r2
 800549e:	d000      	beq.n	80054a2 <selectAction+0x42>
		case BTN_PWR_ON_OFF_Pin + BTN_DOWN_Pin :
		sensitivityDown();
		start_T = HAL_GetTick();
		break;
		default:
			break;
 80054a0:	e035      	b.n	800550e <selectAction+0xae>
			if((HAL_GetTick()-start_T) >= EXTINCTION_TIME)
 80054a2:	f7fc ff15 	bl	80022d0 <HAL_GetTick>
 80054a6:	0002      	movs	r2, r0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	4a29      	ldr	r2, [pc, #164]	; (8005554 <selectAction+0xf4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d92c      	bls.n	800550c <selectAction+0xac>
				while(getButtons() == BTN_PWR_ON_OFF_Pin)
 80054b2:	e007      	b.n	80054c4 <selectAction+0x64>
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80054b4:	4b26      	ldr	r3, [pc, #152]	; (8005550 <selectAction+0xf0>)
 80054b6:	2180      	movs	r1, #128	; 0x80
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7fd fbb5 	bl	8002c28 <HAL_GPIO_TogglePin>
					HAL_Delay(100);
 80054be:	2064      	movs	r0, #100	; 0x64
 80054c0:	f7fc ff10 	bl	80022e4 <HAL_Delay>
				while(getButtons() == BTN_PWR_ON_OFF_Pin)
 80054c4:	f000 ff70 	bl	80063a8 <getButtons>
 80054c8:	0003      	movs	r3, r0
 80054ca:	001a      	movs	r2, r3
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d0ef      	beq.n	80054b4 <selectAction+0x54>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_OFF);
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <selectAction+0xf0>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	2180      	movs	r1, #128	; 0x80
 80054da:	0018      	movs	r0, r3
 80054dc:	f7fd fb87 	bl	8002bee <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 80054e0:	23fa      	movs	r3, #250	; 0xfa
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fc fefd 	bl	80022e4 <HAL_Delay>
				powerOff();
 80054ea:	f000 fe71 	bl	80061d0 <powerOff>
			break;
 80054ee:	e00d      	b.n	800550c <selectAction+0xac>
		sensitivityUp();
 80054f0:	f000 f88c 	bl	800560c <sensitivityUp>
		start_T = HAL_GetTick();
 80054f4:	f7fc feec 	bl	80022d0 <HAL_GetTick>
 80054f8:	0003      	movs	r3, r0
 80054fa:	607b      	str	r3, [r7, #4]
		break;
 80054fc:	e007      	b.n	800550e <selectAction+0xae>
		sensitivityDown();
 80054fe:	f000 f88a 	bl	8005616 <sensitivityDown>
		start_T = HAL_GetTick();
 8005502:	f7fc fee5 	bl	80022d0 <HAL_GetTick>
 8005506:	0003      	movs	r3, r0
 8005508:	607b      	str	r3, [r7, #4]
		break;
 800550a:	e000      	b.n	800550e <selectAction+0xae>
			break;
 800550c:	46c0      	nop			; (mov r8, r8)
		}

		btn = getButtons();
 800550e:	1cbc      	adds	r4, r7, #2
 8005510:	f000 ff4a 	bl	80063a8 <getButtons>
 8005514:	0003      	movs	r3, r0
 8005516:	8023      	strh	r3, [r4, #0]
	while(btn == BTN_PWR_ON_OFF_Pin ||
 8005518:	1cbb      	adds	r3, r7, #2
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	429a      	cmp	r2, r3
 8005522:	d0af      	beq.n	8005484 <selectAction+0x24>
 8005524:	1cbb      	adds	r3, r7, #2
 8005526:	881a      	ldrh	r2, [r3, #0]
 8005528:	2390      	movs	r3, #144	; 0x90
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	429a      	cmp	r2, r3
 800552e:	d0a9      	beq.n	8005484 <selectAction+0x24>
			btn == (BTN_PWR_ON_OFF_Pin + BTN_UP_Pin) ||
 8005530:	1cbb      	adds	r3, r7, #2
 8005532:	881a      	ldrh	r2, [r3, #0]
 8005534:	23a0      	movs	r3, #160	; 0xa0
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	429a      	cmp	r2, r3
 800553a:	d0a3      	beq.n	8005484 <selectAction+0x24>
	}

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_OFF);
 800553c:	4b04      	ldr	r3, [pc, #16]	; (8005550 <selectAction+0xf0>)
 800553e:	2201      	movs	r2, #1
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	0018      	movs	r0, r3
 8005544:	f7fd fb53 	bl	8002bee <HAL_GPIO_WritePin>
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b003      	add	sp, #12
 800554e:	bd90      	pop	{r4, r7, pc}
 8005550:	50000400 	.word	0x50000400
 8005554:	00000bb7 	.word	0x00000bb7

08005558 <volumeUp>:

void volumeUp(uint8_t *_vol)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	if(*_vol < VOLUME_HIGH)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d813      	bhi.n	8005590 <volumeUp+0x38>
	{
		*_vol+=1;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	701a      	strb	r2, [r3, #0]
		setToneVolume(*_vol);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	0018      	movs	r0, r3
 800557a:	f000 feaf 	bl	80062dc <setToneVolume>
		tone(NOTE_A4, 100, *_vol);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	23dc      	movs	r3, #220	; 0xdc
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2164      	movs	r1, #100	; 0x64
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fe2e 	bl	80061ea <tone>
 800558e:	e007      	b.n	80055a0 <volumeUp+0x48>
	}
	else
	{
		tone(NOTE_A3, 300, *_vol);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	2396      	movs	r3, #150	; 0x96
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	0019      	movs	r1, r3
 800559a:	20dc      	movs	r0, #220	; 0xdc
 800559c:	f000 fe25 	bl	80061ea <tone>
	}

	HAL_Delay(500);
 80055a0:	23fa      	movs	r3, #250	; 0xfa
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	0018      	movs	r0, r3
 80055a6:	f7fc fe9d 	bl	80022e4 <HAL_Delay>
}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b002      	add	sp, #8
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <volumeDown>:


void volumeDown(uint8_t *_vol)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
	if(*_vol > VOLUME_LOW)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d913      	bls.n	80055ea <volumeDown+0x38>
	{
		*_vol-=1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	701a      	strb	r2, [r3, #0]
		setToneVolume(*_vol);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	0018      	movs	r0, r3
 80055d4:	f000 fe82 	bl	80062dc <setToneVolume>
		tone(NOTE_A4, 100, *_vol);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	23dc      	movs	r3, #220	; 0xdc
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	2164      	movs	r1, #100	; 0x64
 80055e2:	0018      	movs	r0, r3
 80055e4:	f000 fe01 	bl	80061ea <tone>
 80055e8:	e007      	b.n	80055fa <volumeDown+0x48>
	}
	else
	{
		tone(NOTE_A3, 300, *_vol);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	2396      	movs	r3, #150	; 0x96
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	0019      	movs	r1, r3
 80055f4:	20dc      	movs	r0, #220	; 0xdc
 80055f6:	f000 fdf8 	bl	80061ea <tone>
	}

	HAL_Delay(500);
 80055fa:	23fa      	movs	r3, #250	; 0xfa
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	0018      	movs	r0, r3
 8005600:	f7fc fe70 	bl	80022e4 <HAL_Delay>
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}

0800560c <sensitivityUp>:


void sensitivityUp()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0

}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <sensitivityDown>:

void sensitivityDown()
{
 8005616:	b580      	push	{r7, lr}
 8005618:	af00      	add	r7, sp, #0

}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <welcome>:
#define STEP_SENS     10    // Step to set threshold

double data[NB_OF_SAMPLE] = {0};

void welcome(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
	 * - One Stop Bit
	 * - Odd parity
	 * - BaudRate = 115200 baud
	 * - Flow control: None */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_ON);
 8005624:	4b15      	ldr	r3, [pc, #84]	; (800567c <welcome+0x5c>)
 8005626:	2200      	movs	r2, #0
 8005628:	2180      	movs	r1, #128	; 0x80
 800562a:	0018      	movs	r0, r3
 800562c:	f7fd fadf 	bl	8002bee <HAL_GPIO_WritePin>

	printf("\n\r*** Vario *** \n\r");
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <welcome+0x60>)
 8005632:	0018      	movs	r0, r3
 8005634:	f002 f81a 	bl	800766c <iprintf>
	printf("Version : 0.1\n");
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <welcome+0x64>)
 800563a:	0018      	movs	r0, r3
 800563c:	f002 f890 	bl	8007760 <puts>
	printf("Date    : 27/01/2019\n");
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <welcome+0x68>)
 8005642:	0018      	movs	r0, r3
 8005644:	f002 f88c 	bl	8007760 <puts>
	printf("uC      : STM32L071KBU\n");
 8005648:	4b10      	ldr	r3, [pc, #64]	; (800568c <welcome+0x6c>)
 800564a:	0018      	movs	r0, r3
 800564c:	f002 f888 	bl	8007760 <puts>
	printf("Sensor  : MS5607\n");
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <welcome+0x70>)
 8005652:	0018      	movs	r0, r3
 8005654:	f002 f884 	bl	8007760 <puts>
	printf("\r__Program START !__ \n\r");
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <welcome+0x74>)
 800565a:	0018      	movs	r0, r3
 800565c:	f002 f806 	bl	800766c <iprintf>
	MS56xx_Init();
 8005660:	f000 f892 	bl	8005788 <MS56xx_Init>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_OFF);
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <welcome+0x5c>)
 8005666:	2201      	movs	r2, #1
 8005668:	2180      	movs	r1, #128	; 0x80
 800566a:	0018      	movs	r0, r3
 800566c:	f7fd fabf 	bl	8002bee <HAL_GPIO_WritePin>

	playWelcome();
 8005670:	f000 f812 	bl	8005698 <playWelcome>
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	50000400 	.word	0x50000400
 8005680:	0800a658 	.word	0x0800a658
 8005684:	0800a66c 	.word	0x0800a66c
 8005688:	0800a67c 	.word	0x0800a67c
 800568c:	0800a694 	.word	0x0800a694
 8005690:	0800a6ac 	.word	0x0800a6ac
 8005694:	0800a6c0 	.word	0x0800a6c0

08005698 <playWelcome>:

void playWelcome(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0

}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <vario>:
//	// Play tone depending variation.
//	return 1;//bipSound(toneFreq, ddsAcc);
//}

uint8_t vario(void)
{
 80056a4:	b5b0      	push	{r4, r5, r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
	static uint8_t sample = 0;

	//static uint32_t start = 0;

	if(sample < NB_OF_SAMPLE)
 80056aa:	4b33      	ldr	r3, [pc, #204]	; (8005778 <vario+0xd4>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b09      	cmp	r3, #9
 80056b0:	d814      	bhi.n	80056dc <vario+0x38>
	{
		data[sample] = MS56xx_getPressure(OSR_STANDARD, OSR_LOW_POWER);
 80056b2:	4b31      	ldr	r3, [pc, #196]	; (8005778 <vario+0xd4>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	001d      	movs	r5, r3
 80056b8:	2102      	movs	r1, #2
 80056ba:	2004      	movs	r0, #4
 80056bc:	f000 fac0 	bl	8005c40 <MS56xx_getPressure>
 80056c0:	0003      	movs	r3, r0
 80056c2:	000c      	movs	r4, r1
 80056c4:	492d      	ldr	r1, [pc, #180]	; (800577c <vario+0xd8>)
 80056c6:	00ea      	lsls	r2, r5, #3
 80056c8:	188a      	adds	r2, r1, r2
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	6054      	str	r4, [r2, #4]
		sample++;
 80056ce:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <vario+0xd4>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	3301      	adds	r3, #1
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <vario+0xd4>)
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e03f      	b.n	800575c <vario+0xb8>
	}
	else
	{
		double value = 0.00;
 80056dc:	2300      	movs	r3, #0
 80056de:	2400      	movs	r4, #0
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	607c      	str	r4, [r7, #4]
		double valueTmp = 0.00;
 80056e4:	2300      	movs	r3, #0
 80056e6:	2400      	movs	r4, #0
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	617c      	str	r4, [r7, #20]
		sample = 0;
 80056ec:	4b22      	ldr	r3, [pc, #136]	; (8005778 <vario+0xd4>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]

		for(uint8_t i; i<NB_OF_SAMPLE; i++)
 80056f2:	e016      	b.n	8005722 <vario+0x7e>
		{
			valueTmp+=data[i];
 80056f4:	250f      	movs	r5, #15
 80056f6:	197b      	adds	r3, r7, r5
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <vario+0xd8>)
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	18d3      	adds	r3, r2, r3
 8005700:	685c      	ldr	r4, [r3, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	001a      	movs	r2, r3
 8005706:	0023      	movs	r3, r4
 8005708:	6938      	ldr	r0, [r7, #16]
 800570a:	6979      	ldr	r1, [r7, #20]
 800570c:	f7fa ffc2 	bl	8000694 <__aeabi_dadd>
 8005710:	0003      	movs	r3, r0
 8005712:	000c      	movs	r4, r1
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	617c      	str	r4, [r7, #20]
		for(uint8_t i; i<NB_OF_SAMPLE; i++)
 8005718:	197b      	adds	r3, r7, r5
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	197b      	adds	r3, r7, r5
 800571e:	3201      	adds	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	230f      	movs	r3, #15
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b09      	cmp	r3, #9
 800572a:	d9e3      	bls.n	80056f4 <vario+0x50>
		}
		value = valueTmp / NB_OF_SAMPLE;
 800572c:	2200      	movs	r2, #0
 800572e:	4b14      	ldr	r3, [pc, #80]	; (8005780 <vario+0xdc>)
 8005730:	6938      	ldr	r0, [r7, #16]
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	f7fb faca 	bl	8000ccc <__aeabi_ddiv>
 8005738:	0003      	movs	r3, r0
 800573a:	000c      	movs	r4, r1
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	607c      	str	r4, [r7, #4]


		//value = filter(data);

		 printf("%.2f\n",ms56xx_getAltitude(value));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	687c      	ldr	r4, [r7, #4]
 8005744:	0018      	movs	r0, r3
 8005746:	0021      	movs	r1, r4
 8005748:	f000 fcf6 	bl	8006138 <ms56xx_getAltitude>
 800574c:	0003      	movs	r3, r0
 800574e:	000c      	movs	r4, r1
 8005750:	490c      	ldr	r1, [pc, #48]	; (8005784 <vario+0xe0>)
 8005752:	001a      	movs	r2, r3
 8005754:	0023      	movs	r3, r4
 8005756:	0008      	movs	r0, r1
 8005758:	f001 ff88 	bl	800766c <iprintf>
	}

	return data[1];
 800575c:	4b07      	ldr	r3, [pc, #28]	; (800577c <vario+0xd8>)
 800575e:	68dc      	ldr	r4, [r3, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	0018      	movs	r0, r3
 8005764:	0021      	movs	r1, r4
 8005766:	f7fa feb5 	bl	80004d4 <__aeabi_d2uiz>
 800576a:	0003      	movs	r3, r0
 800576c:	b2db      	uxtb	r3, r3
}
 800576e:	0018      	movs	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	b006      	add	sp, #24
 8005774:	bdb0      	pop	{r4, r5, r7, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	20000250 	.word	0x20000250
 800577c:	20000200 	.word	0x20000200
 8005780:	40240000 	.word	0x40240000
 8005784:	0800a6d8 	.word	0x0800a6d8

08005788 <MS56xx_Init>:
 * @brief  Initialization sequence
 * @param  None
 * @retval None
 */
void MS56xx_Init()
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
	double pressure = 0.00;
 800578e:	2300      	movs	r3, #0
 8005790:	2400      	movs	r4, #0
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	60fc      	str	r4, [r7, #12]
	double temperature = 0.00;
 8005796:	2300      	movs	r3, #0
 8005798:	2400      	movs	r4, #0
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	607c      	str	r4, [r7, #4]

	printf("\nSensor check : \n");
 800579e:	4b48      	ldr	r3, [pc, #288]	; (80058c0 <MS56xx_Init+0x138>)
 80057a0:	0018      	movs	r0, r3
 80057a2:	f001 ffdd 	bl	8007760 <puts>

	MS56xx_Reset();
 80057a6:	f000 f8ab 	bl	8005900 <MS56xx_Reset>

	HAL_Delay(RELEAOD);
 80057aa:	2003      	movs	r0, #3
 80057ac:	f7fc fd9a 	bl	80022e4 <HAL_Delay>

	MS56xx_ReadPROM();
 80057b0:	f000 f8c8 	bl	8005944 <MS56xx_ReadPROM>

	printf("CRC : 0x%x\n", MS56xx_crc4(_coefficientFactory));
 80057b4:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <MS56xx_Init+0x13c>)
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f928 	bl	8005a0c <MS56xx_crc4>
 80057bc:	0003      	movs	r3, r0
 80057be:	001a      	movs	r2, r3
 80057c0:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <MS56xx_Init+0x140>)
 80057c2:	0011      	movs	r1, r2
 80057c4:	0018      	movs	r0, r3
 80057c6:	f001 ff51 	bl	800766c <iprintf>

	pressure = MS56xx_getPressure(OSR_HIGH_RES, OSR_HIGH_RES);
 80057ca:	2106      	movs	r1, #6
 80057cc:	2006      	movs	r0, #6
 80057ce:	f000 fa37 	bl	8005c40 <MS56xx_getPressure>
 80057d2:	0003      	movs	r3, r0
 80057d4:	000c      	movs	r4, r1
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	60fc      	str	r4, [r7, #12]
	temperature = MS56xx_getTemperature();
 80057da:	f000 fc93 	bl	8006104 <MS56xx_getTemperature>
 80057de:	0003      	movs	r3, r0
 80057e0:	000c      	movs	r4, r1
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	607c      	str	r4, [r7, #4]

	printf("Pressure    : %.2f mBar\n",pressure);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68fc      	ldr	r4, [r7, #12]
 80057ea:	4938      	ldr	r1, [pc, #224]	; (80058cc <MS56xx_Init+0x144>)
 80057ec:	001a      	movs	r2, r3
 80057ee:	0023      	movs	r3, r4
 80057f0:	0008      	movs	r0, r1
 80057f2:	f001 ff3b 	bl	800766c <iprintf>
	printf("Temperature : %.2f C\n"    ,temperature);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	687c      	ldr	r4, [r7, #4]
 80057fa:	4935      	ldr	r1, [pc, #212]	; (80058d0 <MS56xx_Init+0x148>)
 80057fc:	001a      	movs	r2, r3
 80057fe:	0023      	movs	r3, r4
 8005800:	0008      	movs	r0, r1
 8005802:	f001 ff33 	bl	800766c <iprintf>

	if(pressure < 10.00 || pressure > 1200.00 || temperature < -40.00 || temperature > 85.00)
 8005806:	2200      	movs	r2, #0
 8005808:	4b32      	ldr	r3, [pc, #200]	; (80058d4 <MS56xx_Init+0x14c>)
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	68f9      	ldr	r1, [r7, #12]
 800580e:	f7fa fe19 	bl	8000444 <__aeabi_dcmplt>
 8005812:	1e03      	subs	r3, r0, #0
 8005814:	d117      	bne.n	8005846 <MS56xx_Init+0xbe>
 8005816:	2200      	movs	r2, #0
 8005818:	4b2f      	ldr	r3, [pc, #188]	; (80058d8 <MS56xx_Init+0x150>)
 800581a:	68b8      	ldr	r0, [r7, #8]
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	f7fa fe25 	bl	800046c <__aeabi_dcmpgt>
 8005822:	1e03      	subs	r3, r0, #0
 8005824:	d10f      	bne.n	8005846 <MS56xx_Init+0xbe>
 8005826:	2200      	movs	r2, #0
 8005828:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <MS56xx_Init+0x154>)
 800582a:	6838      	ldr	r0, [r7, #0]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	f7fa fe09 	bl	8000444 <__aeabi_dcmplt>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d107      	bne.n	8005846 <MS56xx_Init+0xbe>
 8005836:	2200      	movs	r2, #0
 8005838:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <MS56xx_Init+0x158>)
 800583a:	6838      	ldr	r0, [r7, #0]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	f7fa fe15 	bl	800046c <__aeabi_dcmpgt>
 8005842:	1e03      	subs	r3, r0, #0
 8005844:	d033      	beq.n	80058ae <MS56xx_Init+0x126>
	{
		printf("** ERROR ! **\n");
 8005846:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <MS56xx_Init+0x15c>)
 8005848:	0018      	movs	r0, r3
 800584a:	f001 ff89 	bl	8007760 <puts>
		printf("Sensor FAIL : Caution sensor can be damage !\n");
 800584e:	4b26      	ldr	r3, [pc, #152]	; (80058e8 <MS56xx_Init+0x160>)
 8005850:	0018      	movs	r0, r3
 8005852:	f001 ff85 	bl	8007760 <puts>

		if(pressure<10.00) printf("Pressure value is under 10.00 mBar\n\n");
 8005856:	2200      	movs	r2, #0
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <MS56xx_Init+0x14c>)
 800585a:	68b8      	ldr	r0, [r7, #8]
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	f7fa fdf1 	bl	8000444 <__aeabi_dcmplt>
 8005862:	1e03      	subs	r3, r0, #0
 8005864:	d004      	beq.n	8005870 <MS56xx_Init+0xe8>
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <MS56xx_Init+0x164>)
 8005868:	0018      	movs	r0, r3
 800586a:	f001 ff79 	bl	8007760 <puts>
 800586e:	e022      	b.n	80058b6 <MS56xx_Init+0x12e>
		else if (pressure > 1200.00) printf("Pressure value is over 1200.00 mBar\n\n");
 8005870:	2200      	movs	r2, #0
 8005872:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <MS56xx_Init+0x150>)
 8005874:	68b8      	ldr	r0, [r7, #8]
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f7fa fdf8 	bl	800046c <__aeabi_dcmpgt>
 800587c:	1e03      	subs	r3, r0, #0
 800587e:	d004      	beq.n	800588a <MS56xx_Init+0x102>
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <MS56xx_Init+0x168>)
 8005882:	0018      	movs	r0, r3
 8005884:	f001 ff6c 	bl	8007760 <puts>
		if(pressure<10.00) printf("Pressure value is under 10.00 mBar\n\n");
 8005888:	e015      	b.n	80058b6 <MS56xx_Init+0x12e>
		else if (temperature < -40.00) printf("Temperature value is under -40.00 C\n\n");
 800588a:	2200      	movs	r2, #0
 800588c:	4b13      	ldr	r3, [pc, #76]	; (80058dc <MS56xx_Init+0x154>)
 800588e:	6838      	ldr	r0, [r7, #0]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	f7fa fdd7 	bl	8000444 <__aeabi_dcmplt>
 8005896:	1e03      	subs	r3, r0, #0
 8005898:	d004      	beq.n	80058a4 <MS56xx_Init+0x11c>
 800589a:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <MS56xx_Init+0x16c>)
 800589c:	0018      	movs	r0, r3
 800589e:	f001 ff5f 	bl	8007760 <puts>
		if(pressure<10.00) printf("Pressure value is under 10.00 mBar\n\n");
 80058a2:	e008      	b.n	80058b6 <MS56xx_Init+0x12e>
		else printf("Temperature value is over 85.00 C\n\n");
 80058a4:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <MS56xx_Init+0x170>)
 80058a6:	0018      	movs	r0, r3
 80058a8:	f001 ff5a 	bl	8007760 <puts>
		if(pressure<10.00) printf("Pressure value is under 10.00 mBar\n\n");
 80058ac:	e003      	b.n	80058b6 <MS56xx_Init+0x12e>
	}
	else printf("Sensor OK !\n\n");
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <MS56xx_Init+0x174>)
 80058b0:	0018      	movs	r0, r3
 80058b2:	f001 ff55 	bl	8007760 <puts>
}
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b005      	add	sp, #20
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	0800a6e0 	.word	0x0800a6e0
 80058c4:	20000254 	.word	0x20000254
 80058c8:	0800a6f4 	.word	0x0800a6f4
 80058cc:	0800a700 	.word	0x0800a700
 80058d0:	0800a71c 	.word	0x0800a71c
 80058d4:	40240000 	.word	0x40240000
 80058d8:	4092c000 	.word	0x4092c000
 80058dc:	c0440000 	.word	0xc0440000
 80058e0:	40554000 	.word	0x40554000
 80058e4:	0800a734 	.word	0x0800a734
 80058e8:	0800a744 	.word	0x0800a744
 80058ec:	0800a774 	.word	0x0800a774
 80058f0:	0800a798 	.word	0x0800a798
 80058f4:	0800a7c0 	.word	0x0800a7c0
 80058f8:	0800a7e8 	.word	0x0800a7e8
 80058fc:	0800a80c 	.word	0x0800a80c

08005900 <MS56xx_Reset>:
 * gets loaded into the internal register. It can be also used to reset the device ROM from an unknown condition
 * @param  None
 * @retval None
 */
void MS56xx_Reset(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
	uint8_t command = CMD_RESET;
 8005906:	1dfb      	adds	r3, r7, #7
 8005908:	221e      	movs	r2, #30
 800590a:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 800590c:	23a0      	movs	r3, #160	; 0xa0
 800590e:	05db      	lsls	r3, r3, #23
 8005910:	2200      	movs	r2, #0
 8005912:	2110      	movs	r1, #16
 8005914:	0018      	movs	r0, r3
 8005916:	f7fd f96a 	bl	8002bee <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &command, SIZE_CMD, 500);
 800591a:	23fa      	movs	r3, #250	; 0xfa
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	1df9      	adds	r1, r7, #7
 8005920:	4807      	ldr	r0, [pc, #28]	; (8005940 <MS56xx_Reset+0x40>)
 8005922:	2201      	movs	r2, #1
 8005924:	f7fe f8a0 	bl	8003a68 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8005928:	23a0      	movs	r3, #160	; 0xa0
 800592a:	05db      	lsls	r3, r3, #23
 800592c:	2201      	movs	r2, #1
 800592e:	2110      	movs	r1, #16
 8005930:	0018      	movs	r0, r3
 8005932:	f7fd f95c 	bl	8002bee <HAL_GPIO_WritePin>
}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	46bd      	mov	sp, r7
 800593a:	b002      	add	sp, #8
 800593c:	bd80      	pop	{r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	20000304 	.word	0x20000304

08005944 <MS56xx_ReadPROM>:
 * The command sequence is 8 bits long with a 16 bit result which is clocked with the MSB first.
 * @param  None
 * @retval None
 */
void MS56xx_ReadPROM(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af02      	add	r7, sp, #8
	uint8_t command = 0;
 800594a:	1dbb      	adds	r3, r7, #6
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
	uint8_t data[3] = {0};
 8005950:	003b      	movs	r3, r7
 8005952:	0018      	movs	r0, r3
 8005954:	2303      	movs	r3, #3
 8005956:	001a      	movs	r2, r3
 8005958:	2100      	movs	r1, #0
 800595a:	f001 fa21 	bl	8006da0 <memset>
	 * The size of data receive is the same that is transmit.
	 * data[0] is the command
	 * data[1] and data[2] are the MSB and LSB data byte.
	 */

	printf("Reading PROM : \n");
 800595e:	4b27      	ldr	r3, [pc, #156]	; (80059fc <MS56xx_ReadPROM+0xb8>)
 8005960:	0018      	movs	r0, r3
 8005962:	f001 fefd 	bl	8007760 <puts>

	for(uint8_t addr = 0; addr < NB_OF_CF_FACTORY ; addr++)
 8005966:	1dfb      	adds	r3, r7, #7
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e03e      	b.n	80059ec <MS56xx_ReadPROM+0xa8>
	{
		command = (CMD_READ_PROM + (addr * 2));
 800596e:	1dfb      	adds	r3, r7, #7
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	3350      	adds	r3, #80	; 0x50
 8005974:	b2db      	uxtb	r3, r3
 8005976:	18db      	adds	r3, r3, r3
 8005978:	b2da      	uxtb	r2, r3
 800597a:	1dbb      	adds	r3, r7, #6
 800597c:	701a      	strb	r2, [r3, #0]

		// Read calibration registerX
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 800597e:	23a0      	movs	r3, #160	; 0xa0
 8005980:	05db      	lsls	r3, r3, #23
 8005982:	2200      	movs	r2, #0
 8005984:	2110      	movs	r1, #16
 8005986:	0018      	movs	r0, r3
 8005988:	f7fd f931 	bl	8002bee <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(&hspi1, &command, data, (SIZE_CMD+SIZE_PROM), 500); // Instruction faster than transmit + receive
 800598c:	003a      	movs	r2, r7
 800598e:	1db9      	adds	r1, r7, #6
 8005990:	481b      	ldr	r0, [pc, #108]	; (8005a00 <MS56xx_ReadPROM+0xbc>)
 8005992:	23fa      	movs	r3, #250	; 0xfa
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	2303      	movs	r3, #3
 800599a:	f7fe f9b3 	bl	8003d04 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 800599e:	23a0      	movs	r3, #160	; 0xa0
 80059a0:	05db      	lsls	r3, r3, #23
 80059a2:	2201      	movs	r2, #1
 80059a4:	2110      	movs	r1, #16
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7fd f921 	bl	8002bee <HAL_GPIO_WritePin>

		// Convert and store into 16 bits value
		_coefficientFactory[addr] = (data[1] << 8) | data[2];
 80059ac:	003b      	movs	r3, r7
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	003b      	movs	r3, r7
 80059b6:	789b      	ldrb	r3, [r3, #2]
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	b219      	sxth	r1, r3
 80059be:	1dfb      	adds	r3, r7, #7
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	b289      	uxth	r1, r1
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <MS56xx_ReadPROM+0xc0>)
 80059c6:	0052      	lsls	r2, r2, #1
 80059c8:	52d1      	strh	r1, [r2, r3]

		printf("Addr[%d] : %d \n", addr, _coefficientFactory[addr]);
 80059ca:	1dfb      	adds	r3, r7, #7
 80059cc:	7819      	ldrb	r1, [r3, #0]
 80059ce:	1dfb      	adds	r3, r7, #7
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <MS56xx_ReadPROM+0xc0>)
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	5ad3      	ldrh	r3, [r2, r3]
 80059d8:	001a      	movs	r2, r3
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <MS56xx_ReadPROM+0xc4>)
 80059dc:	0018      	movs	r0, r3
 80059de:	f001 fe45 	bl	800766c <iprintf>
	for(uint8_t addr = 0; addr < NB_OF_CF_FACTORY ; addr++)
 80059e2:	1dfb      	adds	r3, r7, #7
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	1dfb      	adds	r3, r7, #7
 80059e8:	3201      	adds	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	1dfb      	adds	r3, r7, #7
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b07      	cmp	r3, #7
 80059f2:	d9bc      	bls.n	800596e <MS56xx_ReadPROM+0x2a>
	}
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b002      	add	sp, #8
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	0800a81c 	.word	0x0800a81c
 8005a00:	20000304 	.word	0x20000304
 8005a04:	20000254 	.word	0x20000254
 8005a08:	0800a82c 	.word	0x0800a82c

08005a0c <MS56xx_crc4>:
 * @brief calculate the CRC code for check the data PROM validity
 * @param  None
 * @retval crc code
 */
uint8_t MS56xx_crc4(uint16_t n_prom[])
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	uint8_t cnt;       // simple counter
	uint16_t n_rem;    // crc reminder
	uint16_t crc_read; // original value of the crc
	uint8_t  n_bit;

	n_rem = 0x00;
 8005a14:	230c      	movs	r3, #12
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2200      	movs	r2, #0
 8005a1a:	801a      	strh	r2, [r3, #0]
	crc_read = n_prom[7];               //save read CRC
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	89d2      	ldrh	r2, [r2, #14]
 8005a24:	801a      	strh	r2, [r3, #0]
	n_prom[7] = (0xFF00 & (n_prom[7])); //CRC byte is replaced by 0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	330e      	adds	r3, #14
 8005a2a:	881a      	ldrh	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	330e      	adds	r3, #14
 8005a30:	21ff      	movs	r1, #255	; 0xff
 8005a32:	438a      	bics	r2, r1
 8005a34:	b292      	uxth	r2, r2
 8005a36:	801a      	strh	r2, [r3, #0]

	for (cnt = 0; cnt < 16; cnt++)   // operation is performed on bytes
 8005a38:	230f      	movs	r3, #15
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e05a      	b.n	8005af8 <MS56xx_crc4+0xec>
	{
		// choose LSB or MSB
		if (cnt%2==1) n_rem ^= (uint8_t) ((n_prom[cnt>>1]) & 0x00FF);
 8005a42:	230f      	movs	r3, #15
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d011      	beq.n	8005a76 <MS56xx_crc4+0x6a>
 8005a52:	230f      	movs	r3, #15
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	18d3      	adds	r3, r2, r3
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	b299      	uxth	r1, r3
 8005a68:	220c      	movs	r2, #12
 8005a6a:	18bb      	adds	r3, r7, r2
 8005a6c:	18ba      	adds	r2, r7, r2
 8005a6e:	8812      	ldrh	r2, [r2, #0]
 8005a70:	404a      	eors	r2, r1
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	e012      	b.n	8005a9c <MS56xx_crc4+0x90>
		else n_rem ^= (uint8_t) (n_prom[cnt>>1]>>8);
 8005a76:	230f      	movs	r3, #15
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	18d3      	adds	r3, r2, r3
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	b299      	uxth	r1, r3
 8005a90:	220c      	movs	r2, #12
 8005a92:	18bb      	adds	r3, r7, r2
 8005a94:	18ba      	adds	r2, r7, r2
 8005a96:	8812      	ldrh	r2, [r2, #0]
 8005a98:	404a      	eors	r2, r1
 8005a9a:	801a      	strh	r2, [r3, #0]

		for (n_bit = 8; n_bit > 0; n_bit--)
 8005a9c:	230b      	movs	r3, #11
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e01d      	b.n	8005ae2 <MS56xx_crc4+0xd6>
		{
			if (n_rem & (0x8000))
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	2200      	movs	r2, #0
 8005aac:	5e9b      	ldrsh	r3, [r3, r2]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da0b      	bge.n	8005aca <MS56xx_crc4+0xbe>
			{
				n_rem = (n_rem << 1) ^ 0x3000;
 8005ab2:	210c      	movs	r1, #12
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	b21b      	sxth	r3, r3
 8005abc:	22c0      	movs	r2, #192	; 0xc0
 8005abe:	0192      	lsls	r2, r2, #6
 8005ac0:	4053      	eors	r3, r2
 8005ac2:	b21a      	sxth	r2, r3
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	e005      	b.n	8005ad6 <MS56xx_crc4+0xca>
			}
			else
			{
				n_rem = (n_rem << 1);
 8005aca:	230c      	movs	r3, #12
 8005acc:	18fa      	adds	r2, r7, r3
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	18db      	adds	r3, r3, r3
 8005ad4:	8013      	strh	r3, [r2, #0]
		for (n_bit = 8; n_bit > 0; n_bit--)
 8005ad6:	210b      	movs	r1, #11
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	3a01      	subs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	230b      	movs	r3, #11
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1dc      	bne.n	8005aa6 <MS56xx_crc4+0x9a>
	for (cnt = 0; cnt < 16; cnt++)   // operation is performed on bytes
 8005aec:	210f      	movs	r1, #15
 8005aee:	187b      	adds	r3, r7, r1
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	187b      	adds	r3, r7, r1
 8005af4:	3201      	adds	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	230f      	movs	r3, #15
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b0f      	cmp	r3, #15
 8005b00:	d99f      	bls.n	8005a42 <MS56xx_crc4+0x36>
			}
		}
	}

	n_rem = (0x000F & (n_rem >> 12)); // final 4-bit reminder is CRC code
 8005b02:	210c      	movs	r1, #12
 8005b04:	187b      	adds	r3, r7, r1
 8005b06:	187a      	adds	r2, r7, r1
 8005b08:	8812      	ldrh	r2, [r2, #0]
 8005b0a:	0b12      	lsrs	r2, r2, #12
 8005b0c:	801a      	strh	r2, [r3, #0]

	n_prom[7] = crc_read; // restore the crc_read to its original place
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	330e      	adds	r3, #14
 8005b12:	2208      	movs	r2, #8
 8005b14:	18ba      	adds	r2, r7, r2
 8005b16:	8812      	ldrh	r2, [r2, #0]
 8005b18:	801a      	strh	r2, [r3, #0]

	return (n_rem ^ 0x00);
 8005b1a:	187b      	adds	r3, r7, r1
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b2db      	uxtb	r3, r3
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b004      	add	sp, #16
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <MS56xx_Read_RAW_ADC>:
 * @param  reg : register address
 * @param  osr : oversampling value
 * @retval value : uncompensated value of the register in form of 32bits
 */
uint32_t MS56xx_Read_RAW_ADC(char cmd_conv, ms5611_osr_t osr)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b089      	sub	sp, #36	; 0x24
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	0002      	movs	r2, r0
 8005b30:	1dfb      	adds	r3, r7, #7
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	1c0a      	adds	r2, r1, #0
 8005b38:	701a      	strb	r2, [r3, #0]
	uint8_t convTime = 0;  // Wait time for conversion depending of oversampling in ms
 8005b3a:	2317      	movs	r3, #23
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]

	uint8_t cmd_convert  = cmd_conv + osr; // pressure/temperature addr + OSR
 8005b42:	1dfa      	adds	r2, r7, #7
 8005b44:	1dbb      	adds	r3, r7, #6
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	18d3      	adds	r3, r2, r3
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	230f      	movs	r3, #15
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_read_adc = CMD_READ_ADC;
 8005b54:	230e      	movs	r3, #14
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]

	uint32_t value;
	uint8_t data[4] = {0};
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
	 * The size of data receive is the same that is transmit.
	 * data[0] is the command
	 * data[1], data[2] and data[3] are the MSB and LSB data byte.
	 */

	switch (osr)
 8005b64:	1dbb      	adds	r3, r7, #6
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d81d      	bhi.n	8005ba8 <MS56xx_Read_RAW_ADC+0x80>
 8005b6c:	009a      	lsls	r2, r3, #2
 8005b6e:	4b32      	ldr	r3, [pc, #200]	; (8005c38 <MS56xx_Read_RAW_ADC+0x110>)
 8005b70:	18d3      	adds	r3, r2, r3
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	469f      	mov	pc, r3
	{
	case OSR_ULTRA_LOW_POWER:
		convTime = 1;
 8005b76:	2317      	movs	r3, #23
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	701a      	strb	r2, [r3, #0]
		break;
 8005b7e:	e013      	b.n	8005ba8 <MS56xx_Read_RAW_ADC+0x80>
	case OSR_LOW_POWER:
		convTime = 3;
 8005b80:	2317      	movs	r3, #23
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2203      	movs	r2, #3
 8005b86:	701a      	strb	r2, [r3, #0]
		break;
 8005b88:	e00e      	b.n	8005ba8 <MS56xx_Read_RAW_ADC+0x80>
	case OSR_STANDARD:
		convTime = 4;
 8005b8a:	2317      	movs	r3, #23
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	2204      	movs	r2, #4
 8005b90:	701a      	strb	r2, [r3, #0]
		break;
 8005b92:	e009      	b.n	8005ba8 <MS56xx_Read_RAW_ADC+0x80>
	case OSR_HIGH_RES:
		convTime = 6;
 8005b94:	2317      	movs	r3, #23
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	2206      	movs	r2, #6
 8005b9a:	701a      	strb	r2, [r3, #0]
		break;
 8005b9c:	e004      	b.n	8005ba8 <MS56xx_Read_RAW_ADC+0x80>
	case OSR_ULTRA_HIGH_RES:
		convTime = 10;
 8005b9e:	2317      	movs	r3, #23
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	701a      	strb	r2, [r3, #0]
		break;
 8005ba6:	46c0      	nop			; (mov r8, r8)
	}

	// Convertion request
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8005ba8:	23a0      	movs	r3, #160	; 0xa0
 8005baa:	05db      	lsls	r3, r3, #23
 8005bac:	2200      	movs	r2, #0
 8005bae:	2110      	movs	r1, #16
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f7fd f81c 	bl	8002bee <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &cmd_convert, SIZE_CMD, 500);
 8005bb6:	23fa      	movs	r3, #250	; 0xfa
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	220f      	movs	r2, #15
 8005bbc:	18b9      	adds	r1, r7, r2
 8005bbe:	481f      	ldr	r0, [pc, #124]	; (8005c3c <MS56xx_Read_RAW_ADC+0x114>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f7fd ff51 	bl	8003a68 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8005bc6:	23a0      	movs	r3, #160	; 0xa0
 8005bc8:	05db      	lsls	r3, r3, #23
 8005bca:	2201      	movs	r2, #1
 8005bcc:	2110      	movs	r1, #16
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7fd f80d 	bl	8002bee <HAL_GPIO_WritePin>

	// wait for convertion
	HAL_Delay(convTime);
 8005bd4:	2317      	movs	r3, #23
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7fc fb82 	bl	80022e4 <HAL_Delay>

	// Read value
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8005be0:	23a0      	movs	r3, #160	; 0xa0
 8005be2:	05db      	lsls	r3, r3, #23
 8005be4:	2200      	movs	r2, #0
 8005be6:	2110      	movs	r1, #16
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7fd f800 	bl	8002bee <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, &cmd_read_adc, data, (SIZE_CMD+SIZE_ADC), 500); // Instruction faster than transmit + receive
 8005bee:	2108      	movs	r1, #8
 8005bf0:	000c      	movs	r4, r1
 8005bf2:	187a      	adds	r2, r7, r1
 8005bf4:	230e      	movs	r3, #14
 8005bf6:	18f9      	adds	r1, r7, r3
 8005bf8:	4810      	ldr	r0, [pc, #64]	; (8005c3c <MS56xx_Read_RAW_ADC+0x114>)
 8005bfa:	23fa      	movs	r3, #250	; 0xfa
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	2304      	movs	r3, #4
 8005c02:	f7fe f87f 	bl	8003d04 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8005c06:	23a0      	movs	r3, #160	; 0xa0
 8005c08:	05db      	lsls	r3, r3, #23
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f7fc ffed 	bl	8002bee <HAL_GPIO_WritePin>

	// Convert into 32 bits value
	value = ((uint32_t)data[1]<<16) | ((uint32_t)data[2] << 8) | data[3];
 8005c14:	0021      	movs	r1, r4
 8005c16:	187b      	adds	r3, r7, r1
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	041a      	lsls	r2, r3, #16
 8005c1c:	187b      	adds	r3, r7, r1
 8005c1e:	789b      	ldrb	r3, [r3, #2]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	4313      	orrs	r3, r2
 8005c24:	187a      	adds	r2, r7, r1
 8005c26:	78d2      	ldrb	r2, [r2, #3]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]

	return value;
 8005c2c:	693b      	ldr	r3, [r7, #16]
}
 8005c2e:	0018      	movs	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b007      	add	sp, #28
 8005c34:	bd90      	pop	{r4, r7, pc}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	0800a904 	.word	0x0800a904
 8005c3c:	20000304 	.word	0x20000304

08005c40 <MS56xx_getPressure>:
 * @param  _osrPr : oversampling value for pressure
 * @param  _osrPr : oversampling value for temperature
 * @retval MS56xx.P : compensated pressure in mbar
 */
double MS56xx_getPressure(ms5611_osr_t _osrPr, ms5611_osr_t _osrTemp)
{
 8005c40:	b5b0      	push	{r4, r5, r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	0002      	movs	r2, r0
 8005c48:	200f      	movs	r0, #15
 8005c4a:	183b      	adds	r3, r7, r0
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	240e      	movs	r4, #14
 8005c50:	193b      	adds	r3, r7, r4
 8005c52:	1c0a      	adds	r2, r1, #0
 8005c54:	701a      	strb	r2, [r3, #0]
	MS56xx.D1 = MS56xx_Read_RAW_ADC(CMD_CONV_D1, _osrPr);
 8005c56:	183b      	adds	r3, r7, r0
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	2040      	movs	r0, #64	; 0x40
 8005c5e:	f7ff ff63 	bl	8005b28 <MS56xx_Read_RAW_ADC>
 8005c62:	0002      	movs	r2, r0
 8005c64:	4bea      	ldr	r3, [pc, #936]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005c66:	601a      	str	r2, [r3, #0]
	MS56xx.D2 = MS56xx_Read_RAW_ADC(CMD_CONV_D2, _osrTemp);
 8005c68:	193b      	adds	r3, r7, r4
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	2050      	movs	r0, #80	; 0x50
 8005c70:	f7ff ff5a 	bl	8005b28 <MS56xx_Read_RAW_ADC>
 8005c74:	0002      	movs	r2, r0
 8005c76:	4be6      	ldr	r3, [pc, #920]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005c78:	605a      	str	r2, [r3, #4]

	// calculate 1st order temperature
	MS56xx.dT   = MS56xx.D2 - _coefficientFactory[5] * pow(2,8);
 8005c7a:	4be5      	ldr	r3, [pc, #916]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f7fc fa74 	bl	800216c <__aeabi_ui2d>
 8005c84:	0004      	movs	r4, r0
 8005c86:	000d      	movs	r5, r1
 8005c88:	4be2      	ldr	r3, [pc, #904]	; (8006014 <MS56xx_getPressure+0x3d4>)
 8005c8a:	895b      	ldrh	r3, [r3, #10]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7fc fa33 	bl	80020f8 <__aeabi_i2d>
 8005c92:	2200      	movs	r2, #0
 8005c94:	4be0      	ldr	r3, [pc, #896]	; (8006018 <MS56xx_getPressure+0x3d8>)
 8005c96:	f7fb fc23 	bl	80014e0 <__aeabi_dmul>
 8005c9a:	0002      	movs	r2, r0
 8005c9c:	000b      	movs	r3, r1
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	0029      	movs	r1, r5
 8005ca2:	f7fb fe8f 	bl	80019c4 <__aeabi_dsub>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	000c      	movs	r4, r1
 8005caa:	4ad9      	ldr	r2, [pc, #868]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005cac:	6093      	str	r3, [r2, #8]
 8005cae:	60d4      	str	r4, [r2, #12]
	MS56xx.TEMP = (2000 + (MS56xx.dT * _coefficientFactory[6]) / pow(2,23));
 8005cb0:	4bd7      	ldr	r3, [pc, #860]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005cb2:	689c      	ldr	r4, [r3, #8]
 8005cb4:	68dd      	ldr	r5, [r3, #12]
 8005cb6:	4bd7      	ldr	r3, [pc, #860]	; (8006014 <MS56xx_getPressure+0x3d4>)
 8005cb8:	899b      	ldrh	r3, [r3, #12]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fc fa1c 	bl	80020f8 <__aeabi_i2d>
 8005cc0:	0002      	movs	r2, r0
 8005cc2:	000b      	movs	r3, r1
 8005cc4:	0020      	movs	r0, r4
 8005cc6:	0029      	movs	r1, r5
 8005cc8:	f7fb fc0a 	bl	80014e0 <__aeabi_dmul>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	000c      	movs	r4, r1
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	0021      	movs	r1, r4
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4bd1      	ldr	r3, [pc, #836]	; (800601c <MS56xx_getPressure+0x3dc>)
 8005cd8:	f7fa fff8 	bl	8000ccc <__aeabi_ddiv>
 8005cdc:	0003      	movs	r3, r0
 8005cde:	000c      	movs	r4, r1
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	0021      	movs	r1, r4
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4bce      	ldr	r3, [pc, #824]	; (8006020 <MS56xx_getPressure+0x3e0>)
 8005ce8:	f7fa fcd4 	bl	8000694 <__aeabi_dadd>
 8005cec:	0003      	movs	r3, r0
 8005cee:	000c      	movs	r4, r1
 8005cf0:	4ac7      	ldr	r2, [pc, #796]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005cf2:	6113      	str	r3, [r2, #16]
 8005cf4:	6154      	str	r4, [r2, #20]

	MS56xx.OFF  = _coefficientFactory[2] * pow(2,17) + MS56xx.dT * _coefficientFactory[4] / pow(2,6);
 8005cf6:	4bc7      	ldr	r3, [pc, #796]	; (8006014 <MS56xx_getPressure+0x3d4>)
 8005cf8:	889b      	ldrh	r3, [r3, #4]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7fc f9fc 	bl	80020f8 <__aeabi_i2d>
 8005d00:	2200      	movs	r2, #0
 8005d02:	2382      	movs	r3, #130	; 0x82
 8005d04:	05db      	lsls	r3, r3, #23
 8005d06:	f7fb fbeb 	bl	80014e0 <__aeabi_dmul>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	000c      	movs	r4, r1
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	607c      	str	r4, [r7, #4]
 8005d12:	4bbf      	ldr	r3, [pc, #764]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005d14:	689c      	ldr	r4, [r3, #8]
 8005d16:	68dd      	ldr	r5, [r3, #12]
 8005d18:	4bbe      	ldr	r3, [pc, #760]	; (8006014 <MS56xx_getPressure+0x3d4>)
 8005d1a:	891b      	ldrh	r3, [r3, #8]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7fc f9eb 	bl	80020f8 <__aeabi_i2d>
 8005d22:	0002      	movs	r2, r0
 8005d24:	000b      	movs	r3, r1
 8005d26:	0020      	movs	r0, r4
 8005d28:	0029      	movs	r1, r5
 8005d2a:	f7fb fbd9 	bl	80014e0 <__aeabi_dmul>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	000c      	movs	r4, r1
 8005d32:	0018      	movs	r0, r3
 8005d34:	0021      	movs	r1, r4
 8005d36:	2200      	movs	r2, #0
 8005d38:	4bba      	ldr	r3, [pc, #744]	; (8006024 <MS56xx_getPressure+0x3e4>)
 8005d3a:	f7fa ffc7 	bl	8000ccc <__aeabi_ddiv>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	000c      	movs	r4, r1
 8005d42:	001a      	movs	r2, r3
 8005d44:	0023      	movs	r3, r4
 8005d46:	6838      	ldr	r0, [r7, #0]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	f7fa fca3 	bl	8000694 <__aeabi_dadd>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	000c      	movs	r4, r1
 8005d52:	4aaf      	ldr	r2, [pc, #700]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005d54:	6193      	str	r3, [r2, #24]
 8005d56:	61d4      	str	r4, [r2, #28]
	MS56xx.SENS = _coefficientFactory[1] * pow(2,16) + MS56xx.dT * _coefficientFactory[3] / pow(2,7);
 8005d58:	4bae      	ldr	r3, [pc, #696]	; (8006014 <MS56xx_getPressure+0x3d4>)
 8005d5a:	885b      	ldrh	r3, [r3, #2]
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7fc f9cb 	bl	80020f8 <__aeabi_i2d>
 8005d62:	2200      	movs	r2, #0
 8005d64:	4bb0      	ldr	r3, [pc, #704]	; (8006028 <MS56xx_getPressure+0x3e8>)
 8005d66:	f7fb fbbb 	bl	80014e0 <__aeabi_dmul>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	000c      	movs	r4, r1
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	607c      	str	r4, [r7, #4]
 8005d72:	4ba7      	ldr	r3, [pc, #668]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005d74:	689c      	ldr	r4, [r3, #8]
 8005d76:	68dd      	ldr	r5, [r3, #12]
 8005d78:	4ba6      	ldr	r3, [pc, #664]	; (8006014 <MS56xx_getPressure+0x3d4>)
 8005d7a:	88db      	ldrh	r3, [r3, #6]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7fc f9bb 	bl	80020f8 <__aeabi_i2d>
 8005d82:	0002      	movs	r2, r0
 8005d84:	000b      	movs	r3, r1
 8005d86:	0020      	movs	r0, r4
 8005d88:	0029      	movs	r1, r5
 8005d8a:	f7fb fba9 	bl	80014e0 <__aeabi_dmul>
 8005d8e:	0003      	movs	r3, r0
 8005d90:	000c      	movs	r4, r1
 8005d92:	0018      	movs	r0, r3
 8005d94:	0021      	movs	r1, r4
 8005d96:	2200      	movs	r2, #0
 8005d98:	4ba4      	ldr	r3, [pc, #656]	; (800602c <MS56xx_getPressure+0x3ec>)
 8005d9a:	f7fa ff97 	bl	8000ccc <__aeabi_ddiv>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	000c      	movs	r4, r1
 8005da2:	001a      	movs	r2, r3
 8005da4:	0023      	movs	r3, r4
 8005da6:	6838      	ldr	r0, [r7, #0]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	f7fa fc73 	bl	8000694 <__aeabi_dadd>
 8005dae:	0003      	movs	r3, r0
 8005db0:	000c      	movs	r4, r1
 8005db2:	4a97      	ldr	r2, [pc, #604]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005db4:	6213      	str	r3, [r2, #32]
 8005db6:	6254      	str	r4, [r2, #36]	; 0x24
	MS56xx.P    =(((MS56xx.D1 * MS56xx.SENS) / pow(2,21) - MS56xx.OFF) / pow(2,15));
 8005db8:	4b95      	ldr	r3, [pc, #596]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7fc f9d5 	bl	800216c <__aeabi_ui2d>
 8005dc2:	4b93      	ldr	r3, [pc, #588]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005dc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	001a      	movs	r2, r3
 8005dca:	0023      	movs	r3, r4
 8005dcc:	f7fb fb88 	bl	80014e0 <__aeabi_dmul>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	000c      	movs	r4, r1
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	0021      	movs	r1, r4
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4b95      	ldr	r3, [pc, #596]	; (8006030 <MS56xx_getPressure+0x3f0>)
 8005ddc:	f7fa ff76 	bl	8000ccc <__aeabi_ddiv>
 8005de0:	0003      	movs	r3, r0
 8005de2:	000c      	movs	r4, r1
 8005de4:	0018      	movs	r0, r3
 8005de6:	0021      	movs	r1, r4
 8005de8:	4b89      	ldr	r3, [pc, #548]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005dea:	69dc      	ldr	r4, [r3, #28]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	001a      	movs	r2, r3
 8005df0:	0023      	movs	r3, r4
 8005df2:	f7fb fde7 	bl	80019c4 <__aeabi_dsub>
 8005df6:	0003      	movs	r3, r0
 8005df8:	000c      	movs	r4, r1
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	0021      	movs	r1, r4
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4b8c      	ldr	r3, [pc, #560]	; (8006034 <MS56xx_getPressure+0x3f4>)
 8005e02:	f7fa ff63 	bl	8000ccc <__aeabi_ddiv>
 8005e06:	0003      	movs	r3, r0
 8005e08:	000c      	movs	r4, r1
 8005e0a:	4a81      	ldr	r2, [pc, #516]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005e0c:	6293      	str	r3, [r2, #40]	; 0x28
 8005e0e:	62d4      	str	r4, [r2, #44]	; 0x2c

	// calculate 2st order temperature compensation
	if(MS56xx.TEMP < 2000)
 8005e10:	4b7f      	ldr	r3, [pc, #508]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005e12:	6918      	ldr	r0, [r3, #16]
 8005e14:	6959      	ldr	r1, [r3, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	4b81      	ldr	r3, [pc, #516]	; (8006020 <MS56xx_getPressure+0x3e0>)
 8005e1a:	f7fa fb13 	bl	8000444 <__aeabi_dcmplt>
 8005e1e:	1e03      	subs	r3, r0, #0
 8005e20:	d100      	bne.n	8005e24 <MS56xx_getPressure+0x1e4>
 8005e22:	e152      	b.n	80060ca <MS56xx_getPressure+0x48a>
	{
		double T2     = 0.00;
 8005e24:	2300      	movs	r3, #0
 8005e26:	2400      	movs	r4, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	617c      	str	r4, [r7, #20]
		double OFF2   = 0.00;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2400      	movs	r4, #0
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	627c      	str	r4, [r7, #36]	; 0x24
		double SENSE2 = 0.00;
 8005e34:	2300      	movs	r3, #0
 8005e36:	2400      	movs	r4, #0
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	61fc      	str	r4, [r7, #28]

		T2     = MS56xx.dT * MS56xx.dT / pow(2,31);
 8005e3c:	4b74      	ldr	r3, [pc, #464]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005e3e:	6898      	ldr	r0, [r3, #8]
 8005e40:	68d9      	ldr	r1, [r3, #12]
 8005e42:	4b73      	ldr	r3, [pc, #460]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005e44:	68dc      	ldr	r4, [r3, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	001a      	movs	r2, r3
 8005e4a:	0023      	movs	r3, r4
 8005e4c:	f7fb fb48 	bl	80014e0 <__aeabi_dmul>
 8005e50:	0003      	movs	r3, r0
 8005e52:	000c      	movs	r4, r1
 8005e54:	0018      	movs	r0, r3
 8005e56:	0021      	movs	r1, r4
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4b77      	ldr	r3, [pc, #476]	; (8006038 <MS56xx_getPressure+0x3f8>)
 8005e5c:	f7fa ff36 	bl	8000ccc <__aeabi_ddiv>
 8005e60:	0003      	movs	r3, r0
 8005e62:	000c      	movs	r4, r1
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	617c      	str	r4, [r7, #20]
		OFF2   = 61 * (MS56xx.TEMP - 2000) * (MS56xx.TEMP - 2000) / pow(2,4);
 8005e68:	4b69      	ldr	r3, [pc, #420]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005e6a:	6918      	ldr	r0, [r3, #16]
 8005e6c:	6959      	ldr	r1, [r3, #20]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <MS56xx_getPressure+0x3e0>)
 8005e72:	f7fb fda7 	bl	80019c4 <__aeabi_dsub>
 8005e76:	0003      	movs	r3, r0
 8005e78:	000c      	movs	r4, r1
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	0021      	movs	r1, r4
 8005e7e:	2200      	movs	r2, #0
 8005e80:	4b6e      	ldr	r3, [pc, #440]	; (800603c <MS56xx_getPressure+0x3fc>)
 8005e82:	f7fb fb2d 	bl	80014e0 <__aeabi_dmul>
 8005e86:	0003      	movs	r3, r0
 8005e88:	000c      	movs	r4, r1
 8005e8a:	0025      	movs	r5, r4
 8005e8c:	001c      	movs	r4, r3
 8005e8e:	4b60      	ldr	r3, [pc, #384]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005e90:	6918      	ldr	r0, [r3, #16]
 8005e92:	6959      	ldr	r1, [r3, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	4b62      	ldr	r3, [pc, #392]	; (8006020 <MS56xx_getPressure+0x3e0>)
 8005e98:	f7fb fd94 	bl	80019c4 <__aeabi_dsub>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	000b      	movs	r3, r1
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	0029      	movs	r1, r5
 8005ea4:	f7fb fb1c 	bl	80014e0 <__aeabi_dmul>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	000c      	movs	r4, r1
 8005eac:	0018      	movs	r0, r3
 8005eae:	0021      	movs	r1, r4
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4b63      	ldr	r3, [pc, #396]	; (8006040 <MS56xx_getPressure+0x400>)
 8005eb4:	f7fa ff0a 	bl	8000ccc <__aeabi_ddiv>
 8005eb8:	0003      	movs	r3, r0
 8005eba:	000c      	movs	r4, r1
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	627c      	str	r4, [r7, #36]	; 0x24
		SENSE2 = 2  * (MS56xx.TEMP - 2000) * (MS56xx.TEMP - 2000);
 8005ec0:	4b53      	ldr	r3, [pc, #332]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005ec2:	6918      	ldr	r0, [r3, #16]
 8005ec4:	6959      	ldr	r1, [r3, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4b55      	ldr	r3, [pc, #340]	; (8006020 <MS56xx_getPressure+0x3e0>)
 8005eca:	f7fb fd7b 	bl	80019c4 <__aeabi_dsub>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	000c      	movs	r4, r1
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	0021      	movs	r1, r4
 8005ed6:	0002      	movs	r2, r0
 8005ed8:	000b      	movs	r3, r1
 8005eda:	f7fa fbdb 	bl	8000694 <__aeabi_dadd>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	000c      	movs	r4, r1
 8005ee2:	0025      	movs	r5, r4
 8005ee4:	001c      	movs	r4, r3
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005ee8:	6918      	ldr	r0, [r3, #16]
 8005eea:	6959      	ldr	r1, [r3, #20]
 8005eec:	2200      	movs	r2, #0
 8005eee:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <MS56xx_getPressure+0x3e0>)
 8005ef0:	f7fb fd68 	bl	80019c4 <__aeabi_dsub>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	000b      	movs	r3, r1
 8005ef8:	0020      	movs	r0, r4
 8005efa:	0029      	movs	r1, r5
 8005efc:	f7fb faf0 	bl	80014e0 <__aeabi_dmul>
 8005f00:	0003      	movs	r3, r0
 8005f02:	000c      	movs	r4, r1
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	61fc      	str	r4, [r7, #28]

		if(MS56xx.TEMP < -15)
 8005f08:	4b41      	ldr	r3, [pc, #260]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005f0a:	6918      	ldr	r0, [r3, #16]
 8005f0c:	6959      	ldr	r1, [r3, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4b4c      	ldr	r3, [pc, #304]	; (8006044 <MS56xx_getPressure+0x404>)
 8005f12:	f7fa fa97 	bl	8000444 <__aeabi_dcmplt>
 8005f16:	1e03      	subs	r3, r0, #0
 8005f18:	d057      	beq.n	8005fca <MS56xx_getPressure+0x38a>
		{
			OFF2   += 15 * (MS56xx.TEMP + 1500) * (MS56xx.TEMP + 1500);
 8005f1a:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005f1c:	6918      	ldr	r0, [r3, #16]
 8005f1e:	6959      	ldr	r1, [r3, #20]
 8005f20:	2200      	movs	r2, #0
 8005f22:	4b49      	ldr	r3, [pc, #292]	; (8006048 <MS56xx_getPressure+0x408>)
 8005f24:	f7fa fbb6 	bl	8000694 <__aeabi_dadd>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	000c      	movs	r4, r1
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	0021      	movs	r1, r4
 8005f30:	2200      	movs	r2, #0
 8005f32:	4b46      	ldr	r3, [pc, #280]	; (800604c <MS56xx_getPressure+0x40c>)
 8005f34:	f7fb fad4 	bl	80014e0 <__aeabi_dmul>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	000c      	movs	r4, r1
 8005f3c:	0025      	movs	r5, r4
 8005f3e:	001c      	movs	r4, r3
 8005f40:	4b33      	ldr	r3, [pc, #204]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005f42:	6918      	ldr	r0, [r3, #16]
 8005f44:	6959      	ldr	r1, [r3, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <MS56xx_getPressure+0x408>)
 8005f4a:	f7fa fba3 	bl	8000694 <__aeabi_dadd>
 8005f4e:	0002      	movs	r2, r0
 8005f50:	000b      	movs	r3, r1
 8005f52:	0020      	movs	r0, r4
 8005f54:	0029      	movs	r1, r5
 8005f56:	f7fb fac3 	bl	80014e0 <__aeabi_dmul>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	000c      	movs	r4, r1
 8005f5e:	001a      	movs	r2, r3
 8005f60:	0023      	movs	r3, r4
 8005f62:	6a38      	ldr	r0, [r7, #32]
 8005f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f66:	f7fa fb95 	bl	8000694 <__aeabi_dadd>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	000c      	movs	r4, r1
 8005f6e:	623b      	str	r3, [r7, #32]
 8005f70:	627c      	str	r4, [r7, #36]	; 0x24
			SENSE2 += 8  * (MS56xx.TEMP + 1500) * (MS56xx.TEMP + 1500);
 8005f72:	4b27      	ldr	r3, [pc, #156]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005f74:	6918      	ldr	r0, [r3, #16]
 8005f76:	6959      	ldr	r1, [r3, #20]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4b33      	ldr	r3, [pc, #204]	; (8006048 <MS56xx_getPressure+0x408>)
 8005f7c:	f7fa fb8a 	bl	8000694 <__aeabi_dadd>
 8005f80:	0003      	movs	r3, r0
 8005f82:	000c      	movs	r4, r1
 8005f84:	0018      	movs	r0, r3
 8005f86:	0021      	movs	r1, r4
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <MS56xx_getPressure+0x410>)
 8005f8c:	f7fb faa8 	bl	80014e0 <__aeabi_dmul>
 8005f90:	0003      	movs	r3, r0
 8005f92:	000c      	movs	r4, r1
 8005f94:	0025      	movs	r5, r4
 8005f96:	001c      	movs	r4, r3
 8005f98:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005f9a:	6918      	ldr	r0, [r3, #16]
 8005f9c:	6959      	ldr	r1, [r3, #20]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4b29      	ldr	r3, [pc, #164]	; (8006048 <MS56xx_getPressure+0x408>)
 8005fa2:	f7fa fb77 	bl	8000694 <__aeabi_dadd>
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	000b      	movs	r3, r1
 8005faa:	0020      	movs	r0, r4
 8005fac:	0029      	movs	r1, r5
 8005fae:	f7fb fa97 	bl	80014e0 <__aeabi_dmul>
 8005fb2:	0003      	movs	r3, r0
 8005fb4:	000c      	movs	r4, r1
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	0023      	movs	r3, r4
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	69f9      	ldr	r1, [r7, #28]
 8005fbe:	f7fa fb69 	bl	8000694 <__aeabi_dadd>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	000c      	movs	r4, r1
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	61fc      	str	r4, [r7, #28]
		}

		MS56xx.TEMP -= T2;
 8005fca:	4b11      	ldr	r3, [pc, #68]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005fcc:	6918      	ldr	r0, [r3, #16]
 8005fce:	6959      	ldr	r1, [r3, #20]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f7fb fcf6 	bl	80019c4 <__aeabi_dsub>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	000c      	movs	r4, r1
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005fde:	6113      	str	r3, [r2, #16]
 8005fe0:	6154      	str	r4, [r2, #20]
		MS56xx.OFF  -= OFF2;
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005fe4:	6998      	ldr	r0, [r3, #24]
 8005fe6:	69d9      	ldr	r1, [r3, #28]
 8005fe8:	6a3a      	ldr	r2, [r7, #32]
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	f7fb fcea 	bl	80019c4 <__aeabi_dsub>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	000c      	movs	r4, r1
 8005ff4:	4a06      	ldr	r2, [pc, #24]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005ff6:	6193      	str	r3, [r2, #24]
 8005ff8:	61d4      	str	r4, [r2, #28]
		MS56xx.SENS -= SENSE2;
 8005ffa:	4b05      	ldr	r3, [pc, #20]	; (8006010 <MS56xx_getPressure+0x3d0>)
 8005ffc:	6a18      	ldr	r0, [r3, #32]
 8005ffe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f7fb fcde 	bl	80019c4 <__aeabi_dsub>
 8006008:	0003      	movs	r3, r0
 800600a:	000c      	movs	r4, r1
 800600c:	e022      	b.n	8006054 <MS56xx_getPressure+0x414>
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	20000278 	.word	0x20000278
 8006014:	20000254 	.word	0x20000254
 8006018:	40700000 	.word	0x40700000
 800601c:	41600000 	.word	0x41600000
 8006020:	409f4000 	.word	0x409f4000
 8006024:	40500000 	.word	0x40500000
 8006028:	40f00000 	.word	0x40f00000
 800602c:	40600000 	.word	0x40600000
 8006030:	41400000 	.word	0x41400000
 8006034:	40e00000 	.word	0x40e00000
 8006038:	41e00000 	.word	0x41e00000
 800603c:	404e8000 	.word	0x404e8000
 8006040:	40300000 	.word	0x40300000
 8006044:	c02e0000 	.word	0xc02e0000
 8006048:	40977000 	.word	0x40977000
 800604c:	402e0000 	.word	0x402e0000
 8006050:	40200000 	.word	0x40200000
 8006054:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 8006056:	6213      	str	r3, [r2, #32]
 8006058:	6254      	str	r4, [r2, #36]	; 0x24

		return MS56xx.P =(((MS56xx.D1 * MS56xx.SENS) / pow(2,21) - MS56xx.OFF) / pow(2,15)) / 100;
 800605a:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	0018      	movs	r0, r3
 8006060:	f7fc f884 	bl	800216c <__aeabi_ui2d>
 8006064:	4b23      	ldr	r3, [pc, #140]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 8006066:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	001a      	movs	r2, r3
 800606c:	0023      	movs	r3, r4
 800606e:	f7fb fa37 	bl	80014e0 <__aeabi_dmul>
 8006072:	0003      	movs	r3, r0
 8006074:	000c      	movs	r4, r1
 8006076:	0018      	movs	r0, r3
 8006078:	0021      	movs	r1, r4
 800607a:	2200      	movs	r2, #0
 800607c:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <MS56xx_getPressure+0x4b8>)
 800607e:	f7fa fe25 	bl	8000ccc <__aeabi_ddiv>
 8006082:	0003      	movs	r3, r0
 8006084:	000c      	movs	r4, r1
 8006086:	0018      	movs	r0, r3
 8006088:	0021      	movs	r1, r4
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 800608c:	69dc      	ldr	r4, [r3, #28]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	001a      	movs	r2, r3
 8006092:	0023      	movs	r3, r4
 8006094:	f7fb fc96 	bl	80019c4 <__aeabi_dsub>
 8006098:	0003      	movs	r3, r0
 800609a:	000c      	movs	r4, r1
 800609c:	0018      	movs	r0, r3
 800609e:	0021      	movs	r1, r4
 80060a0:	2200      	movs	r2, #0
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <MS56xx_getPressure+0x4bc>)
 80060a4:	f7fa fe12 	bl	8000ccc <__aeabi_ddiv>
 80060a8:	0003      	movs	r3, r0
 80060aa:	000c      	movs	r4, r1
 80060ac:	0018      	movs	r0, r3
 80060ae:	0021      	movs	r1, r4
 80060b0:	2200      	movs	r2, #0
 80060b2:	4b13      	ldr	r3, [pc, #76]	; (8006100 <MS56xx_getPressure+0x4c0>)
 80060b4:	f7fa fe0a 	bl	8000ccc <__aeabi_ddiv>
 80060b8:	0003      	movs	r3, r0
 80060ba:	000c      	movs	r4, r1
 80060bc:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 80060be:	6293      	str	r3, [r2, #40]	; 0x28
 80060c0:	62d4      	str	r4, [r2, #44]	; 0x2c
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 80060c4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80060c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c8:	e00e      	b.n	80060e8 <MS56xx_getPressure+0x4a8>
	}
	else return MS56xx.P /= 100;
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 80060cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80060ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060d0:	2200      	movs	r2, #0
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <MS56xx_getPressure+0x4c0>)
 80060d4:	f7fa fdfa 	bl	8000ccc <__aeabi_ddiv>
 80060d8:	0003      	movs	r3, r0
 80060da:	000c      	movs	r4, r1
 80060dc:	4a05      	ldr	r2, [pc, #20]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 80060de:	6293      	str	r3, [r2, #40]	; 0x28
 80060e0:	62d4      	str	r4, [r2, #44]	; 0x2c
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <MS56xx_getPressure+0x4b4>)
 80060e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	0021      	movs	r1, r4
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b00a      	add	sp, #40	; 0x28
 80060f0:	bdb0      	pop	{r4, r5, r7, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	20000278 	.word	0x20000278
 80060f8:	41400000 	.word	0x41400000
 80060fc:	40e00000 	.word	0x40e00000
 8006100:	40590000 	.word	0x40590000

08006104 <MS56xx_getTemperature>:
 * @brief  Simply reading MS56xx.TEMP variable, call MS56xx_getPressure() before if you want a refresh value
 * @param  none
 * @retval value : temperature in °C
 */
double MS56xx_getTemperature(void)
{
 8006104:	b5b0      	push	{r4, r5, r7, lr}
 8006106:	af00      	add	r7, sp, #0
	return MS56xx.TEMP /= 100;
 8006108:	4b09      	ldr	r3, [pc, #36]	; (8006130 <MS56xx_getTemperature+0x2c>)
 800610a:	6918      	ldr	r0, [r3, #16]
 800610c:	6959      	ldr	r1, [r3, #20]
 800610e:	2200      	movs	r2, #0
 8006110:	4b08      	ldr	r3, [pc, #32]	; (8006134 <MS56xx_getTemperature+0x30>)
 8006112:	f7fa fddb 	bl	8000ccc <__aeabi_ddiv>
 8006116:	0003      	movs	r3, r0
 8006118:	000c      	movs	r4, r1
 800611a:	4a05      	ldr	r2, [pc, #20]	; (8006130 <MS56xx_getTemperature+0x2c>)
 800611c:	6113      	str	r3, [r2, #16]
 800611e:	6154      	str	r4, [r2, #20]
 8006120:	4b03      	ldr	r3, [pc, #12]	; (8006130 <MS56xx_getTemperature+0x2c>)
 8006122:	695c      	ldr	r4, [r3, #20]
 8006124:	691b      	ldr	r3, [r3, #16]
}
 8006126:	0018      	movs	r0, r3
 8006128:	0021      	movs	r1, r4
 800612a:	46bd      	mov	sp, r7
 800612c:	bdb0      	pop	{r4, r5, r7, pc}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	20000278 	.word	0x20000278
 8006134:	40590000 	.word	0x40590000

08006138 <ms56xx_getAltitude>:
 * @brief get altitude from known sea level barometer, no pre-pressure calculation
 * @param float sea level barometer
 * @return float altitude in feet
 */
double ms56xx_getAltitude(double pressure)
{
 8006138:	b590      	push	{r4, r7, lr}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6038      	str	r0, [r7, #0]
 8006140:	6079      	str	r1, [r7, #4]
	double altitude = 0.00;
 8006142:	2300      	movs	r3, #0
 8006144:	2400      	movs	r4, #0
 8006146:	60bb      	str	r3, [r7, #8]
 8006148:	60fc      	str	r4, [r7, #12]
	altitude = ((1 - (pow((pressure / SEA_PRESS), 0.190284))) * 145366.45) * FTMETERS;
 800614a:	2200      	movs	r2, #0
 800614c:	4b18      	ldr	r3, [pc, #96]	; (80061b0 <ms56xx_getAltitude+0x78>)
 800614e:	6838      	ldr	r0, [r7, #0]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	f7fa fdbb 	bl	8000ccc <__aeabi_ddiv>
 8006156:	0003      	movs	r3, r0
 8006158:	000c      	movs	r4, r1
 800615a:	0018      	movs	r0, r3
 800615c:	0021      	movs	r1, r4
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <ms56xx_getAltitude+0x7c>)
 8006160:	4c15      	ldr	r4, [pc, #84]	; (80061b8 <ms56xx_getAltitude+0x80>)
 8006162:	001a      	movs	r2, r3
 8006164:	0023      	movs	r3, r4
 8006166:	f003 fa23 	bl	80095b0 <pow>
 800616a:	0003      	movs	r3, r0
 800616c:	000c      	movs	r4, r1
 800616e:	001a      	movs	r2, r3
 8006170:	0023      	movs	r3, r4
 8006172:	2000      	movs	r0, #0
 8006174:	4911      	ldr	r1, [pc, #68]	; (80061bc <ms56xx_getAltitude+0x84>)
 8006176:	f7fb fc25 	bl	80019c4 <__aeabi_dsub>
 800617a:	0003      	movs	r3, r0
 800617c:	000c      	movs	r4, r1
 800617e:	0018      	movs	r0, r3
 8006180:	0021      	movs	r1, r4
 8006182:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <ms56xx_getAltitude+0x88>)
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <ms56xx_getAltitude+0x8c>)
 8006186:	f7fb f9ab 	bl	80014e0 <__aeabi_dmul>
 800618a:	0003      	movs	r3, r0
 800618c:	000c      	movs	r4, r1
 800618e:	0018      	movs	r0, r3
 8006190:	0021      	movs	r1, r4
 8006192:	4a0d      	ldr	r2, [pc, #52]	; (80061c8 <ms56xx_getAltitude+0x90>)
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <ms56xx_getAltitude+0x94>)
 8006196:	f7fb f9a3 	bl	80014e0 <__aeabi_dmul>
 800619a:	0003      	movs	r3, r0
 800619c:	000c      	movs	r4, r1
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	60fc      	str	r4, [r7, #12]
	return altitude;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68fc      	ldr	r4, [r7, #12]
}
 80061a6:	0018      	movs	r0, r3
 80061a8:	0021      	movs	r1, r4
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b005      	add	sp, #20
 80061ae:	bd90      	pop	{r4, r7, pc}
 80061b0:	408faa00 	.word	0x408faa00
 80061b4:	e279dd3c 	.word	0xe279dd3c
 80061b8:	3fc85b39 	.word	0x3fc85b39
 80061bc:	3ff00000 	.word	0x3ff00000
 80061c0:	9999999a 	.word	0x9999999a
 80061c4:	4101beb3 	.word	0x4101beb3
 80061c8:	dbf487fd 	.word	0xdbf487fd
 80061cc:	3fd381d7 	.word	0x3fd381d7

080061d0 <powerOff>:
	return HAL_ERROR;
}


void powerOff(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_LATCH_GPIO_Port, PWR_LATCH_Pin, 0);
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	0159      	lsls	r1, r3, #5
 80061d8:	23a0      	movs	r3, #160	; 0xa0
 80061da:	05db      	lsls	r3, r3, #23
 80061dc:	2200      	movs	r2, #0
 80061de:	0018      	movs	r0, r3
 80061e0:	f7fc fd05 	bl	8002bee <HAL_GPIO_WritePin>
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <tone>:

#include "Peripherals/Tone.h"
#include "tim.h"

void tone(uint16_t note, uint16_t duration, uint8_t volume)
{
 80061ea:	b590      	push	{r4, r7, lr}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	0004      	movs	r4, r0
 80061f2:	0008      	movs	r0, r1
 80061f4:	0011      	movs	r1, r2
 80061f6:	1dbb      	adds	r3, r7, #6
 80061f8:	1c22      	adds	r2, r4, #0
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	1d3b      	adds	r3, r7, #4
 80061fe:	1c02      	adds	r2, r0, #0
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	1cfb      	adds	r3, r7, #3
 8006204:	1c0a      	adds	r2, r1, #0
 8006206:	701a      	strb	r2, [r3, #0]
	setToneVolume(volume);
 8006208:	1cfb      	adds	r3, r7, #3
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f865 	bl	80062dc <setToneVolume>

	if(volume != 0)
 8006212:	1cfb      	adds	r3, r7, #3
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <tone+0x48>
	{
		setTonePeriode(note);
 800621a:	1dbb      	adds	r3, r7, #6
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	0018      	movs	r0, r3
 8006220:	f000 f80e 	bl	8006240 <setTonePeriode>

		toneStart();
 8006224:	f000 f8a8 	bl	8006378 <toneStart>

		HAL_Delay(duration);
 8006228:	1d3b      	adds	r3, r7, #4
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	0018      	movs	r0, r3
 800622e:	f7fc f859 	bl	80022e4 <HAL_Delay>
	}

	toneStop();
 8006232:	f000 f8ad 	bl	8006390 <toneStop>
}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	46bd      	mov	sp, r7
 800623a:	b003      	add	sp, #12
 800623c:	bd90      	pop	{r4, r7, pc}
	...

08006240 <setTonePeriode>:


void setTonePeriode(uint16_t note)
{
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b089      	sub	sp, #36	; 0x24
 8006244:	af00      	add	r7, sp, #0
 8006246:	0002      	movs	r2, r0
 8006248:	1dbb      	adds	r3, r7, #6
 800624a:	801a      	strh	r2, [r3, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800624c:	240c      	movs	r4, #12
 800624e:	193b      	adds	r3, r7, r4
 8006250:	0018      	movs	r0, r3
 8006252:	2310      	movs	r3, #16
 8006254:	001a      	movs	r2, r3
 8006256:	2100      	movs	r1, #0
 8006258:	f000 fda2 	bl	8006da0 <memset>
	uint32_t periode = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]

	periode = (uint32_t) (SystemCoreClock / (note*2));
 8006260:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <setTonePeriode+0x90>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	1dbb      	adds	r3, r7, #6
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	0019      	movs	r1, r3
 800626c:	0010      	movs	r0, r2
 800626e:	f7f9 ff5d 	bl	800012c <__udivsi3>
 8006272:	0003      	movs	r3, r0
 8006274:	61fb      	str	r3, [r7, #28]

	htim3.Instance = TIM3;
 8006276:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <setTonePeriode+0x94>)
 8006278:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <setTonePeriode+0x98>)
 800627a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800627c:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <setTonePeriode+0x94>)
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006282:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <setTonePeriode+0x94>)
 8006284:	2200      	movs	r2, #0
 8006286:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = periode;
 8006288:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <setTonePeriode+0x94>)
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = 0;
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <setTonePeriode+0x94>)
 8006290:	2200      	movs	r2, #0
 8006292:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <setTonePeriode+0x94>)
 8006296:	2200      	movs	r2, #0
 8006298:	615a      	str	r2, [r3, #20]

	HAL_TIM_OC_Init(&htim3);
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <setTonePeriode+0x94>)
 800629c:	0018      	movs	r0, r3
 800629e:	f7fd ff9a 	bl	80041d6 <HAL_TIM_OC_Init>

	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80062a2:	0021      	movs	r1, r4
 80062a4:	187b      	adds	r3, r7, r1
 80062a6:	2230      	movs	r2, #48	; 0x30
 80062a8:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80062aa:	187b      	adds	r3, r7, r1
 80062ac:	2200      	movs	r2, #0
 80062ae:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062b0:	187b      	adds	r3, r7, r1
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062b6:	187b      	adds	r3, r7, r1
 80062b8:	2200      	movs	r2, #0
 80062ba:	60da      	str	r2, [r3, #12]

	HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80062bc:	1879      	adds	r1, r7, r1
 80062be:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <setTonePeriode+0x94>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7fe f82c 	bl	8004320 <HAL_TIM_OC_ConfigChannel>
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b009      	add	sp, #36	; 0x24
 80062ce:	bd90      	pop	{r4, r7, pc}
 80062d0:	20000004 	.word	0x20000004
 80062d4:	2000035c 	.word	0x2000035c
 80062d8:	40000400 	.word	0x40000400

080062dc <setToneVolume>:


void setToneVolume(uint8_t volume)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	0002      	movs	r2, r0
 80062e4:	1dfb      	adds	r3, r7, #7
 80062e6:	701a      	strb	r2, [r3, #0]
	switch (volume)
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d008      	beq.n	8006302 <setToneVolume+0x26>
 80062f0:	dc02      	bgt.n	80062f8 <setToneVolume+0x1c>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d02c      	beq.n	8006350 <setToneVolume+0x74>
	case VOLUME_MUTE:
		HAL_GPIO_WritePin(VOL_EN1_GPIO_Port, VOL_EN1_Pin, 0);
		HAL_GPIO_WritePin(VOL_EN2_GPIO_Port, VOL_EN2_Pin, 0);
		break;
	default:
		break;
 80062f6:	e038      	b.n	800636a <setToneVolume+0x8e>
	switch (volume)
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d00f      	beq.n	800631c <setToneVolume+0x40>
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d01a      	beq.n	8006336 <setToneVolume+0x5a>
		break;
 8006300:	e033      	b.n	800636a <setToneVolume+0x8e>
		HAL_GPIO_WritePin(VOL_EN1_GPIO_Port, VOL_EN1_Pin, 0);
 8006302:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <setToneVolume+0x98>)
 8006304:	2200      	movs	r2, #0
 8006306:	2140      	movs	r1, #64	; 0x40
 8006308:	0018      	movs	r0, r3
 800630a:	f7fc fc70 	bl	8002bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VOL_EN2_GPIO_Port, VOL_EN2_Pin, 1);
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <setToneVolume+0x98>)
 8006310:	2201      	movs	r2, #1
 8006312:	2120      	movs	r1, #32
 8006314:	0018      	movs	r0, r3
 8006316:	f7fc fc6a 	bl	8002bee <HAL_GPIO_WritePin>
		break;
 800631a:	e026      	b.n	800636a <setToneVolume+0x8e>
		HAL_GPIO_WritePin(VOL_EN1_GPIO_Port, VOL_EN1_Pin, 1);
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <setToneVolume+0x98>)
 800631e:	2201      	movs	r2, #1
 8006320:	2140      	movs	r1, #64	; 0x40
 8006322:	0018      	movs	r0, r3
 8006324:	f7fc fc63 	bl	8002bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VOL_EN2_GPIO_Port, VOL_EN2_Pin, 0);
 8006328:	4b12      	ldr	r3, [pc, #72]	; (8006374 <setToneVolume+0x98>)
 800632a:	2200      	movs	r2, #0
 800632c:	2120      	movs	r1, #32
 800632e:	0018      	movs	r0, r3
 8006330:	f7fc fc5d 	bl	8002bee <HAL_GPIO_WritePin>
		break;
 8006334:	e019      	b.n	800636a <setToneVolume+0x8e>
		HAL_GPIO_WritePin(VOL_EN1_GPIO_Port, VOL_EN1_Pin, 1);
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <setToneVolume+0x98>)
 8006338:	2201      	movs	r2, #1
 800633a:	2140      	movs	r1, #64	; 0x40
 800633c:	0018      	movs	r0, r3
 800633e:	f7fc fc56 	bl	8002bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VOL_EN2_GPIO_Port, VOL_EN2_Pin, 1);
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <setToneVolume+0x98>)
 8006344:	2201      	movs	r2, #1
 8006346:	2120      	movs	r1, #32
 8006348:	0018      	movs	r0, r3
 800634a:	f7fc fc50 	bl	8002bee <HAL_GPIO_WritePin>
		break;
 800634e:	e00c      	b.n	800636a <setToneVolume+0x8e>
		HAL_GPIO_WritePin(VOL_EN1_GPIO_Port, VOL_EN1_Pin, 0);
 8006350:	4b08      	ldr	r3, [pc, #32]	; (8006374 <setToneVolume+0x98>)
 8006352:	2200      	movs	r2, #0
 8006354:	2140      	movs	r1, #64	; 0x40
 8006356:	0018      	movs	r0, r3
 8006358:	f7fc fc49 	bl	8002bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VOL_EN2_GPIO_Port, VOL_EN2_Pin, 0);
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <setToneVolume+0x98>)
 800635e:	2200      	movs	r2, #0
 8006360:	2120      	movs	r1, #32
 8006362:	0018      	movs	r0, r3
 8006364:	f7fc fc43 	bl	8002bee <HAL_GPIO_WritePin>
		break;
 8006368:	46c0      	nop			; (mov r8, r8)
	}
}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	b002      	add	sp, #8
 8006370:	bd80      	pop	{r7, pc}
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	50000400 	.word	0x50000400

08006378 <toneStart>:


void toneStart(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 800637c:	4b03      	ldr	r3, [pc, #12]	; (800638c <toneStart+0x14>)
 800637e:	2100      	movs	r1, #0
 8006380:	0018      	movs	r0, r3
 8006382:	f7fd ff5c 	bl	800423e <HAL_TIM_OC_Start>
}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	2000035c 	.word	0x2000035c

08006390 <toneStop>:

void toneStop(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_1);
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <toneStop+0x14>)
 8006396:	2100      	movs	r1, #0
 8006398:	0018      	movs	r0, r3
 800639a:	f7fd ff73 	bl	8004284 <HAL_TIM_OC_Stop>
}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000035c 	.word	0x2000035c

080063a8 <getButtons>:
 */
#include "Peripherals/UserButtons.h"


uint16_t getButtons(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
  uint16_t btnState = 0;
 80063ae:	1dbb      	adds	r3, r7, #6
 80063b0:	2200      	movs	r2, #0
 80063b2:	801a      	strh	r2, [r3, #0]

  // Read buttons
  if( !HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin))
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	00da      	lsls	r2, r3, #3
 80063b8:	23a0      	movs	r3, #160	; 0xa0
 80063ba:	05db      	lsls	r3, r3, #23
 80063bc:	0011      	movs	r1, r2
 80063be:	0018      	movs	r0, r3
 80063c0:	f7fc fbf8 	bl	8002bb4 <HAL_GPIO_ReadPin>
 80063c4:	1e03      	subs	r3, r0, #0
 80063c6:	d107      	bne.n	80063d8 <getButtons+0x30>
  {
	  btnState += BTN_DOWN_Pin;
 80063c8:	1dbb      	adds	r3, r7, #6
 80063ca:	1dba      	adds	r2, r7, #6
 80063cc:	8812      	ldrh	r2, [r2, #0]
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	00c9      	lsls	r1, r1, #3
 80063d2:	468c      	mov	ip, r1
 80063d4:	4462      	add	r2, ip
 80063d6:	801a      	strh	r2, [r3, #0]
  }

  if( !HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin))
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	011a      	lsls	r2, r3, #4
 80063dc:	23a0      	movs	r3, #160	; 0xa0
 80063de:	05db      	lsls	r3, r3, #23
 80063e0:	0011      	movs	r1, r2
 80063e2:	0018      	movs	r0, r3
 80063e4:	f7fc fbe6 	bl	8002bb4 <HAL_GPIO_ReadPin>
 80063e8:	1e03      	subs	r3, r0, #0
 80063ea:	d107      	bne.n	80063fc <getButtons+0x54>
  {
	  btnState += BTN_UP_Pin;
 80063ec:	1dbb      	adds	r3, r7, #6
 80063ee:	1dba      	adds	r2, r7, #6
 80063f0:	8812      	ldrh	r2, [r2, #0]
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	0109      	lsls	r1, r1, #4
 80063f6:	468c      	mov	ip, r1
 80063f8:	4462      	add	r2, ip
 80063fa:	801a      	strh	r2, [r3, #0]
  }

  if( HAL_GPIO_ReadPin(BTN_PWR_ON_OFF_GPIO_Port, BTN_PWR_ON_OFF_Pin))
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	005a      	lsls	r2, r3, #1
 8006400:	23a0      	movs	r3, #160	; 0xa0
 8006402:	05db      	lsls	r3, r3, #23
 8006404:	0011      	movs	r1, r2
 8006406:	0018      	movs	r0, r3
 8006408:	f7fc fbd4 	bl	8002bb4 <HAL_GPIO_ReadPin>
 800640c:	1e03      	subs	r3, r0, #0
 800640e:	d005      	beq.n	800641c <getButtons+0x74>
  {
	  btnState += BTN_PWR_ON_OFF_Pin;
 8006410:	1dbb      	adds	r3, r7, #6
 8006412:	1dba      	adds	r2, r7, #6
 8006414:	8812      	ldrh	r2, [r2, #0]
 8006416:	3201      	adds	r2, #1
 8006418:	32ff      	adds	r2, #255	; 0xff
 800641a:	801a      	strh	r2, [r3, #0]
  }

  // Return an unique value
  return btnState;
 800641c:	1dbb      	adds	r3, r7, #6
 800641e:	881b      	ldrh	r3, [r3, #0]
}
 8006420:	0018      	movs	r0, r3
 8006422:	46bd      	mov	sp, r7
 8006424:	b002      	add	sp, #8
 8006426:	bd80      	pop	{r7, pc}

08006428 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800642e:	003b      	movs	r3, r7
 8006430:	0018      	movs	r0, r3
 8006432:	2308      	movs	r3, #8
 8006434:	001a      	movs	r2, r3
 8006436:	2100      	movs	r1, #0
 8006438:	f000 fcb2 	bl	8006da0 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800643c:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <MX_ADC_Init+0xc0>)
 800643e:	4a2b      	ldr	r2, [pc, #172]	; (80064ec <MX_ADC_Init+0xc4>)
 8006440:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006444:	2200      	movs	r2, #0
 8006446:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006448:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <MX_ADC_Init+0xc0>)
 800644a:	22c0      	movs	r2, #192	; 0xc0
 800644c:	0612      	lsls	r2, r2, #24
 800644e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006450:	4b25      	ldr	r3, [pc, #148]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006452:	2200      	movs	r2, #0
 8006454:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006458:	2200      	movs	r2, #0
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800645c:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <MX_ADC_Init+0xc0>)
 800645e:	2201      	movs	r2, #1
 8006460:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006462:	4b21      	ldr	r3, [pc, #132]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006464:	2200      	movs	r2, #0
 8006466:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006468:	4b1f      	ldr	r3, [pc, #124]	; (80064e8 <MX_ADC_Init+0xc0>)
 800646a:	2220      	movs	r2, #32
 800646c:	2100      	movs	r1, #0
 800646e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006472:	2221      	movs	r2, #33	; 0x21
 8006474:	2100      	movs	r1, #0
 8006476:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006478:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <MX_ADC_Init+0xc0>)
 800647a:	2200      	movs	r2, #0
 800647c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800647e:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006480:	22c2      	movs	r2, #194	; 0xc2
 8006482:	32ff      	adds	r2, #255	; 0xff
 8006484:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006488:	222c      	movs	r2, #44	; 0x2c
 800648a:	2100      	movs	r1, #0
 800648c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800648e:	4b16      	ldr	r3, [pc, #88]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006490:	2204      	movs	r2, #4
 8006492:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006494:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <MX_ADC_Init+0xc0>)
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800649a:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <MX_ADC_Init+0xc0>)
 800649c:	2200      	movs	r2, #0
 800649e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <MX_ADC_Init+0xc0>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80064a6:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <MX_ADC_Init+0xc0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <MX_ADC_Init+0xc0>)
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7fb ff36 	bl	8002320 <HAL_ADC_Init>
 80064b4:	1e03      	subs	r3, r0, #0
 80064b6:	d001      	beq.n	80064bc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80064b8:	f000 f95c 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80064bc:	003b      	movs	r3, r7
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80064c2:	003b      	movs	r3, r7
 80064c4:	2280      	movs	r2, #128	; 0x80
 80064c6:	0152      	lsls	r2, r2, #5
 80064c8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80064ca:	003a      	movs	r2, r7
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <MX_ADC_Init+0xc0>)
 80064ce:	0011      	movs	r1, r2
 80064d0:	0018      	movs	r0, r3
 80064d2:	f7fc f899 	bl	8002608 <HAL_ADC_ConfigChannel>
 80064d6:	1e03      	subs	r3, r0, #0
 80064d8:	d001      	beq.n	80064de <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80064da:	f000 f94b 	bl	8006774 <Error_Handler>
  }

}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b002      	add	sp, #8
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	200002a8 	.word	0x200002a8
 80064ec:	40012400 	.word	0x40012400

080064f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f8:	230c      	movs	r3, #12
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	0018      	movs	r0, r3
 80064fe:	2314      	movs	r3, #20
 8006500:	001a      	movs	r2, r3
 8006502:	2100      	movs	r1, #0
 8006504:	f000 fc4c 	bl	8006da0 <memset>
  if(adcHandle->Instance==ADC1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <HAL_ADC_MspInit+0x74>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d123      	bne.n	800655a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <HAL_ADC_MspInit+0x78>)
 8006514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <HAL_ADC_MspInit+0x78>)
 8006518:	2180      	movs	r1, #128	; 0x80
 800651a:	0089      	lsls	r1, r1, #2
 800651c:	430a      	orrs	r2, r1
 800651e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006520:	4b11      	ldr	r3, [pc, #68]	; (8006568 <HAL_ADC_MspInit+0x78>)
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4b10      	ldr	r3, [pc, #64]	; (8006568 <HAL_ADC_MspInit+0x78>)
 8006526:	2101      	movs	r1, #1
 8006528:	430a      	orrs	r2, r1
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c
 800652c:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <HAL_ADC_MspInit+0x78>)
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	2201      	movs	r2, #1
 8006532:	4013      	ands	r3, r2
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = Vbatt_Pin;
 8006538:	210c      	movs	r1, #12
 800653a:	187b      	adds	r3, r7, r1
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006540:	187b      	adds	r3, r7, r1
 8006542:	2203      	movs	r2, #3
 8006544:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006546:	187b      	adds	r3, r7, r1
 8006548:	2200      	movs	r2, #0
 800654a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Vbatt_GPIO_Port, &GPIO_InitStruct);
 800654c:	187a      	adds	r2, r7, r1
 800654e:	23a0      	movs	r3, #160	; 0xa0
 8006550:	05db      	lsls	r3, r3, #23
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f7fc f9af 	bl	80028b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	46bd      	mov	sp, r7
 800655e:	b008      	add	sp, #32
 8006560:	bd80      	pop	{r7, pc}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	40012400 	.word	0x40012400
 8006568:	40021000 	.word	0x40021000

0800656c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006572:	240c      	movs	r4, #12
 8006574:	193b      	adds	r3, r7, r4
 8006576:	0018      	movs	r0, r3
 8006578:	2314      	movs	r3, #20
 800657a:	001a      	movs	r2, r3
 800657c:	2100      	movs	r1, #0
 800657e:	f000 fc0f 	bl	8006da0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006582:	4b38      	ldr	r3, [pc, #224]	; (8006664 <MX_GPIO_Init+0xf8>)
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	4b37      	ldr	r3, [pc, #220]	; (8006664 <MX_GPIO_Init+0xf8>)
 8006588:	2101      	movs	r1, #1
 800658a:	430a      	orrs	r2, r1
 800658c:	62da      	str	r2, [r3, #44]	; 0x2c
 800658e:	4b35      	ldr	r3, [pc, #212]	; (8006664 <MX_GPIO_Init+0xf8>)
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	2201      	movs	r2, #1
 8006594:	4013      	ands	r3, r2
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800659a:	4b32      	ldr	r3, [pc, #200]	; (8006664 <MX_GPIO_Init+0xf8>)
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <MX_GPIO_Init+0xf8>)
 80065a0:	2102      	movs	r1, #2
 80065a2:	430a      	orrs	r2, r1
 80065a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80065a6:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <MX_GPIO_Init+0xf8>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	2202      	movs	r2, #2
 80065ac:	4013      	ands	r3, r2
 80065ae:	607b      	str	r3, [r7, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|PWR_LATCH_Pin, GPIO_PIN_RESET);
 80065b2:	492d      	ldr	r1, [pc, #180]	; (8006668 <MX_GPIO_Init+0xfc>)
 80065b4:	23a0      	movs	r3, #160	; 0xa0
 80065b6:	05db      	lsls	r3, r3, #23
 80065b8:	2200      	movs	r2, #0
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7fc fb17 	bl	8002bee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VOL_EN2_Pin|VOL_EN1_Pin|LED_Pin, GPIO_PIN_RESET);
 80065c0:	4b2a      	ldr	r3, [pc, #168]	; (800666c <MX_GPIO_Init+0x100>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	21e0      	movs	r1, #224	; 0xe0
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7fc fb11 	bl	8002bee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|PWR_LATCH_Pin;
 80065cc:	193b      	adds	r3, r7, r4
 80065ce:	4a26      	ldr	r2, [pc, #152]	; (8006668 <MX_GPIO_Init+0xfc>)
 80065d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065d2:	193b      	adds	r3, r7, r4
 80065d4:	2201      	movs	r2, #1
 80065d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d8:	193b      	adds	r3, r7, r4
 80065da:	2200      	movs	r2, #0
 80065dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065de:	193b      	adds	r3, r7, r4
 80065e0:	2200      	movs	r2, #0
 80065e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e4:	193a      	adds	r2, r7, r4
 80065e6:	23a0      	movs	r3, #160	; 0xa0
 80065e8:	05db      	lsls	r3, r3, #23
 80065ea:	0011      	movs	r1, r2
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7fc f963 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_PWR_ON_OFF_Pin;
 80065f2:	193b      	adds	r3, r7, r4
 80065f4:	2280      	movs	r2, #128	; 0x80
 80065f6:	0052      	lsls	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065fa:	193b      	adds	r3, r7, r4
 80065fc:	2200      	movs	r2, #0
 80065fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006600:	193b      	adds	r3, r7, r4
 8006602:	2202      	movs	r2, #2
 8006604:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_PWR_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8006606:	193a      	adds	r2, r7, r4
 8006608:	23a0      	movs	r3, #160	; 0xa0
 800660a:	05db      	lsls	r3, r3, #23
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f7fc f952 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_SELECT_Pin|BTN_DOWN_Pin|BTN_UP_Pin;
 8006614:	193b      	adds	r3, r7, r4
 8006616:	22e0      	movs	r2, #224	; 0xe0
 8006618:	0112      	lsls	r2, r2, #4
 800661a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800661c:	193b      	adds	r3, r7, r4
 800661e:	2200      	movs	r2, #0
 8006620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006622:	193b      	adds	r3, r7, r4
 8006624:	2201      	movs	r2, #1
 8006626:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006628:	193a      	adds	r2, r7, r4
 800662a:	23a0      	movs	r3, #160	; 0xa0
 800662c:	05db      	lsls	r3, r3, #23
 800662e:	0011      	movs	r1, r2
 8006630:	0018      	movs	r0, r3
 8006632:	f7fc f941 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VOL_EN2_Pin|VOL_EN1_Pin|LED_Pin;
 8006636:	0021      	movs	r1, r4
 8006638:	187b      	adds	r3, r7, r1
 800663a:	22e0      	movs	r2, #224	; 0xe0
 800663c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800663e:	187b      	adds	r3, r7, r1
 8006640:	2201      	movs	r2, #1
 8006642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	187b      	adds	r3, r7, r1
 8006646:	2200      	movs	r2, #0
 8006648:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800664a:	187b      	adds	r3, r7, r1
 800664c:	2200      	movs	r2, #0
 800664e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006650:	187b      	adds	r3, r7, r1
 8006652:	4a06      	ldr	r2, [pc, #24]	; (800666c <MX_GPIO_Init+0x100>)
 8006654:	0019      	movs	r1, r3
 8006656:	0010      	movs	r0, r2
 8006658:	f7fc f92e 	bl	80028b8 <HAL_GPIO_Init>

}
 800665c:	46c0      	nop			; (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b009      	add	sp, #36	; 0x24
 8006662:	bd90      	pop	{r4, r7, pc}
 8006664:	40021000 	.word	0x40021000
 8006668:	00001010 	.word	0x00001010
 800666c:	50000400 	.word	0x50000400

08006670 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006674:	f7fb fdd6 	bl	8002224 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006678:	f000 f810 	bl	800669c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800667c:	f7ff ff76 	bl	800656c <MX_GPIO_Init>
	MX_SPI1_Init();
 8006680:	f000 f87e 	bl	8006780 <MX_SPI1_Init>
	MX_LPUART1_UART_Init();
 8006684:	f000 fab2 	bl	8006bec <MX_LPUART1_UART_Init>
	MX_ADC_Init();
 8006688:	f7ff fece 	bl	8006428 <MX_ADC_Init>
	MX_TIM3_Init();
 800668c:	f000 f9f0 	bl	8006a70 <MX_TIM3_Init>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		HAL_Delay(500);
	}
#endif

	welcome();
 8006690:	f7fe ffc6 	bl	8005620 <welcome>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		varioRun();
 8006694:	f7fe fea4 	bl	80053e0 <varioRun>
	{
 8006698:	e7fc      	b.n	8006694 <main+0x24>
	...

0800669c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b09b      	sub	sp, #108	; 0x6c
 80066a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066a2:	2434      	movs	r4, #52	; 0x34
 80066a4:	193b      	adds	r3, r7, r4
 80066a6:	0018      	movs	r0, r3
 80066a8:	2334      	movs	r3, #52	; 0x34
 80066aa:	001a      	movs	r2, r3
 80066ac:	2100      	movs	r1, #0
 80066ae:	f000 fb77 	bl	8006da0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066b2:	2320      	movs	r3, #32
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	0018      	movs	r0, r3
 80066b8:	2314      	movs	r3, #20
 80066ba:	001a      	movs	r2, r3
 80066bc:	2100      	movs	r1, #0
 80066be:	f000 fb6f 	bl	8006da0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066c2:	003b      	movs	r3, r7
 80066c4:	0018      	movs	r0, r3
 80066c6:	2320      	movs	r3, #32
 80066c8:	001a      	movs	r2, r3
 80066ca:	2100      	movs	r1, #0
 80066cc:	f000 fb68 	bl	8006da0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066d0:	4b26      	ldr	r3, [pc, #152]	; (800676c <SystemClock_Config+0xd0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <SystemClock_Config+0xd4>)
 80066d6:	401a      	ands	r2, r3
 80066d8:	4b24      	ldr	r3, [pc, #144]	; (800676c <SystemClock_Config+0xd0>)
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	0109      	lsls	r1, r1, #4
 80066de:	430a      	orrs	r2, r1
 80066e0:	601a      	str	r2, [r3, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80066e2:	0021      	movs	r1, r4
 80066e4:	187b      	adds	r3, r7, r1
 80066e6:	2210      	movs	r2, #16
 80066e8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80066ea:	187b      	adds	r3, r7, r1
 80066ec:	2201      	movs	r2, #1
 80066ee:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80066f0:	187b      	adds	r3, r7, r1
 80066f2:	2200      	movs	r2, #0
 80066f4:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80066f6:	187b      	adds	r3, r7, r1
 80066f8:	22a0      	movs	r2, #160	; 0xa0
 80066fa:	0212      	lsls	r2, r2, #8
 80066fc:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80066fe:	187b      	adds	r3, r7, r1
 8006700:	2200      	movs	r2, #0
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006704:	187b      	adds	r3, r7, r1
 8006706:	0018      	movs	r0, r3
 8006708:	f7fc faa0 	bl	8002c4c <HAL_RCC_OscConfig>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d001      	beq.n	8006714 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8006710:	f000 f830 	bl	8006774 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006714:	2120      	movs	r1, #32
 8006716:	187b      	adds	r3, r7, r1
 8006718:	220f      	movs	r2, #15
 800671a:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800671c:	187b      	adds	r3, r7, r1
 800671e:	2200      	movs	r2, #0
 8006720:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006722:	187b      	adds	r3, r7, r1
 8006724:	2200      	movs	r2, #0
 8006726:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006728:	187b      	adds	r3, r7, r1
 800672a:	2200      	movs	r2, #0
 800672c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800672e:	187b      	adds	r3, r7, r1
 8006730:	2200      	movs	r2, #0
 8006732:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006734:	187b      	adds	r3, r7, r1
 8006736:	2100      	movs	r1, #0
 8006738:	0018      	movs	r0, r3
 800673a:	f7fc fe01 	bl	8003340 <HAL_RCC_ClockConfig>
 800673e:	1e03      	subs	r3, r0, #0
 8006740:	d001      	beq.n	8006746 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8006742:	f000 f817 	bl	8006774 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006746:	003b      	movs	r3, r7
 8006748:	2204      	movs	r2, #4
 800674a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800674c:	003b      	movs	r3, r7
 800674e:	2200      	movs	r2, #0
 8006750:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006752:	003b      	movs	r3, r7
 8006754:	0018      	movs	r0, r3
 8006756:	f7fc ffd7 	bl	8003708 <HAL_RCCEx_PeriphCLKConfig>
 800675a:	1e03      	subs	r3, r0, #0
 800675c:	d001      	beq.n	8006762 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800675e:	f000 f809 	bl	8006774 <Error_Handler>
	}
}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	46bd      	mov	sp, r7
 8006766:	b01b      	add	sp, #108	; 0x6c
 8006768:	bd90      	pop	{r4, r7, pc}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	40007000 	.word	0x40007000
 8006770:	ffffe7ff 	.word	0xffffe7ff

08006774 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8006784:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <MX_SPI1_Init+0x68>)
 8006786:	4a19      	ldr	r2, [pc, #100]	; (80067ec <MX_SPI1_Init+0x6c>)
 8006788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <MX_SPI1_Init+0x68>)
 800678c:	2282      	movs	r2, #130	; 0x82
 800678e:	0052      	lsls	r2, r2, #1
 8006790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <MX_SPI1_Init+0x68>)
 8006794:	2200      	movs	r2, #0
 8006796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <MX_SPI1_Init+0x68>)
 800679a:	2200      	movs	r2, #0
 800679c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800679e:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067a4:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80067aa:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067ac:	2280      	movs	r2, #128	; 0x80
 80067ae:	0092      	lsls	r2, r2, #2
 80067b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067cc:	2207      	movs	r2, #7
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <MX_SPI1_Init+0x68>)
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fd f8de 	bl	8003994 <HAL_SPI_Init>
 80067d8:	1e03      	subs	r3, r0, #0
 80067da:	d001      	beq.n	80067e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80067dc:	f7ff ffca 	bl	8006774 <Error_Handler>
  }

}
 80067e0:	46c0      	nop			; (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	20000304 	.word	0x20000304
 80067ec:	40013000 	.word	0x40013000

080067f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f8:	230c      	movs	r3, #12
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	0018      	movs	r0, r3
 80067fe:	2314      	movs	r3, #20
 8006800:	001a      	movs	r2, r3
 8006802:	2100      	movs	r1, #0
 8006804:	f000 facc 	bl	8006da0 <memset>
  if(spiHandle->Instance==SPI1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a18      	ldr	r2, [pc, #96]	; (8006870 <HAL_SPI_MspInit+0x80>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d129      	bne.n	8006866 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006812:	4b18      	ldr	r3, [pc, #96]	; (8006874 <HAL_SPI_MspInit+0x84>)
 8006814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006816:	4b17      	ldr	r3, [pc, #92]	; (8006874 <HAL_SPI_MspInit+0x84>)
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	0149      	lsls	r1, r1, #5
 800681c:	430a      	orrs	r2, r1
 800681e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006820:	4b14      	ldr	r3, [pc, #80]	; (8006874 <HAL_SPI_MspInit+0x84>)
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	4b13      	ldr	r3, [pc, #76]	; (8006874 <HAL_SPI_MspInit+0x84>)
 8006826:	2101      	movs	r1, #1
 8006828:	430a      	orrs	r2, r1
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <HAL_SPI_MspInit+0x84>)
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	2201      	movs	r2, #1
 8006832:	4013      	ands	r3, r2
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006838:	210c      	movs	r1, #12
 800683a:	187b      	adds	r3, r7, r1
 800683c:	22e0      	movs	r2, #224	; 0xe0
 800683e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006840:	187b      	adds	r3, r7, r1
 8006842:	2202      	movs	r2, #2
 8006844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006846:	187b      	adds	r3, r7, r1
 8006848:	2200      	movs	r2, #0
 800684a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800684c:	187b      	adds	r3, r7, r1
 800684e:	2203      	movs	r2, #3
 8006850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006852:	187b      	adds	r3, r7, r1
 8006854:	2200      	movs	r2, #0
 8006856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006858:	187a      	adds	r2, r7, r1
 800685a:	23a0      	movs	r3, #160	; 0xa0
 800685c:	05db      	lsls	r3, r3, #23
 800685e:	0011      	movs	r1, r2
 8006860:	0018      	movs	r0, r3
 8006862:	f7fc f829 	bl	80028b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	46bd      	mov	sp, r7
 800686a:	b008      	add	sp, #32
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	40013000 	.word	0x40013000
 8006874:	40021000 	.word	0x40021000

08006878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800687c:	4b07      	ldr	r3, [pc, #28]	; (800689c <HAL_MspInit+0x24>)
 800687e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <HAL_MspInit+0x24>)
 8006882:	2101      	movs	r1, #1
 8006884:	430a      	orrs	r2, r1
 8006886:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <HAL_MspInit+0x24>)
 800688a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688c:	4b03      	ldr	r3, [pc, #12]	; (800689c <HAL_MspInit+0x24>)
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	0549      	lsls	r1, r1, #21
 8006892:	430a      	orrs	r2, r1
 8006894:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40021000 	.word	0x40021000

080068a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068a4:	46c0      	nop			; (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068ae:	e7fe      	b.n	80068ae <HardFault_Handler+0x4>

080068b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80068b4:	46c0      	nop			; (mov r8, r8)
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068c8:	f7fb fcf6 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	e00a      	b.n	80068fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068e4:	e000      	b.n	80068e8 <_read+0x16>
 80068e6:	bf00      	nop
 80068e8:	0001      	movs	r1, r0
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	60ba      	str	r2, [r7, #8]
 80068f0:	b2ca      	uxtb	r2, r1
 80068f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3301      	adds	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	429a      	cmp	r2, r3
 8006900:	dbf0      	blt.n	80068e4 <_read+0x12>
	}

return len;
 8006902:	687b      	ldr	r3, [r7, #4]
}
 8006904:	0018      	movs	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	b006      	add	sp, #24
 800690a:	bd80      	pop	{r7, pc}

0800690c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e009      	b.n	8006932 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	60ba      	str	r2, [r7, #8]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	0018      	movs	r0, r3
 8006928:	f000 f9d2 	bl	8006cd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	3301      	adds	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	dbf1      	blt.n	800691e <_write+0x12>
	}
	return len;
 800693a:	687b      	ldr	r3, [r7, #4]
}
 800693c:	0018      	movs	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	b006      	add	sp, #24
 8006942:	bd80      	pop	{r7, pc}

08006944 <_close>:

int _close(int file)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	return -1;
 800694c:	2301      	movs	r3, #1
 800694e:	425b      	negs	r3, r3
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b002      	add	sp, #8
 8006956:	bd80      	pop	{r7, pc}

08006958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	0192      	lsls	r2, r2, #6
 8006968:	605a      	str	r2, [r3, #4]
	return 0;
 800696a:	2300      	movs	r3, #0
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b002      	add	sp, #8
 8006972:	bd80      	pop	{r7, pc}

08006974 <_isatty>:

int _isatty(int file)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	return 1;
 800697c:	2301      	movs	r3, #1
}
 800697e:	0018      	movs	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	b002      	add	sp, #8
 8006984:	bd80      	pop	{r7, pc}

08006986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
	return 0;
 8006992:	2300      	movs	r3, #0
}
 8006994:	0018      	movs	r0, r3
 8006996:	46bd      	mov	sp, r7
 8006998:	b004      	add	sp, #16
 800699a:	bd80      	pop	{r7, pc}

0800699c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80069a4:	4b11      	ldr	r3, [pc, #68]	; (80069ec <_sbrk+0x50>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <_sbrk+0x16>
		heap_end = &end;
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <_sbrk+0x50>)
 80069ae:	4a10      	ldr	r2, [pc, #64]	; (80069f0 <_sbrk+0x54>)
 80069b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80069b2:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <_sbrk+0x50>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <_sbrk+0x50>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	18d3      	adds	r3, r2, r3
 80069c0:	466a      	mov	r2, sp
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d907      	bls.n	80069d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80069c6:	f000 f9c1 	bl	8006d4c <__errno>
 80069ca:	0003      	movs	r3, r0
 80069cc:	220c      	movs	r2, #12
 80069ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80069d0:	2301      	movs	r3, #1
 80069d2:	425b      	negs	r3, r3
 80069d4:	e006      	b.n	80069e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <_sbrk+0x50>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	18d2      	adds	r2, r2, r3
 80069de:	4b03      	ldr	r3, [pc, #12]	; (80069ec <_sbrk+0x50>)
 80069e0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80069e2:	68fb      	ldr	r3, [r7, #12]
}
 80069e4:	0018      	movs	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b004      	add	sp, #16
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000264 	.word	0x20000264
 80069f0:	20000420 	.word	0x20000420

080069f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80069f8:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <SystemInit+0x64>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <SystemInit+0x64>)
 80069fe:	2180      	movs	r1, #128	; 0x80
 8006a00:	0049      	lsls	r1, r1, #1
 8006a02:	430a      	orrs	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <SystemInit+0x64>)
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <SystemInit+0x64>)
 8006a0c:	4913      	ldr	r1, [pc, #76]	; (8006a5c <SystemInit+0x68>)
 8006a0e:	400a      	ands	r2, r1
 8006a10:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006a12:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <SystemInit+0x64>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <SystemInit+0x64>)
 8006a18:	4911      	ldr	r1, [pc, #68]	; (8006a60 <SystemInit+0x6c>)
 8006a1a:	400a      	ands	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	; (8006a58 <SystemInit+0x64>)
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <SystemInit+0x64>)
 8006a24:	2101      	movs	r1, #1
 8006a26:	438a      	bics	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <SystemInit+0x64>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <SystemInit+0x64>)
 8006a30:	490c      	ldr	r1, [pc, #48]	; (8006a64 <SystemInit+0x70>)
 8006a32:	400a      	ands	r2, r1
 8006a34:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <SystemInit+0x64>)
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <SystemInit+0x64>)
 8006a3c:	490a      	ldr	r1, [pc, #40]	; (8006a68 <SystemInit+0x74>)
 8006a3e:	400a      	ands	r2, r1
 8006a40:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <SystemInit+0x64>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a48:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <SystemInit+0x78>)
 8006a4a:	2280      	movs	r2, #128	; 0x80
 8006a4c:	0512      	lsls	r2, r2, #20
 8006a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	88ff400c 	.word	0x88ff400c
 8006a60:	fef6fff6 	.word	0xfef6fff6
 8006a64:	fffbffff 	.word	0xfffbffff
 8006a68:	ff02ffff 	.word	0xff02ffff
 8006a6c:	e000ed00 	.word	0xe000ed00

08006a70 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a76:	2310      	movs	r3, #16
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	001a      	movs	r2, r3
 8006a80:	2100      	movs	r1, #0
 8006a82:	f000 f98d 	bl	8006da0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a86:	003b      	movs	r3, r7
 8006a88:	0018      	movs	r0, r3
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	001a      	movs	r2, r3
 8006a8e:	2100      	movs	r1, #0
 8006a90:	f000 f986 	bl	8006da0 <memset>

  htim3.Instance = TIM3;
 8006a94:	4b28      	ldr	r3, [pc, #160]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006a96:	4a29      	ldr	r2, [pc, #164]	; (8006b3c <MX_TIM3_Init+0xcc>)
 8006a98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006a9a:	4b27      	ldr	r3, [pc, #156]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8006aa6:	4b24      	ldr	r3, [pc, #144]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aac:	4b22      	ldr	r3, [pc, #136]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ab2:	4b21      	ldr	r3, [pc, #132]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006ab8:	4b1f      	ldr	r3, [pc, #124]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7fd fc04 	bl	80042c8 <HAL_TIM_PWM_Init>
 8006ac0:	1e03      	subs	r3, r0, #0
 8006ac2:	d001      	beq.n	8006ac8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006ac4:	f7ff fe56 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ac8:	2110      	movs	r1, #16
 8006aca:	187b      	adds	r3, r7, r1
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006ad6:	187a      	adds	r2, r7, r1
 8006ad8:	4b17      	ldr	r3, [pc, #92]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006ada:	0011      	movs	r1, r2
 8006adc:	0018      	movs	r0, r3
 8006ade:	f7fd feaa 	bl	8004836 <HAL_TIMEx_MasterConfigSynchronization>
 8006ae2:	1e03      	subs	r3, r0, #0
 8006ae4:	d001      	beq.n	8006aea <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8006ae6:	f7ff fe45 	bl	8006774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006aea:	003b      	movs	r3, r7
 8006aec:	2260      	movs	r2, #96	; 0x60
 8006aee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006af0:	003b      	movs	r3, r7
 8006af2:	2200      	movs	r2, #0
 8006af4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006af6:	003b      	movs	r3, r7
 8006af8:	2200      	movs	r2, #0
 8006afa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006afc:	003b      	movs	r3, r7
 8006afe:	2200      	movs	r2, #0
 8006b00:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b02:	0039      	movs	r1, r7
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7fd fc57 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8006b0e:	1e03      	subs	r3, r0, #0
 8006b10:	d001      	beq.n	8006b16 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8006b12:	f7ff fe2f 	bl	8006774 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM21_TI1_GPIO) != HAL_OK)
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006b18:	2100      	movs	r1, #0
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7fd fece 	bl	80048bc <HAL_TIMEx_RemapConfig>
 8006b20:	1e03      	subs	r3, r0, #0
 8006b22:	d001      	beq.n	8006b28 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8006b24:	f7ff fe26 	bl	8006774 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <MX_TIM3_Init+0xc8>)
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f000 f820 	bl	8006b70 <HAL_TIM_MspPostInit>

}
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b006      	add	sp, #24
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	2000035c 	.word	0x2000035c
 8006b3c:	40000400 	.word	0x40000400

08006b40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a06      	ldr	r2, [pc, #24]	; (8006b68 <HAL_TIM_PWM_MspInit+0x28>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d105      	bne.n	8006b5e <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <HAL_TIM_PWM_MspInit+0x2c>)
 8006b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_TIM_PWM_MspInit+0x2c>)
 8006b58:	2102      	movs	r1, #2
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40021000 	.word	0x40021000

08006b70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b78:	230c      	movs	r3, #12
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	2314      	movs	r3, #20
 8006b80:	001a      	movs	r2, r3
 8006b82:	2100      	movs	r1, #0
 8006b84:	f000 f90c 	bl	8006da0 <memset>
  if(timHandle->Instance==TIM3)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <HAL_TIM_MspPostInit+0x70>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d121      	bne.n	8006bd6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b92:	4b14      	ldr	r3, [pc, #80]	; (8006be4 <HAL_TIM_MspPostInit+0x74>)
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_TIM_MspPostInit+0x74>)
 8006b98:	2102      	movs	r1, #2
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b9e:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <HAL_TIM_MspPostInit+0x74>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006baa:	210c      	movs	r1, #12
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	2210      	movs	r2, #16
 8006bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb2:	187b      	adds	r3, r7, r1
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bbe:	187b      	adds	r3, r7, r1
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006bc4:	187b      	adds	r3, r7, r1
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bca:	187b      	adds	r3, r7, r1
 8006bcc:	4a06      	ldr	r2, [pc, #24]	; (8006be8 <HAL_TIM_MspPostInit+0x78>)
 8006bce:	0019      	movs	r1, r3
 8006bd0:	0010      	movs	r0, r2
 8006bd2:	f7fb fe71 	bl	80028b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b008      	add	sp, #32
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40021000 	.word	0x40021000
 8006be8:	50000400 	.word	0x50000400

08006bec <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006bf2:	4a14      	ldr	r2, [pc, #80]	; (8006c44 <MX_LPUART1_UART_Init+0x58>)
 8006bf4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006bf6:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006bf8:	22e1      	movs	r2, #225	; 0xe1
 8006bfa:	0252      	lsls	r2, r2, #9
 8006bfc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006bfe:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c12:	220c      	movs	r2, #12
 8006c14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c1c:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <MX_LPUART1_UART_Init+0x54>)
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7fd fe64 	bl	80048f8 <HAL_UART_Init>
 8006c30:	1e03      	subs	r3, r0, #0
 8006c32:	d001      	beq.n	8006c38 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8006c34:	f7ff fd9e 	bl	8006774 <Error_Handler>
  }

}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	20000398 	.word	0x20000398
 8006c44:	40004800 	.word	0x40004800

08006c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c50:	230c      	movs	r3, #12
 8006c52:	18fb      	adds	r3, r7, r3
 8006c54:	0018      	movs	r0, r3
 8006c56:	2314      	movs	r3, #20
 8006c58:	001a      	movs	r2, r3
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	f000 f8a0 	bl	8006da0 <memset>
  if(uartHandle->Instance==LPUART1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <HAL_UART_MspInit+0x80>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d129      	bne.n	8006cbe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006c6a:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <HAL_UART_MspInit+0x84>)
 8006c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6e:	4b17      	ldr	r3, [pc, #92]	; (8006ccc <HAL_UART_MspInit+0x84>)
 8006c70:	2180      	movs	r1, #128	; 0x80
 8006c72:	02c9      	lsls	r1, r1, #11
 8006c74:	430a      	orrs	r2, r1
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c78:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <HAL_UART_MspInit+0x84>)
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <HAL_UART_MspInit+0x84>)
 8006c7e:	2101      	movs	r1, #1
 8006c80:	430a      	orrs	r2, r1
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c84:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <HAL_UART_MspInit+0x84>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	2201      	movs	r2, #1
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006c90:	210c      	movs	r1, #12
 8006c92:	187b      	adds	r3, r7, r1
 8006c94:	220c      	movs	r2, #12
 8006c96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c98:	187b      	adds	r3, r7, r1
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	187b      	adds	r3, r7, r1
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca4:	187b      	adds	r3, r7, r1
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8006caa:	187b      	adds	r3, r7, r1
 8006cac:	2206      	movs	r2, #6
 8006cae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb0:	187a      	adds	r2, r7, r1
 8006cb2:	23a0      	movs	r3, #160	; 0xa0
 8006cb4:	05db      	lsls	r3, r3, #23
 8006cb6:	0011      	movs	r1, r2
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7fb fdfd 	bl	80028b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b008      	add	sp, #32
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	40004800 	.word	0x40004800
 8006ccc:	40021000 	.word	0x40021000

08006cd0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <__io_putchar+0x20>)
 8006cda:	1d39      	adds	r1, r7, #4
 8006cdc:	4805      	ldr	r0, [pc, #20]	; (8006cf4 <__io_putchar+0x24>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f7fd fe5e 	bl	80049a0 <HAL_UART_Transmit>

  return ch;
 8006ce4:	687b      	ldr	r3, [r7, #4]
}
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b002      	add	sp, #8
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	0000ffff 	.word	0x0000ffff
 8006cf4:	20000398 	.word	0x20000398

08006cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006cf8:	480d      	ldr	r0, [pc, #52]	; (8006d30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006cfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006cfe:	e003      	b.n	8006d08 <LoopCopyDataInit>

08006d00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006d00:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006d02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006d04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006d06:	3104      	adds	r1, #4

08006d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006d08:	480b      	ldr	r0, [pc, #44]	; (8006d38 <LoopForever+0xa>)
  ldr  r3, =_edata
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <LoopForever+0xe>)
  adds  r2, r0, r1
 8006d0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006d0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006d10:	d3f6      	bcc.n	8006d00 <CopyDataInit>
  ldr  r2, =_sbss
 8006d12:	4a0b      	ldr	r2, [pc, #44]	; (8006d40 <LoopForever+0x12>)
  b  LoopFillZerobss
 8006d14:	e002      	b.n	8006d1c <LoopFillZerobss>

08006d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006d16:	2300      	movs	r3, #0
  str  r3, [r2]
 8006d18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d1a:	3204      	adds	r2, #4

08006d1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <LoopForever+0x16>)
  cmp  r2, r3
 8006d1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006d20:	d3f9      	bcc.n	8006d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006d22:	f7ff fe67 	bl	80069f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d26:	f000 f817 	bl	8006d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d2a:	f7ff fca1 	bl	8006670 <main>

08006d2e <LoopForever>:

LoopForever:
    b LoopForever
 8006d2e:	e7fe      	b.n	8006d2e <LoopForever>
   ldr   r0, =_estack
 8006d30:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8006d34:	0800ac68 	.word	0x0800ac68
  ldr  r0, =_sdata
 8006d38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006d3c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006d40:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006d44:	2000041c 	.word	0x2000041c

08006d48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d48:	e7fe      	b.n	8006d48 <ADC1_COMP_IRQHandler>
	...

08006d4c <__errno>:
 8006d4c:	4b01      	ldr	r3, [pc, #4]	; (8006d54 <__errno+0x8>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	4770      	bx	lr
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	20000008 	.word	0x20000008

08006d58 <__libc_init_array>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	4d0c      	ldr	r5, [pc, #48]	; (8006d90 <__libc_init_array+0x38>)
 8006d5e:	4c0d      	ldr	r4, [pc, #52]	; (8006d94 <__libc_init_array+0x3c>)
 8006d60:	1b64      	subs	r4, r4, r5
 8006d62:	10a4      	asrs	r4, r4, #2
 8006d64:	42a6      	cmp	r6, r4
 8006d66:	d109      	bne.n	8006d7c <__libc_init_array+0x24>
 8006d68:	2600      	movs	r6, #0
 8006d6a:	f003 fc67 	bl	800a63c <_init>
 8006d6e:	4d0a      	ldr	r5, [pc, #40]	; (8006d98 <__libc_init_array+0x40>)
 8006d70:	4c0a      	ldr	r4, [pc, #40]	; (8006d9c <__libc_init_array+0x44>)
 8006d72:	1b64      	subs	r4, r4, r5
 8006d74:	10a4      	asrs	r4, r4, #2
 8006d76:	42a6      	cmp	r6, r4
 8006d78:	d105      	bne.n	8006d86 <__libc_init_array+0x2e>
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	00b3      	lsls	r3, r6, #2
 8006d7e:	58eb      	ldr	r3, [r5, r3]
 8006d80:	4798      	blx	r3
 8006d82:	3601      	adds	r6, #1
 8006d84:	e7ee      	b.n	8006d64 <__libc_init_array+0xc>
 8006d86:	00b3      	lsls	r3, r6, #2
 8006d88:	58eb      	ldr	r3, [r5, r3]
 8006d8a:	4798      	blx	r3
 8006d8c:	3601      	adds	r6, #1
 8006d8e:	e7f2      	b.n	8006d76 <__libc_init_array+0x1e>
 8006d90:	0800ac60 	.word	0x0800ac60
 8006d94:	0800ac60 	.word	0x0800ac60
 8006d98:	0800ac60 	.word	0x0800ac60
 8006d9c:	0800ac64 	.word	0x0800ac64

08006da0 <memset>:
 8006da0:	0003      	movs	r3, r0
 8006da2:	1812      	adds	r2, r2, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	7019      	strb	r1, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <__cvt>:
 8006db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db2:	b08b      	sub	sp, #44	; 0x2c
 8006db4:	0014      	movs	r4, r2
 8006db6:	1e1d      	subs	r5, r3, #0
 8006db8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006dba:	da53      	bge.n	8006e64 <__cvt+0xb4>
 8006dbc:	2480      	movs	r4, #128	; 0x80
 8006dbe:	0624      	lsls	r4, r4, #24
 8006dc0:	191b      	adds	r3, r3, r4
 8006dc2:	001d      	movs	r5, r3
 8006dc4:	0014      	movs	r4, r2
 8006dc6:	232d      	movs	r3, #45	; 0x2d
 8006dc8:	700b      	strb	r3, [r1, #0]
 8006dca:	2320      	movs	r3, #32
 8006dcc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006dce:	2203      	movs	r2, #3
 8006dd0:	439e      	bics	r6, r3
 8006dd2:	2e46      	cmp	r6, #70	; 0x46
 8006dd4:	d007      	beq.n	8006de6 <__cvt+0x36>
 8006dd6:	0033      	movs	r3, r6
 8006dd8:	3b45      	subs	r3, #69	; 0x45
 8006dda:	4259      	negs	r1, r3
 8006ddc:	414b      	adcs	r3, r1
 8006dde:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006de0:	3a01      	subs	r2, #1
 8006de2:	18cb      	adds	r3, r1, r3
 8006de4:	9310      	str	r3, [sp, #64]	; 0x40
 8006de6:	ab09      	add	r3, sp, #36	; 0x24
 8006de8:	9304      	str	r3, [sp, #16]
 8006dea:	ab08      	add	r3, sp, #32
 8006dec:	9303      	str	r3, [sp, #12]
 8006dee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006df0:	9200      	str	r2, [sp, #0]
 8006df2:	9302      	str	r3, [sp, #8]
 8006df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df6:	0022      	movs	r2, r4
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	002b      	movs	r3, r5
 8006dfc:	f000 fe0c 	bl	8007a18 <_dtoa_r>
 8006e00:	0007      	movs	r7, r0
 8006e02:	2e47      	cmp	r6, #71	; 0x47
 8006e04:	d102      	bne.n	8006e0c <__cvt+0x5c>
 8006e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e08:	07db      	lsls	r3, r3, #31
 8006e0a:	d524      	bpl.n	8006e56 <__cvt+0xa6>
 8006e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	2e46      	cmp	r6, #70	; 0x46
 8006e14:	d114      	bne.n	8006e40 <__cvt+0x90>
 8006e16:	783b      	ldrb	r3, [r7, #0]
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	d10c      	bne.n	8006e36 <__cvt+0x86>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	0020      	movs	r0, r4
 8006e22:	0029      	movs	r1, r5
 8006e24:	f7f9 fb08 	bl	8000438 <__aeabi_dcmpeq>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d104      	bne.n	8006e36 <__cvt+0x86>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e38:	9a07      	ldr	r2, [sp, #28]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	18d3      	adds	r3, r2, r3
 8006e3e:	9307      	str	r3, [sp, #28]
 8006e40:	2200      	movs	r2, #0
 8006e42:	2300      	movs	r3, #0
 8006e44:	0020      	movs	r0, r4
 8006e46:	0029      	movs	r1, r5
 8006e48:	f7f9 faf6 	bl	8000438 <__aeabi_dcmpeq>
 8006e4c:	2230      	movs	r2, #48	; 0x30
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d00d      	beq.n	8006e6e <__cvt+0xbe>
 8006e52:	9b07      	ldr	r3, [sp, #28]
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	0038      	movs	r0, r7
 8006e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e5c:	1bdb      	subs	r3, r3, r7
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	b00b      	add	sp, #44	; 0x2c
 8006e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e64:	2300      	movs	r3, #0
 8006e66:	e7af      	b.n	8006dc8 <__cvt+0x18>
 8006e68:	1c59      	adds	r1, r3, #1
 8006e6a:	9109      	str	r1, [sp, #36]	; 0x24
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e70:	9907      	ldr	r1, [sp, #28]
 8006e72:	428b      	cmp	r3, r1
 8006e74:	d3f8      	bcc.n	8006e68 <__cvt+0xb8>
 8006e76:	e7ee      	b.n	8006e56 <__cvt+0xa6>

08006e78 <__exponent>:
 8006e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7a:	1c83      	adds	r3, r0, #2
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	0006      	movs	r6, r0
 8006e82:	000c      	movs	r4, r1
 8006e84:	7002      	strb	r2, [r0, #0]
 8006e86:	232b      	movs	r3, #43	; 0x2b
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	da01      	bge.n	8006e90 <__exponent+0x18>
 8006e8c:	232d      	movs	r3, #45	; 0x2d
 8006e8e:	424c      	negs	r4, r1
 8006e90:	7073      	strb	r3, [r6, #1]
 8006e92:	2c09      	cmp	r4, #9
 8006e94:	dd22      	ble.n	8006edc <__exponent+0x64>
 8006e96:	ab02      	add	r3, sp, #8
 8006e98:	1ddd      	adds	r5, r3, #7
 8006e9a:	0020      	movs	r0, r4
 8006e9c:	210a      	movs	r1, #10
 8006e9e:	f7f9 fab5 	bl	800040c <__aeabi_idivmod>
 8006ea2:	1e6f      	subs	r7, r5, #1
 8006ea4:	3130      	adds	r1, #48	; 0x30
 8006ea6:	7039      	strb	r1, [r7, #0]
 8006ea8:	0020      	movs	r0, r4
 8006eaa:	210a      	movs	r1, #10
 8006eac:	f7f9 f9c8 	bl	8000240 <__divsi3>
 8006eb0:	0004      	movs	r4, r0
 8006eb2:	2809      	cmp	r0, #9
 8006eb4:	dc0b      	bgt.n	8006ece <__exponent+0x56>
 8006eb6:	3d02      	subs	r5, #2
 8006eb8:	3430      	adds	r4, #48	; 0x30
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	702c      	strb	r4, [r5, #0]
 8006ebe:	aa02      	add	r2, sp, #8
 8006ec0:	3207      	adds	r2, #7
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	42aa      	cmp	r2, r5
 8006ec6:	d804      	bhi.n	8006ed2 <__exponent+0x5a>
 8006ec8:	1b80      	subs	r0, r0, r6
 8006eca:	b005      	add	sp, #20
 8006ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ece:	003d      	movs	r5, r7
 8006ed0:	e7e3      	b.n	8006e9a <__exponent+0x22>
 8006ed2:	782a      	ldrb	r2, [r5, #0]
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	e7f0      	b.n	8006ebe <__exponent+0x46>
 8006edc:	2330      	movs	r3, #48	; 0x30
 8006ede:	18e4      	adds	r4, r4, r3
 8006ee0:	70b3      	strb	r3, [r6, #2]
 8006ee2:	1d30      	adds	r0, r6, #4
 8006ee4:	70f4      	strb	r4, [r6, #3]
 8006ee6:	e7ef      	b.n	8006ec8 <__exponent+0x50>

08006ee8 <_printf_float>:
 8006ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eea:	b095      	sub	sp, #84	; 0x54
 8006eec:	000c      	movs	r4, r1
 8006eee:	920a      	str	r2, [sp, #40]	; 0x28
 8006ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ef2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006ef4:	9009      	str	r0, [sp, #36]	; 0x24
 8006ef6:	f001 fcfb 	bl	80088f0 <_localeconv_r>
 8006efa:	6803      	ldr	r3, [r0, #0]
 8006efc:	0018      	movs	r0, r3
 8006efe:	930c      	str	r3, [sp, #48]	; 0x30
 8006f00:	f7f9 f902 	bl	8000108 <strlen>
 8006f04:	2300      	movs	r3, #0
 8006f06:	9312      	str	r3, [sp, #72]	; 0x48
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	900e      	str	r0, [sp, #56]	; 0x38
 8006f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006f0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f10:	7e27      	ldrb	r7, [r4, #24]
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	2207      	movs	r2, #7
 8006f16:	05c9      	lsls	r1, r1, #23
 8006f18:	d545      	bpl.n	8006fa6 <_printf_float+0xbe>
 8006f1a:	189b      	adds	r3, r3, r2
 8006f1c:	4393      	bics	r3, r2
 8006f1e:	001a      	movs	r2, r3
 8006f20:	3208      	adds	r2, #8
 8006f22:	602a      	str	r2, [r5, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f2a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006f30:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8006f32:	006b      	lsls	r3, r5, #1
 8006f34:	085b      	lsrs	r3, r3, #1
 8006f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f38:	4252      	negs	r2, r2
 8006f3a:	4bac      	ldr	r3, [pc, #688]	; (80071ec <_printf_float+0x304>)
 8006f3c:	0030      	movs	r0, r6
 8006f3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f40:	f7fb f888 	bl	8002054 <__aeabi_dcmpun>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d130      	bne.n	8006faa <_printf_float+0xc2>
 8006f48:	2201      	movs	r2, #1
 8006f4a:	4ba8      	ldr	r3, [pc, #672]	; (80071ec <_printf_float+0x304>)
 8006f4c:	4252      	negs	r2, r2
 8006f4e:	0030      	movs	r0, r6
 8006f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f52:	f7f9 fa81 	bl	8000458 <__aeabi_dcmple>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d127      	bne.n	8006faa <_printf_float+0xc2>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	0030      	movs	r0, r6
 8006f60:	0029      	movs	r1, r5
 8006f62:	f7f9 fa6f 	bl	8000444 <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d003      	beq.n	8006f72 <_printf_float+0x8a>
 8006f6a:	0023      	movs	r3, r4
 8006f6c:	222d      	movs	r2, #45	; 0x2d
 8006f6e:	3343      	adds	r3, #67	; 0x43
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	4d9f      	ldr	r5, [pc, #636]	; (80071f0 <_printf_float+0x308>)
 8006f74:	2f47      	cmp	r7, #71	; 0x47
 8006f76:	d800      	bhi.n	8006f7a <_printf_float+0x92>
 8006f78:	4d9e      	ldr	r5, [pc, #632]	; (80071f4 <_printf_float+0x30c>)
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	2600      	movs	r6, #0
 8006f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	3301      	adds	r3, #1
 8006f84:	439a      	bics	r2, r3
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8a:	aa13      	add	r2, sp, #76	; 0x4c
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	0021      	movs	r1, r4
 8006f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f94:	f000 f9f4 	bl	8007380 <_printf_common>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d000      	beq.n	8006f9e <_printf_float+0xb6>
 8006f9c:	e093      	b.n	80070c6 <_printf_float+0x1de>
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	4240      	negs	r0, r0
 8006fa2:	b015      	add	sp, #84	; 0x54
 8006fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa6:	3307      	adds	r3, #7
 8006fa8:	e7b8      	b.n	8006f1c <_printf_float+0x34>
 8006faa:	0032      	movs	r2, r6
 8006fac:	002b      	movs	r3, r5
 8006fae:	0030      	movs	r0, r6
 8006fb0:	0029      	movs	r1, r5
 8006fb2:	f7fb f84f 	bl	8002054 <__aeabi_dcmpun>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d004      	beq.n	8006fc4 <_printf_float+0xdc>
 8006fba:	4d8f      	ldr	r5, [pc, #572]	; (80071f8 <_printf_float+0x310>)
 8006fbc:	2f47      	cmp	r7, #71	; 0x47
 8006fbe:	d8dc      	bhi.n	8006f7a <_printf_float+0x92>
 8006fc0:	4d8e      	ldr	r5, [pc, #568]	; (80071fc <_printf_float+0x314>)
 8006fc2:	e7da      	b.n	8006f7a <_printf_float+0x92>
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fc8:	6862      	ldr	r2, [r4, #4]
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	1c51      	adds	r1, r2, #1
 8006fd0:	d143      	bne.n	800705a <_printf_float+0x172>
 8006fd2:	3207      	adds	r2, #7
 8006fd4:	6062      	str	r2, [r4, #4]
 8006fd6:	aa12      	add	r2, sp, #72	; 0x48
 8006fd8:	2100      	movs	r1, #0
 8006fda:	9205      	str	r2, [sp, #20]
 8006fdc:	aa11      	add	r2, sp, #68	; 0x44
 8006fde:	9203      	str	r2, [sp, #12]
 8006fe0:	2223      	movs	r2, #35	; 0x23
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	9106      	str	r1, [sp, #24]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	a908      	add	r1, sp, #32
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	1852      	adds	r2, r2, r1
 8006fee:	9202      	str	r2, [sp, #8]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	0032      	movs	r2, r6
 8006ff4:	002b      	movs	r3, r5
 8006ff6:	9704      	str	r7, [sp, #16]
 8006ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ffa:	f7ff fed9 	bl	8006db0 <__cvt>
 8006ffe:	2320      	movs	r3, #32
 8007000:	003a      	movs	r2, r7
 8007002:	0005      	movs	r5, r0
 8007004:	439a      	bics	r2, r3
 8007006:	2a47      	cmp	r2, #71	; 0x47
 8007008:	d107      	bne.n	800701a <_printf_float+0x132>
 800700a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800700c:	1cda      	adds	r2, r3, #3
 800700e:	db02      	blt.n	8007016 <_printf_float+0x12e>
 8007010:	6862      	ldr	r2, [r4, #4]
 8007012:	4293      	cmp	r3, r2
 8007014:	dd45      	ble.n	80070a2 <_printf_float+0x1ba>
 8007016:	3f02      	subs	r7, #2
 8007018:	b2ff      	uxtb	r7, r7
 800701a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800701c:	2f65      	cmp	r7, #101	; 0x65
 800701e:	d825      	bhi.n	800706c <_printf_float+0x184>
 8007020:	0020      	movs	r0, r4
 8007022:	3901      	subs	r1, #1
 8007024:	003a      	movs	r2, r7
 8007026:	3050      	adds	r0, #80	; 0x50
 8007028:	9111      	str	r1, [sp, #68]	; 0x44
 800702a:	f7ff ff25 	bl	8006e78 <__exponent>
 800702e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007030:	0006      	movs	r6, r0
 8007032:	1813      	adds	r3, r2, r0
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	2a01      	cmp	r2, #1
 8007038:	dc02      	bgt.n	8007040 <_printf_float+0x158>
 800703a:	6822      	ldr	r2, [r4, #0]
 800703c:	07d2      	lsls	r2, r2, #31
 800703e:	d501      	bpl.n	8007044 <_printf_float+0x15c>
 8007040:	3301      	adds	r3, #1
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	2323      	movs	r3, #35	; 0x23
 8007046:	aa08      	add	r2, sp, #32
 8007048:	189b      	adds	r3, r3, r2
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d09b      	beq.n	8006f88 <_printf_float+0xa0>
 8007050:	0023      	movs	r3, r4
 8007052:	222d      	movs	r2, #45	; 0x2d
 8007054:	3343      	adds	r3, #67	; 0x43
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e796      	b.n	8006f88 <_printf_float+0xa0>
 800705a:	2f67      	cmp	r7, #103	; 0x67
 800705c:	d100      	bne.n	8007060 <_printf_float+0x178>
 800705e:	e176      	b.n	800734e <_printf_float+0x466>
 8007060:	2f47      	cmp	r7, #71	; 0x47
 8007062:	d1b8      	bne.n	8006fd6 <_printf_float+0xee>
 8007064:	2a00      	cmp	r2, #0
 8007066:	d1b6      	bne.n	8006fd6 <_printf_float+0xee>
 8007068:	2201      	movs	r2, #1
 800706a:	e7b3      	b.n	8006fd4 <_printf_float+0xec>
 800706c:	2f66      	cmp	r7, #102	; 0x66
 800706e:	d119      	bne.n	80070a4 <_printf_float+0x1bc>
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	2900      	cmp	r1, #0
 8007074:	dd0c      	ble.n	8007090 <_printf_float+0x1a8>
 8007076:	6121      	str	r1, [r4, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <_printf_float+0x19a>
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	07d2      	lsls	r2, r2, #31
 8007080:	d502      	bpl.n	8007088 <_printf_float+0x1a0>
 8007082:	3301      	adds	r3, #1
 8007084:	185b      	adds	r3, r3, r1
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800708a:	2600      	movs	r6, #0
 800708c:	65a3      	str	r3, [r4, #88]	; 0x58
 800708e:	e7d9      	b.n	8007044 <_printf_float+0x15c>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <_printf_float+0x1b4>
 8007094:	2201      	movs	r2, #1
 8007096:	6821      	ldr	r1, [r4, #0]
 8007098:	4211      	tst	r1, r2
 800709a:	d000      	beq.n	800709e <_printf_float+0x1b6>
 800709c:	1c9a      	adds	r2, r3, #2
 800709e:	6122      	str	r2, [r4, #16]
 80070a0:	e7f2      	b.n	8007088 <_printf_float+0x1a0>
 80070a2:	2767      	movs	r7, #103	; 0x67
 80070a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070a8:	4293      	cmp	r3, r2
 80070aa:	db05      	blt.n	80070b8 <_printf_float+0x1d0>
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	6123      	str	r3, [r4, #16]
 80070b0:	07d2      	lsls	r2, r2, #31
 80070b2:	d5e9      	bpl.n	8007088 <_printf_float+0x1a0>
 80070b4:	3301      	adds	r3, #1
 80070b6:	e7e6      	b.n	8007086 <_printf_float+0x19e>
 80070b8:	2101      	movs	r1, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dc01      	bgt.n	80070c2 <_printf_float+0x1da>
 80070be:	1849      	adds	r1, r1, r1
 80070c0:	1ac9      	subs	r1, r1, r3
 80070c2:	1852      	adds	r2, r2, r1
 80070c4:	e7eb      	b.n	800709e <_printf_float+0x1b6>
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	0553      	lsls	r3, r2, #21
 80070ca:	d408      	bmi.n	80070de <_printf_float+0x1f6>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	002a      	movs	r2, r5
 80070d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80070d6:	47a8      	blx	r5
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d129      	bne.n	8007130 <_printf_float+0x248>
 80070dc:	e75f      	b.n	8006f9e <_printf_float+0xb6>
 80070de:	2f65      	cmp	r7, #101	; 0x65
 80070e0:	d800      	bhi.n	80070e4 <_printf_float+0x1fc>
 80070e2:	e0e0      	b.n	80072a6 <_printf_float+0x3be>
 80070e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80070e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80070e8:	2200      	movs	r2, #0
 80070ea:	2300      	movs	r3, #0
 80070ec:	f7f9 f9a4 	bl	8000438 <__aeabi_dcmpeq>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d034      	beq.n	800715e <_printf_float+0x276>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4a42      	ldr	r2, [pc, #264]	; (8007200 <_printf_float+0x318>)
 80070f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80070fe:	47a8      	blx	r5
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d100      	bne.n	8007106 <_printf_float+0x21e>
 8007104:	e74b      	b.n	8006f9e <_printf_float+0xb6>
 8007106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007108:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800710a:	4293      	cmp	r3, r2
 800710c:	db02      	blt.n	8007114 <_printf_float+0x22c>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	07db      	lsls	r3, r3, #31
 8007112:	d50d      	bpl.n	8007130 <_printf_float+0x248>
 8007114:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800711a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800711c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800711e:	47a8      	blx	r5
 8007120:	2500      	movs	r5, #0
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d100      	bne.n	8007128 <_printf_float+0x240>
 8007126:	e73a      	b.n	8006f9e <_printf_float+0xb6>
 8007128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800712a:	3b01      	subs	r3, #1
 800712c:	42ab      	cmp	r3, r5
 800712e:	dc0a      	bgt.n	8007146 <_printf_float+0x25e>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	079b      	lsls	r3, r3, #30
 8007134:	d500      	bpl.n	8007138 <_printf_float+0x250>
 8007136:	e108      	b.n	800734a <_printf_float+0x462>
 8007138:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800713a:	68e0      	ldr	r0, [r4, #12]
 800713c:	4298      	cmp	r0, r3
 800713e:	db00      	blt.n	8007142 <_printf_float+0x25a>
 8007140:	e72f      	b.n	8006fa2 <_printf_float+0xba>
 8007142:	0018      	movs	r0, r3
 8007144:	e72d      	b.n	8006fa2 <_printf_float+0xba>
 8007146:	0022      	movs	r2, r4
 8007148:	2301      	movs	r3, #1
 800714a:	321a      	adds	r2, #26
 800714c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800714e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007150:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007152:	47b0      	blx	r6
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d100      	bne.n	800715a <_printf_float+0x272>
 8007158:	e721      	b.n	8006f9e <_printf_float+0xb6>
 800715a:	3501      	adds	r5, #1
 800715c:	e7e4      	b.n	8007128 <_printf_float+0x240>
 800715e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007160:	2b00      	cmp	r3, #0
 8007162:	dc2d      	bgt.n	80071c0 <_printf_float+0x2d8>
 8007164:	2301      	movs	r3, #1
 8007166:	4a26      	ldr	r2, [pc, #152]	; (8007200 <_printf_float+0x318>)
 8007168:	990a      	ldr	r1, [sp, #40]	; 0x28
 800716a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800716c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800716e:	47b0      	blx	r6
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d100      	bne.n	8007176 <_printf_float+0x28e>
 8007174:	e713      	b.n	8006f9e <_printf_float+0xb6>
 8007176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007178:	2b00      	cmp	r3, #0
 800717a:	d105      	bne.n	8007188 <_printf_float+0x2a0>
 800717c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <_printf_float+0x2a0>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	07db      	lsls	r3, r3, #31
 8007186:	d5d3      	bpl.n	8007130 <_printf_float+0x248>
 8007188:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800718a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800718c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800718e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007192:	47b0      	blx	r6
 8007194:	2600      	movs	r6, #0
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d100      	bne.n	800719c <_printf_float+0x2b4>
 800719a:	e700      	b.n	8006f9e <_printf_float+0xb6>
 800719c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800719e:	425b      	negs	r3, r3
 80071a0:	42b3      	cmp	r3, r6
 80071a2:	dc01      	bgt.n	80071a8 <_printf_float+0x2c0>
 80071a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071a6:	e792      	b.n	80070ce <_printf_float+0x1e6>
 80071a8:	0022      	movs	r2, r4
 80071aa:	2301      	movs	r3, #1
 80071ac:	321a      	adds	r2, #26
 80071ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80071b4:	47b8      	blx	r7
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d100      	bne.n	80071bc <_printf_float+0x2d4>
 80071ba:	e6f0      	b.n	8006f9e <_printf_float+0xb6>
 80071bc:	3601      	adds	r6, #1
 80071be:	e7ed      	b.n	800719c <_printf_float+0x2b4>
 80071c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071c2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80071c4:	429f      	cmp	r7, r3
 80071c6:	dd00      	ble.n	80071ca <_printf_float+0x2e2>
 80071c8:	001f      	movs	r7, r3
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	dd08      	ble.n	80071e0 <_printf_float+0x2f8>
 80071ce:	003b      	movs	r3, r7
 80071d0:	002a      	movs	r2, r5
 80071d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80071d8:	47b0      	blx	r6
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d100      	bne.n	80071e0 <_printf_float+0x2f8>
 80071de:	e6de      	b.n	8006f9e <_printf_float+0xb6>
 80071e0:	2300      	movs	r3, #0
 80071e2:	930d      	str	r3, [sp, #52]	; 0x34
 80071e4:	43fb      	mvns	r3, r7
 80071e6:	17db      	asrs	r3, r3, #31
 80071e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ea:	e018      	b.n	800721e <_printf_float+0x336>
 80071ec:	7fefffff 	.word	0x7fefffff
 80071f0:	0800a954 	.word	0x0800a954
 80071f4:	0800a950 	.word	0x0800a950
 80071f8:	0800a95c 	.word	0x0800a95c
 80071fc:	0800a958 	.word	0x0800a958
 8007200:	0800a960 	.word	0x0800a960
 8007204:	0022      	movs	r2, r4
 8007206:	2301      	movs	r3, #1
 8007208:	321a      	adds	r2, #26
 800720a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800720c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007210:	47b0      	blx	r6
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	d100      	bne.n	8007218 <_printf_float+0x330>
 8007216:	e6c2      	b.n	8006f9e <_printf_float+0xb6>
 8007218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721a:	3301      	adds	r3, #1
 800721c:	930d      	str	r3, [sp, #52]	; 0x34
 800721e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007220:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8007222:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007224:	403b      	ands	r3, r7
 8007226:	1af3      	subs	r3, r6, r3
 8007228:	4293      	cmp	r3, r2
 800722a:	dceb      	bgt.n	8007204 <_printf_float+0x31c>
 800722c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800722e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007230:	19ad      	adds	r5, r5, r6
 8007232:	4293      	cmp	r3, r2
 8007234:	db10      	blt.n	8007258 <_printf_float+0x370>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	07db      	lsls	r3, r3, #31
 800723a:	d40d      	bmi.n	8007258 <_printf_float+0x370>
 800723c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800723e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007240:	1bbe      	subs	r6, r7, r6
 8007242:	1aff      	subs	r7, r7, r3
 8007244:	42b7      	cmp	r7, r6
 8007246:	dd00      	ble.n	800724a <_printf_float+0x362>
 8007248:	0037      	movs	r7, r6
 800724a:	2f00      	cmp	r7, #0
 800724c:	dc0d      	bgt.n	800726a <_printf_float+0x382>
 800724e:	43fe      	mvns	r6, r7
 8007250:	17f3      	asrs	r3, r6, #31
 8007252:	2500      	movs	r5, #0
 8007254:	930c      	str	r3, [sp, #48]	; 0x30
 8007256:	e01c      	b.n	8007292 <_printf_float+0x3aa>
 8007258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800725a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800725c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800725e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007260:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007262:	47b8      	blx	r7
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d1e9      	bne.n	800723c <_printf_float+0x354>
 8007268:	e699      	b.n	8006f9e <_printf_float+0xb6>
 800726a:	003b      	movs	r3, r7
 800726c:	002a      	movs	r2, r5
 800726e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007272:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007274:	47a8      	blx	r5
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d1e9      	bne.n	800724e <_printf_float+0x366>
 800727a:	e690      	b.n	8006f9e <_printf_float+0xb6>
 800727c:	0022      	movs	r2, r4
 800727e:	2301      	movs	r3, #1
 8007280:	321a      	adds	r2, #26
 8007282:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007286:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007288:	47b0      	blx	r6
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	d100      	bne.n	8007290 <_printf_float+0x3a8>
 800728e:	e686      	b.n	8006f9e <_printf_float+0xb6>
 8007290:	3501      	adds	r5, #1
 8007292:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007294:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007296:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	003a      	movs	r2, r7
 800729c:	400a      	ands	r2, r1
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	dceb      	bgt.n	800727c <_printf_float+0x394>
 80072a4:	e744      	b.n	8007130 <_printf_float+0x248>
 80072a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	dc02      	bgt.n	80072b2 <_printf_float+0x3ca>
 80072ac:	2301      	movs	r3, #1
 80072ae:	421a      	tst	r2, r3
 80072b0:	d032      	beq.n	8007318 <_printf_float+0x430>
 80072b2:	2301      	movs	r3, #1
 80072b4:	002a      	movs	r2, r5
 80072b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80072bc:	47b8      	blx	r7
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d100      	bne.n	80072c4 <_printf_float+0x3dc>
 80072c2:	e66c      	b.n	8006f9e <_printf_float+0xb6>
 80072c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80072ce:	3501      	adds	r5, #1
 80072d0:	47b8      	blx	r7
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	d100      	bne.n	80072d8 <_printf_float+0x3f0>
 80072d6:	e662      	b.n	8006f9e <_printf_float+0xb6>
 80072d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80072da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80072dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072de:	2200      	movs	r2, #0
 80072e0:	1e5f      	subs	r7, r3, #1
 80072e2:	2300      	movs	r3, #0
 80072e4:	f7f9 f8a8 	bl	8000438 <__aeabi_dcmpeq>
 80072e8:	003b      	movs	r3, r7
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d014      	beq.n	8007318 <_printf_float+0x430>
 80072ee:	2500      	movs	r5, #0
 80072f0:	e00a      	b.n	8007308 <_printf_float+0x420>
 80072f2:	0022      	movs	r2, r4
 80072f4:	2301      	movs	r3, #1
 80072f6:	321a      	adds	r2, #26
 80072f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80072fe:	47b8      	blx	r7
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d100      	bne.n	8007306 <_printf_float+0x41e>
 8007304:	e64b      	b.n	8006f9e <_printf_float+0xb6>
 8007306:	3501      	adds	r5, #1
 8007308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800730a:	3b01      	subs	r3, #1
 800730c:	42ab      	cmp	r3, r5
 800730e:	dcf0      	bgt.n	80072f2 <_printf_float+0x40a>
 8007310:	0022      	movs	r2, r4
 8007312:	0033      	movs	r3, r6
 8007314:	3250      	adds	r2, #80	; 0x50
 8007316:	e6db      	b.n	80070d0 <_printf_float+0x1e8>
 8007318:	002a      	movs	r2, r5
 800731a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800731c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800731e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007320:	47a8      	blx	r5
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	d1f4      	bne.n	8007310 <_printf_float+0x428>
 8007326:	e63a      	b.n	8006f9e <_printf_float+0xb6>
 8007328:	0022      	movs	r2, r4
 800732a:	2301      	movs	r3, #1
 800732c:	3219      	adds	r2, #25
 800732e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007332:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007334:	47b0      	blx	r6
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	d100      	bne.n	800733c <_printf_float+0x454>
 800733a:	e630      	b.n	8006f9e <_printf_float+0xb6>
 800733c:	3501      	adds	r5, #1
 800733e:	68e3      	ldr	r3, [r4, #12]
 8007340:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	42ab      	cmp	r3, r5
 8007346:	dcef      	bgt.n	8007328 <_printf_float+0x440>
 8007348:	e6f6      	b.n	8007138 <_printf_float+0x250>
 800734a:	2500      	movs	r5, #0
 800734c:	e7f7      	b.n	800733e <_printf_float+0x456>
 800734e:	2a00      	cmp	r2, #0
 8007350:	d100      	bne.n	8007354 <_printf_float+0x46c>
 8007352:	e689      	b.n	8007068 <_printf_float+0x180>
 8007354:	2100      	movs	r1, #0
 8007356:	9106      	str	r1, [sp, #24]
 8007358:	a912      	add	r1, sp, #72	; 0x48
 800735a:	9105      	str	r1, [sp, #20]
 800735c:	a911      	add	r1, sp, #68	; 0x44
 800735e:	9103      	str	r1, [sp, #12]
 8007360:	2123      	movs	r1, #35	; 0x23
 8007362:	a808      	add	r0, sp, #32
 8007364:	1809      	adds	r1, r1, r0
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	9200      	str	r2, [sp, #0]
 800736c:	002b      	movs	r3, r5
 800736e:	9704      	str	r7, [sp, #16]
 8007370:	9102      	str	r1, [sp, #8]
 8007372:	0032      	movs	r2, r6
 8007374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007376:	f7ff fd1b 	bl	8006db0 <__cvt>
 800737a:	0005      	movs	r5, r0
 800737c:	e645      	b.n	800700a <_printf_float+0x122>
 800737e:	46c0      	nop			; (mov r8, r8)

08007380 <_printf_common>:
 8007380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007382:	0015      	movs	r5, r2
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	688a      	ldr	r2, [r1, #8]
 8007388:	690b      	ldr	r3, [r1, #16]
 800738a:	9000      	str	r0, [sp, #0]
 800738c:	000c      	movs	r4, r1
 800738e:	4293      	cmp	r3, r2
 8007390:	da00      	bge.n	8007394 <_printf_common+0x14>
 8007392:	0013      	movs	r3, r2
 8007394:	0022      	movs	r2, r4
 8007396:	602b      	str	r3, [r5, #0]
 8007398:	3243      	adds	r2, #67	; 0x43
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	2a00      	cmp	r2, #0
 800739e:	d001      	beq.n	80073a4 <_printf_common+0x24>
 80073a0:	3301      	adds	r3, #1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	069b      	lsls	r3, r3, #26
 80073a8:	d502      	bpl.n	80073b0 <_printf_common+0x30>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	3302      	adds	r3, #2
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	2706      	movs	r7, #6
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	401f      	ands	r7, r3
 80073b6:	d027      	beq.n	8007408 <_printf_common+0x88>
 80073b8:	0023      	movs	r3, r4
 80073ba:	3343      	adds	r3, #67	; 0x43
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	1e5a      	subs	r2, r3, #1
 80073c0:	4193      	sbcs	r3, r2
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	0692      	lsls	r2, r2, #26
 80073c6:	d430      	bmi.n	800742a <_printf_common+0xaa>
 80073c8:	0022      	movs	r2, r4
 80073ca:	9901      	ldr	r1, [sp, #4]
 80073cc:	3243      	adds	r2, #67	; 0x43
 80073ce:	9800      	ldr	r0, [sp, #0]
 80073d0:	9e08      	ldr	r6, [sp, #32]
 80073d2:	47b0      	blx	r6
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d025      	beq.n	8007424 <_printf_common+0xa4>
 80073d8:	2306      	movs	r3, #6
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	682a      	ldr	r2, [r5, #0]
 80073de:	68e1      	ldr	r1, [r4, #12]
 80073e0:	4003      	ands	r3, r0
 80073e2:	2500      	movs	r5, #0
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d103      	bne.n	80073f0 <_printf_common+0x70>
 80073e8:	1a8d      	subs	r5, r1, r2
 80073ea:	43eb      	mvns	r3, r5
 80073ec:	17db      	asrs	r3, r3, #31
 80073ee:	401d      	ands	r5, r3
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	6922      	ldr	r2, [r4, #16]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	dd01      	ble.n	80073fc <_printf_common+0x7c>
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	18ed      	adds	r5, r5, r3
 80073fc:	2700      	movs	r7, #0
 80073fe:	42bd      	cmp	r5, r7
 8007400:	d120      	bne.n	8007444 <_printf_common+0xc4>
 8007402:	2000      	movs	r0, #0
 8007404:	e010      	b.n	8007428 <_printf_common+0xa8>
 8007406:	3701      	adds	r7, #1
 8007408:	68e3      	ldr	r3, [r4, #12]
 800740a:	682a      	ldr	r2, [r5, #0]
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	42bb      	cmp	r3, r7
 8007410:	ddd2      	ble.n	80073b8 <_printf_common+0x38>
 8007412:	0022      	movs	r2, r4
 8007414:	2301      	movs	r3, #1
 8007416:	3219      	adds	r2, #25
 8007418:	9901      	ldr	r1, [sp, #4]
 800741a:	9800      	ldr	r0, [sp, #0]
 800741c:	9e08      	ldr	r6, [sp, #32]
 800741e:	47b0      	blx	r6
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d1f0      	bne.n	8007406 <_printf_common+0x86>
 8007424:	2001      	movs	r0, #1
 8007426:	4240      	negs	r0, r0
 8007428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800742a:	2030      	movs	r0, #48	; 0x30
 800742c:	18e1      	adds	r1, r4, r3
 800742e:	3143      	adds	r1, #67	; 0x43
 8007430:	7008      	strb	r0, [r1, #0]
 8007432:	0021      	movs	r1, r4
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	3145      	adds	r1, #69	; 0x45
 8007438:	7809      	ldrb	r1, [r1, #0]
 800743a:	18a2      	adds	r2, r4, r2
 800743c:	3243      	adds	r2, #67	; 0x43
 800743e:	3302      	adds	r3, #2
 8007440:	7011      	strb	r1, [r2, #0]
 8007442:	e7c1      	b.n	80073c8 <_printf_common+0x48>
 8007444:	0022      	movs	r2, r4
 8007446:	2301      	movs	r3, #1
 8007448:	321a      	adds	r2, #26
 800744a:	9901      	ldr	r1, [sp, #4]
 800744c:	9800      	ldr	r0, [sp, #0]
 800744e:	9e08      	ldr	r6, [sp, #32]
 8007450:	47b0      	blx	r6
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d0e6      	beq.n	8007424 <_printf_common+0xa4>
 8007456:	3701      	adds	r7, #1
 8007458:	e7d1      	b.n	80073fe <_printf_common+0x7e>
	...

0800745c <_printf_i>:
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	9204      	str	r2, [sp, #16]
 8007462:	000a      	movs	r2, r1
 8007464:	3243      	adds	r2, #67	; 0x43
 8007466:	9305      	str	r3, [sp, #20]
 8007468:	9003      	str	r0, [sp, #12]
 800746a:	9202      	str	r2, [sp, #8]
 800746c:	7e0a      	ldrb	r2, [r1, #24]
 800746e:	000c      	movs	r4, r1
 8007470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007472:	2a6e      	cmp	r2, #110	; 0x6e
 8007474:	d100      	bne.n	8007478 <_printf_i+0x1c>
 8007476:	e086      	b.n	8007586 <_printf_i+0x12a>
 8007478:	d81f      	bhi.n	80074ba <_printf_i+0x5e>
 800747a:	2a63      	cmp	r2, #99	; 0x63
 800747c:	d033      	beq.n	80074e6 <_printf_i+0x8a>
 800747e:	d808      	bhi.n	8007492 <_printf_i+0x36>
 8007480:	2a00      	cmp	r2, #0
 8007482:	d100      	bne.n	8007486 <_printf_i+0x2a>
 8007484:	e08c      	b.n	80075a0 <_printf_i+0x144>
 8007486:	2a58      	cmp	r2, #88	; 0x58
 8007488:	d04d      	beq.n	8007526 <_printf_i+0xca>
 800748a:	0025      	movs	r5, r4
 800748c:	3542      	adds	r5, #66	; 0x42
 800748e:	702a      	strb	r2, [r5, #0]
 8007490:	e030      	b.n	80074f4 <_printf_i+0x98>
 8007492:	2a64      	cmp	r2, #100	; 0x64
 8007494:	d001      	beq.n	800749a <_printf_i+0x3e>
 8007496:	2a69      	cmp	r2, #105	; 0x69
 8007498:	d1f7      	bne.n	800748a <_printf_i+0x2e>
 800749a:	6819      	ldr	r1, [r3, #0]
 800749c:	6825      	ldr	r5, [r4, #0]
 800749e:	1d0a      	adds	r2, r1, #4
 80074a0:	0628      	lsls	r0, r5, #24
 80074a2:	d529      	bpl.n	80074f8 <_printf_i+0x9c>
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	2800      	cmp	r0, #0
 80074aa:	da03      	bge.n	80074b4 <_printf_i+0x58>
 80074ac:	232d      	movs	r3, #45	; 0x2d
 80074ae:	9a02      	ldr	r2, [sp, #8]
 80074b0:	4240      	negs	r0, r0
 80074b2:	7013      	strb	r3, [r2, #0]
 80074b4:	4e6b      	ldr	r6, [pc, #428]	; (8007664 <_printf_i+0x208>)
 80074b6:	270a      	movs	r7, #10
 80074b8:	e04f      	b.n	800755a <_printf_i+0xfe>
 80074ba:	2a73      	cmp	r2, #115	; 0x73
 80074bc:	d074      	beq.n	80075a8 <_printf_i+0x14c>
 80074be:	d808      	bhi.n	80074d2 <_printf_i+0x76>
 80074c0:	2a6f      	cmp	r2, #111	; 0x6f
 80074c2:	d01f      	beq.n	8007504 <_printf_i+0xa8>
 80074c4:	2a70      	cmp	r2, #112	; 0x70
 80074c6:	d1e0      	bne.n	800748a <_printf_i+0x2e>
 80074c8:	2220      	movs	r2, #32
 80074ca:	6809      	ldr	r1, [r1, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	6022      	str	r2, [r4, #0]
 80074d0:	e003      	b.n	80074da <_printf_i+0x7e>
 80074d2:	2a75      	cmp	r2, #117	; 0x75
 80074d4:	d016      	beq.n	8007504 <_printf_i+0xa8>
 80074d6:	2a78      	cmp	r2, #120	; 0x78
 80074d8:	d1d7      	bne.n	800748a <_printf_i+0x2e>
 80074da:	0022      	movs	r2, r4
 80074dc:	2178      	movs	r1, #120	; 0x78
 80074de:	3245      	adds	r2, #69	; 0x45
 80074e0:	7011      	strb	r1, [r2, #0]
 80074e2:	4e61      	ldr	r6, [pc, #388]	; (8007668 <_printf_i+0x20c>)
 80074e4:	e022      	b.n	800752c <_printf_i+0xd0>
 80074e6:	0025      	movs	r5, r4
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	3542      	adds	r5, #66	; 0x42
 80074ec:	1d11      	adds	r1, r2, #4
 80074ee:	6019      	str	r1, [r3, #0]
 80074f0:	6813      	ldr	r3, [r2, #0]
 80074f2:	702b      	strb	r3, [r5, #0]
 80074f4:	2301      	movs	r3, #1
 80074f6:	e065      	b.n	80075c4 <_printf_i+0x168>
 80074f8:	6808      	ldr	r0, [r1, #0]
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	0669      	lsls	r1, r5, #25
 80074fe:	d5d3      	bpl.n	80074a8 <_printf_i+0x4c>
 8007500:	b200      	sxth	r0, r0
 8007502:	e7d1      	b.n	80074a8 <_printf_i+0x4c>
 8007504:	6819      	ldr	r1, [r3, #0]
 8007506:	6825      	ldr	r5, [r4, #0]
 8007508:	1d08      	adds	r0, r1, #4
 800750a:	6018      	str	r0, [r3, #0]
 800750c:	6808      	ldr	r0, [r1, #0]
 800750e:	062e      	lsls	r6, r5, #24
 8007510:	d505      	bpl.n	800751e <_printf_i+0xc2>
 8007512:	4e54      	ldr	r6, [pc, #336]	; (8007664 <_printf_i+0x208>)
 8007514:	2708      	movs	r7, #8
 8007516:	2a6f      	cmp	r2, #111	; 0x6f
 8007518:	d01b      	beq.n	8007552 <_printf_i+0xf6>
 800751a:	270a      	movs	r7, #10
 800751c:	e019      	b.n	8007552 <_printf_i+0xf6>
 800751e:	066d      	lsls	r5, r5, #25
 8007520:	d5f7      	bpl.n	8007512 <_printf_i+0xb6>
 8007522:	b280      	uxth	r0, r0
 8007524:	e7f5      	b.n	8007512 <_printf_i+0xb6>
 8007526:	3145      	adds	r1, #69	; 0x45
 8007528:	4e4e      	ldr	r6, [pc, #312]	; (8007664 <_printf_i+0x208>)
 800752a:	700a      	strb	r2, [r1, #0]
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	6822      	ldr	r2, [r4, #0]
 8007530:	1d01      	adds	r1, r0, #4
 8007532:	6800      	ldr	r0, [r0, #0]
 8007534:	6019      	str	r1, [r3, #0]
 8007536:	0615      	lsls	r5, r2, #24
 8007538:	d521      	bpl.n	800757e <_printf_i+0x122>
 800753a:	07d3      	lsls	r3, r2, #31
 800753c:	d502      	bpl.n	8007544 <_printf_i+0xe8>
 800753e:	2320      	movs	r3, #32
 8007540:	431a      	orrs	r2, r3
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	2710      	movs	r7, #16
 8007546:	2800      	cmp	r0, #0
 8007548:	d103      	bne.n	8007552 <_printf_i+0xf6>
 800754a:	2320      	movs	r3, #32
 800754c:	6822      	ldr	r2, [r4, #0]
 800754e:	439a      	bics	r2, r3
 8007550:	6022      	str	r2, [r4, #0]
 8007552:	0023      	movs	r3, r4
 8007554:	2200      	movs	r2, #0
 8007556:	3343      	adds	r3, #67	; 0x43
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	60a3      	str	r3, [r4, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	db58      	blt.n	8007614 <_printf_i+0x1b8>
 8007562:	2204      	movs	r2, #4
 8007564:	6821      	ldr	r1, [r4, #0]
 8007566:	4391      	bics	r1, r2
 8007568:	6021      	str	r1, [r4, #0]
 800756a:	2800      	cmp	r0, #0
 800756c:	d154      	bne.n	8007618 <_printf_i+0x1bc>
 800756e:	9d02      	ldr	r5, [sp, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d05a      	beq.n	800762a <_printf_i+0x1ce>
 8007574:	0025      	movs	r5, r4
 8007576:	7833      	ldrb	r3, [r6, #0]
 8007578:	3542      	adds	r5, #66	; 0x42
 800757a:	702b      	strb	r3, [r5, #0]
 800757c:	e055      	b.n	800762a <_printf_i+0x1ce>
 800757e:	0655      	lsls	r5, r2, #25
 8007580:	d5db      	bpl.n	800753a <_printf_i+0xde>
 8007582:	b280      	uxth	r0, r0
 8007584:	e7d9      	b.n	800753a <_printf_i+0xde>
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	680d      	ldr	r5, [r1, #0]
 800758a:	1d10      	adds	r0, r2, #4
 800758c:	6949      	ldr	r1, [r1, #20]
 800758e:	6018      	str	r0, [r3, #0]
 8007590:	6813      	ldr	r3, [r2, #0]
 8007592:	062e      	lsls	r6, r5, #24
 8007594:	d501      	bpl.n	800759a <_printf_i+0x13e>
 8007596:	6019      	str	r1, [r3, #0]
 8007598:	e002      	b.n	80075a0 <_printf_i+0x144>
 800759a:	066d      	lsls	r5, r5, #25
 800759c:	d5fb      	bpl.n	8007596 <_printf_i+0x13a>
 800759e:	8019      	strh	r1, [r3, #0]
 80075a0:	2300      	movs	r3, #0
 80075a2:	9d02      	ldr	r5, [sp, #8]
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	e04f      	b.n	8007648 <_printf_i+0x1ec>
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	1d11      	adds	r1, r2, #4
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	6815      	ldr	r5, [r2, #0]
 80075b0:	2100      	movs	r1, #0
 80075b2:	6862      	ldr	r2, [r4, #4]
 80075b4:	0028      	movs	r0, r5
 80075b6:	f001 fa1d 	bl	80089f4 <memchr>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d001      	beq.n	80075c2 <_printf_i+0x166>
 80075be:	1b40      	subs	r0, r0, r5
 80075c0:	6060      	str	r0, [r4, #4]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9a02      	ldr	r2, [sp, #8]
 80075ca:	7013      	strb	r3, [r2, #0]
 80075cc:	e03c      	b.n	8007648 <_printf_i+0x1ec>
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	002a      	movs	r2, r5
 80075d2:	9904      	ldr	r1, [sp, #16]
 80075d4:	9803      	ldr	r0, [sp, #12]
 80075d6:	9d05      	ldr	r5, [sp, #20]
 80075d8:	47a8      	blx	r5
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	d03e      	beq.n	800765c <_printf_i+0x200>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	079b      	lsls	r3, r3, #30
 80075e2:	d415      	bmi.n	8007610 <_printf_i+0x1b4>
 80075e4:	9b07      	ldr	r3, [sp, #28]
 80075e6:	68e0      	ldr	r0, [r4, #12]
 80075e8:	4298      	cmp	r0, r3
 80075ea:	da39      	bge.n	8007660 <_printf_i+0x204>
 80075ec:	0018      	movs	r0, r3
 80075ee:	e037      	b.n	8007660 <_printf_i+0x204>
 80075f0:	0022      	movs	r2, r4
 80075f2:	2301      	movs	r3, #1
 80075f4:	3219      	adds	r2, #25
 80075f6:	9904      	ldr	r1, [sp, #16]
 80075f8:	9803      	ldr	r0, [sp, #12]
 80075fa:	9e05      	ldr	r6, [sp, #20]
 80075fc:	47b0      	blx	r6
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	d02c      	beq.n	800765c <_printf_i+0x200>
 8007602:	3501      	adds	r5, #1
 8007604:	68e3      	ldr	r3, [r4, #12]
 8007606:	9a07      	ldr	r2, [sp, #28]
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	42ab      	cmp	r3, r5
 800760c:	dcf0      	bgt.n	80075f0 <_printf_i+0x194>
 800760e:	e7e9      	b.n	80075e4 <_printf_i+0x188>
 8007610:	2500      	movs	r5, #0
 8007612:	e7f7      	b.n	8007604 <_printf_i+0x1a8>
 8007614:	2800      	cmp	r0, #0
 8007616:	d0ad      	beq.n	8007574 <_printf_i+0x118>
 8007618:	9d02      	ldr	r5, [sp, #8]
 800761a:	0039      	movs	r1, r7
 800761c:	f7f8 fe0c 	bl	8000238 <__aeabi_uidivmod>
 8007620:	5c73      	ldrb	r3, [r6, r1]
 8007622:	3d01      	subs	r5, #1
 8007624:	702b      	strb	r3, [r5, #0]
 8007626:	2800      	cmp	r0, #0
 8007628:	d1f7      	bne.n	800761a <_printf_i+0x1be>
 800762a:	2f08      	cmp	r7, #8
 800762c:	d109      	bne.n	8007642 <_printf_i+0x1e6>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	07db      	lsls	r3, r3, #31
 8007632:	d506      	bpl.n	8007642 <_printf_i+0x1e6>
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	6922      	ldr	r2, [r4, #16]
 8007638:	4293      	cmp	r3, r2
 800763a:	dc02      	bgt.n	8007642 <_printf_i+0x1e6>
 800763c:	2330      	movs	r3, #48	; 0x30
 800763e:	3d01      	subs	r5, #1
 8007640:	702b      	strb	r3, [r5, #0]
 8007642:	9b02      	ldr	r3, [sp, #8]
 8007644:	1b5b      	subs	r3, r3, r5
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	9b05      	ldr	r3, [sp, #20]
 800764a:	aa07      	add	r2, sp, #28
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	0021      	movs	r1, r4
 8007650:	9b04      	ldr	r3, [sp, #16]
 8007652:	9803      	ldr	r0, [sp, #12]
 8007654:	f7ff fe94 	bl	8007380 <_printf_common>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d1b8      	bne.n	80075ce <_printf_i+0x172>
 800765c:	2001      	movs	r0, #1
 800765e:	4240      	negs	r0, r0
 8007660:	b009      	add	sp, #36	; 0x24
 8007662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007664:	0800a962 	.word	0x0800a962
 8007668:	0800a973 	.word	0x0800a973

0800766c <iprintf>:
 800766c:	b40f      	push	{r0, r1, r2, r3}
 800766e:	4b0b      	ldr	r3, [pc, #44]	; (800769c <iprintf+0x30>)
 8007670:	b513      	push	{r0, r1, r4, lr}
 8007672:	681c      	ldr	r4, [r3, #0]
 8007674:	2c00      	cmp	r4, #0
 8007676:	d005      	beq.n	8007684 <iprintf+0x18>
 8007678:	69a3      	ldr	r3, [r4, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <iprintf+0x18>
 800767e:	0020      	movs	r0, r4
 8007680:	f001 f8a2 	bl	80087c8 <__sinit>
 8007684:	ab05      	add	r3, sp, #20
 8007686:	9a04      	ldr	r2, [sp, #16]
 8007688:	68a1      	ldr	r1, [r4, #8]
 800768a:	0020      	movs	r0, r4
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	f001 fd89 	bl	80091a4 <_vfiprintf_r>
 8007692:	bc16      	pop	{r1, r2, r4}
 8007694:	bc08      	pop	{r3}
 8007696:	b004      	add	sp, #16
 8007698:	4718      	bx	r3
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	20000008 	.word	0x20000008

080076a0 <_puts_r>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	0005      	movs	r5, r0
 80076a4:	000e      	movs	r6, r1
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d004      	beq.n	80076b4 <_puts_r+0x14>
 80076aa:	6983      	ldr	r3, [r0, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <_puts_r+0x14>
 80076b0:	f001 f88a 	bl	80087c8 <__sinit>
 80076b4:	69ab      	ldr	r3, [r5, #24]
 80076b6:	68ac      	ldr	r4, [r5, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <_puts_r+0x22>
 80076bc:	0028      	movs	r0, r5
 80076be:	f001 f883 	bl	80087c8 <__sinit>
 80076c2:	4b24      	ldr	r3, [pc, #144]	; (8007754 <_puts_r+0xb4>)
 80076c4:	429c      	cmp	r4, r3
 80076c6:	d10f      	bne.n	80076e8 <_puts_r+0x48>
 80076c8:	686c      	ldr	r4, [r5, #4]
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	071b      	lsls	r3, r3, #28
 80076ce:	d502      	bpl.n	80076d6 <_puts_r+0x36>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d11f      	bne.n	8007716 <_puts_r+0x76>
 80076d6:	0021      	movs	r1, r4
 80076d8:	0028      	movs	r0, r5
 80076da:	f000 f8a1 	bl	8007820 <__swsetup_r>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d019      	beq.n	8007716 <_puts_r+0x76>
 80076e2:	2001      	movs	r0, #1
 80076e4:	4240      	negs	r0, r0
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <_puts_r+0xb8>)
 80076ea:	429c      	cmp	r4, r3
 80076ec:	d101      	bne.n	80076f2 <_puts_r+0x52>
 80076ee:	68ac      	ldr	r4, [r5, #8]
 80076f0:	e7eb      	b.n	80076ca <_puts_r+0x2a>
 80076f2:	4b1a      	ldr	r3, [pc, #104]	; (800775c <_puts_r+0xbc>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	d1e8      	bne.n	80076ca <_puts_r+0x2a>
 80076f8:	68ec      	ldr	r4, [r5, #12]
 80076fa:	e7e6      	b.n	80076ca <_puts_r+0x2a>
 80076fc:	3601      	adds	r6, #1
 80076fe:	60a3      	str	r3, [r4, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da04      	bge.n	800770e <_puts_r+0x6e>
 8007704:	69a2      	ldr	r2, [r4, #24]
 8007706:	429a      	cmp	r2, r3
 8007708:	dc16      	bgt.n	8007738 <_puts_r+0x98>
 800770a:	290a      	cmp	r1, #10
 800770c:	d014      	beq.n	8007738 <_puts_r+0x98>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	6022      	str	r2, [r4, #0]
 8007714:	7019      	strb	r1, [r3, #0]
 8007716:	68a3      	ldr	r3, [r4, #8]
 8007718:	7831      	ldrb	r1, [r6, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	2900      	cmp	r1, #0
 800771e:	d1ed      	bne.n	80076fc <_puts_r+0x5c>
 8007720:	60a3      	str	r3, [r4, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	da0f      	bge.n	8007746 <_puts_r+0xa6>
 8007726:	0022      	movs	r2, r4
 8007728:	310a      	adds	r1, #10
 800772a:	0028      	movs	r0, r5
 800772c:	f000 f822 	bl	8007774 <__swbuf_r>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d0d6      	beq.n	80076e2 <_puts_r+0x42>
 8007734:	200a      	movs	r0, #10
 8007736:	e7d6      	b.n	80076e6 <_puts_r+0x46>
 8007738:	0022      	movs	r2, r4
 800773a:	0028      	movs	r0, r5
 800773c:	f000 f81a 	bl	8007774 <__swbuf_r>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d1e8      	bne.n	8007716 <_puts_r+0x76>
 8007744:	e7cd      	b.n	80076e2 <_puts_r+0x42>
 8007746:	200a      	movs	r0, #10
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	6022      	str	r2, [r4, #0]
 800774e:	7018      	strb	r0, [r3, #0]
 8007750:	e7c9      	b.n	80076e6 <_puts_r+0x46>
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	0800a9b4 	.word	0x0800a9b4
 8007758:	0800a9d4 	.word	0x0800a9d4
 800775c:	0800a994 	.word	0x0800a994

08007760 <puts>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4b03      	ldr	r3, [pc, #12]	; (8007770 <puts+0x10>)
 8007764:	0001      	movs	r1, r0
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	f7ff ff9a 	bl	80076a0 <_puts_r>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	20000008 	.word	0x20000008

08007774 <__swbuf_r>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	0005      	movs	r5, r0
 8007778:	000e      	movs	r6, r1
 800777a:	0014      	movs	r4, r2
 800777c:	2800      	cmp	r0, #0
 800777e:	d004      	beq.n	800778a <__swbuf_r+0x16>
 8007780:	6983      	ldr	r3, [r0, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <__swbuf_r+0x16>
 8007786:	f001 f81f 	bl	80087c8 <__sinit>
 800778a:	4b22      	ldr	r3, [pc, #136]	; (8007814 <__swbuf_r+0xa0>)
 800778c:	429c      	cmp	r4, r3
 800778e:	d12d      	bne.n	80077ec <__swbuf_r+0x78>
 8007790:	686c      	ldr	r4, [r5, #4]
 8007792:	69a3      	ldr	r3, [r4, #24]
 8007794:	60a3      	str	r3, [r4, #8]
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	071b      	lsls	r3, r3, #28
 800779a:	d531      	bpl.n	8007800 <__swbuf_r+0x8c>
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d02e      	beq.n	8007800 <__swbuf_r+0x8c>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	6922      	ldr	r2, [r4, #16]
 80077a6:	b2f7      	uxtb	r7, r6
 80077a8:	1a98      	subs	r0, r3, r2
 80077aa:	6963      	ldr	r3, [r4, #20]
 80077ac:	b2f6      	uxtb	r6, r6
 80077ae:	4283      	cmp	r3, r0
 80077b0:	dc05      	bgt.n	80077be <__swbuf_r+0x4a>
 80077b2:	0021      	movs	r1, r4
 80077b4:	0028      	movs	r0, r5
 80077b6:	f000 ff99 	bl	80086ec <_fflush_r>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d126      	bne.n	800780c <__swbuf_r+0x98>
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	3001      	adds	r0, #1
 80077c2:	3b01      	subs	r3, #1
 80077c4:	60a3      	str	r3, [r4, #8]
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	6022      	str	r2, [r4, #0]
 80077cc:	701f      	strb	r7, [r3, #0]
 80077ce:	6963      	ldr	r3, [r4, #20]
 80077d0:	4283      	cmp	r3, r0
 80077d2:	d004      	beq.n	80077de <__swbuf_r+0x6a>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	07db      	lsls	r3, r3, #31
 80077d8:	d51a      	bpl.n	8007810 <__swbuf_r+0x9c>
 80077da:	2e0a      	cmp	r6, #10
 80077dc:	d118      	bne.n	8007810 <__swbuf_r+0x9c>
 80077de:	0021      	movs	r1, r4
 80077e0:	0028      	movs	r0, r5
 80077e2:	f000 ff83 	bl	80086ec <_fflush_r>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d012      	beq.n	8007810 <__swbuf_r+0x9c>
 80077ea:	e00f      	b.n	800780c <__swbuf_r+0x98>
 80077ec:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <__swbuf_r+0xa4>)
 80077ee:	429c      	cmp	r4, r3
 80077f0:	d101      	bne.n	80077f6 <__swbuf_r+0x82>
 80077f2:	68ac      	ldr	r4, [r5, #8]
 80077f4:	e7cd      	b.n	8007792 <__swbuf_r+0x1e>
 80077f6:	4b09      	ldr	r3, [pc, #36]	; (800781c <__swbuf_r+0xa8>)
 80077f8:	429c      	cmp	r4, r3
 80077fa:	d1ca      	bne.n	8007792 <__swbuf_r+0x1e>
 80077fc:	68ec      	ldr	r4, [r5, #12]
 80077fe:	e7c8      	b.n	8007792 <__swbuf_r+0x1e>
 8007800:	0021      	movs	r1, r4
 8007802:	0028      	movs	r0, r5
 8007804:	f000 f80c 	bl	8007820 <__swsetup_r>
 8007808:	2800      	cmp	r0, #0
 800780a:	d0ca      	beq.n	80077a2 <__swbuf_r+0x2e>
 800780c:	2601      	movs	r6, #1
 800780e:	4276      	negs	r6, r6
 8007810:	0030      	movs	r0, r6
 8007812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007814:	0800a9b4 	.word	0x0800a9b4
 8007818:	0800a9d4 	.word	0x0800a9d4
 800781c:	0800a994 	.word	0x0800a994

08007820 <__swsetup_r>:
 8007820:	4b36      	ldr	r3, [pc, #216]	; (80078fc <__swsetup_r+0xdc>)
 8007822:	b570      	push	{r4, r5, r6, lr}
 8007824:	681d      	ldr	r5, [r3, #0]
 8007826:	0006      	movs	r6, r0
 8007828:	000c      	movs	r4, r1
 800782a:	2d00      	cmp	r5, #0
 800782c:	d005      	beq.n	800783a <__swsetup_r+0x1a>
 800782e:	69ab      	ldr	r3, [r5, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <__swsetup_r+0x1a>
 8007834:	0028      	movs	r0, r5
 8007836:	f000 ffc7 	bl	80087c8 <__sinit>
 800783a:	4b31      	ldr	r3, [pc, #196]	; (8007900 <__swsetup_r+0xe0>)
 800783c:	429c      	cmp	r4, r3
 800783e:	d10f      	bne.n	8007860 <__swsetup_r+0x40>
 8007840:	686c      	ldr	r4, [r5, #4]
 8007842:	230c      	movs	r3, #12
 8007844:	5ee2      	ldrsh	r2, [r4, r3]
 8007846:	b293      	uxth	r3, r2
 8007848:	0719      	lsls	r1, r3, #28
 800784a:	d42d      	bmi.n	80078a8 <__swsetup_r+0x88>
 800784c:	06d9      	lsls	r1, r3, #27
 800784e:	d411      	bmi.n	8007874 <__swsetup_r+0x54>
 8007850:	2309      	movs	r3, #9
 8007852:	2001      	movs	r0, #1
 8007854:	6033      	str	r3, [r6, #0]
 8007856:	3337      	adds	r3, #55	; 0x37
 8007858:	4313      	orrs	r3, r2
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	4240      	negs	r0, r0
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	4b28      	ldr	r3, [pc, #160]	; (8007904 <__swsetup_r+0xe4>)
 8007862:	429c      	cmp	r4, r3
 8007864:	d101      	bne.n	800786a <__swsetup_r+0x4a>
 8007866:	68ac      	ldr	r4, [r5, #8]
 8007868:	e7eb      	b.n	8007842 <__swsetup_r+0x22>
 800786a:	4b27      	ldr	r3, [pc, #156]	; (8007908 <__swsetup_r+0xe8>)
 800786c:	429c      	cmp	r4, r3
 800786e:	d1e8      	bne.n	8007842 <__swsetup_r+0x22>
 8007870:	68ec      	ldr	r4, [r5, #12]
 8007872:	e7e6      	b.n	8007842 <__swsetup_r+0x22>
 8007874:	075b      	lsls	r3, r3, #29
 8007876:	d513      	bpl.n	80078a0 <__swsetup_r+0x80>
 8007878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800787a:	2900      	cmp	r1, #0
 800787c:	d008      	beq.n	8007890 <__swsetup_r+0x70>
 800787e:	0023      	movs	r3, r4
 8007880:	3344      	adds	r3, #68	; 0x44
 8007882:	4299      	cmp	r1, r3
 8007884:	d002      	beq.n	800788c <__swsetup_r+0x6c>
 8007886:	0030      	movs	r0, r6
 8007888:	f001 fbbc 	bl	8009004 <_free_r>
 800788c:	2300      	movs	r3, #0
 800788e:	6363      	str	r3, [r4, #52]	; 0x34
 8007890:	2224      	movs	r2, #36	; 0x24
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	4393      	bics	r3, r2
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	2300      	movs	r3, #0
 800789a:	6063      	str	r3, [r4, #4]
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	2308      	movs	r3, #8
 80078a2:	89a2      	ldrh	r2, [r4, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10b      	bne.n	80078c6 <__swsetup_r+0xa6>
 80078ae:	21a0      	movs	r1, #160	; 0xa0
 80078b0:	2280      	movs	r2, #128	; 0x80
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	0089      	lsls	r1, r1, #2
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	400b      	ands	r3, r1
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <__swsetup_r+0xa6>
 80078be:	0021      	movs	r1, r4
 80078c0:	0030      	movs	r0, r6
 80078c2:	f001 f849 	bl	8008958 <__smakebuf_r>
 80078c6:	2301      	movs	r3, #1
 80078c8:	89a2      	ldrh	r2, [r4, #12]
 80078ca:	4013      	ands	r3, r2
 80078cc:	d011      	beq.n	80078f2 <__swsetup_r+0xd2>
 80078ce:	2300      	movs	r3, #0
 80078d0:	60a3      	str	r3, [r4, #8]
 80078d2:	6963      	ldr	r3, [r4, #20]
 80078d4:	425b      	negs	r3, r3
 80078d6:	61a3      	str	r3, [r4, #24]
 80078d8:	2000      	movs	r0, #0
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	4283      	cmp	r3, r0
 80078de:	d1be      	bne.n	800785e <__swsetup_r+0x3e>
 80078e0:	230c      	movs	r3, #12
 80078e2:	5ee2      	ldrsh	r2, [r4, r3]
 80078e4:	0613      	lsls	r3, r2, #24
 80078e6:	d5ba      	bpl.n	800785e <__swsetup_r+0x3e>
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	4313      	orrs	r3, r2
 80078ec:	81a3      	strh	r3, [r4, #12]
 80078ee:	3801      	subs	r0, #1
 80078f0:	e7b5      	b.n	800785e <__swsetup_r+0x3e>
 80078f2:	0792      	lsls	r2, r2, #30
 80078f4:	d400      	bmi.n	80078f8 <__swsetup_r+0xd8>
 80078f6:	6963      	ldr	r3, [r4, #20]
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	e7ed      	b.n	80078d8 <__swsetup_r+0xb8>
 80078fc:	20000008 	.word	0x20000008
 8007900:	0800a9b4 	.word	0x0800a9b4
 8007904:	0800a9d4 	.word	0x0800a9d4
 8007908:	0800a994 	.word	0x0800a994

0800790c <quorem>:
 800790c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790e:	6903      	ldr	r3, [r0, #16]
 8007910:	690c      	ldr	r4, [r1, #16]
 8007912:	b089      	sub	sp, #36	; 0x24
 8007914:	0007      	movs	r7, r0
 8007916:	9105      	str	r1, [sp, #20]
 8007918:	2600      	movs	r6, #0
 800791a:	42a3      	cmp	r3, r4
 800791c:	db65      	blt.n	80079ea <quorem+0xde>
 800791e:	000b      	movs	r3, r1
 8007920:	3c01      	subs	r4, #1
 8007922:	3314      	adds	r3, #20
 8007924:	00a5      	lsls	r5, r4, #2
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	195b      	adds	r3, r3, r5
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	0003      	movs	r3, r0
 800792e:	3314      	adds	r3, #20
 8007930:	9302      	str	r3, [sp, #8]
 8007932:	195d      	adds	r5, r3, r5
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	6828      	ldr	r0, [r5, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	1c59      	adds	r1, r3, #1
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	f7f8 fbf5 	bl	800012c <__udivsi3>
 8007942:	9001      	str	r0, [sp, #4]
 8007944:	42b0      	cmp	r0, r6
 8007946:	d029      	beq.n	800799c <quorem+0x90>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	9802      	ldr	r0, [sp, #8]
 800794c:	469c      	mov	ip, r3
 800794e:	9606      	str	r6, [sp, #24]
 8007950:	4662      	mov	r2, ip
 8007952:	ca08      	ldmia	r2!, {r3}
 8007954:	4694      	mov	ip, r2
 8007956:	9a01      	ldr	r2, [sp, #4]
 8007958:	b299      	uxth	r1, r3
 800795a:	4351      	muls	r1, r2
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	4353      	muls	r3, r2
 8007960:	1989      	adds	r1, r1, r6
 8007962:	0c0a      	lsrs	r2, r1, #16
 8007964:	189b      	adds	r3, r3, r2
 8007966:	9307      	str	r3, [sp, #28]
 8007968:	0c1e      	lsrs	r6, r3, #16
 800796a:	6803      	ldr	r3, [r0, #0]
 800796c:	b289      	uxth	r1, r1
 800796e:	b29a      	uxth	r2, r3
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	18d2      	adds	r2, r2, r3
 8007974:	6803      	ldr	r3, [r0, #0]
 8007976:	1a52      	subs	r2, r2, r1
 8007978:	0c19      	lsrs	r1, r3, #16
 800797a:	466b      	mov	r3, sp
 800797c:	8b9b      	ldrh	r3, [r3, #28]
 800797e:	1acb      	subs	r3, r1, r3
 8007980:	1411      	asrs	r1, r2, #16
 8007982:	185b      	adds	r3, r3, r1
 8007984:	1419      	asrs	r1, r3, #16
 8007986:	b292      	uxth	r2, r2
 8007988:	041b      	lsls	r3, r3, #16
 800798a:	431a      	orrs	r2, r3
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	9106      	str	r1, [sp, #24]
 8007990:	c004      	stmia	r0!, {r2}
 8007992:	4563      	cmp	r3, ip
 8007994:	d2dc      	bcs.n	8007950 <quorem+0x44>
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d02d      	beq.n	80079f8 <quorem+0xec>
 800799c:	9905      	ldr	r1, [sp, #20]
 800799e:	0038      	movs	r0, r7
 80079a0:	f001 fa50 	bl	8008e44 <__mcmp>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	db1f      	blt.n	80079e8 <quorem+0xdc>
 80079a8:	2500      	movs	r5, #0
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	9802      	ldr	r0, [sp, #8]
 80079ae:	3301      	adds	r3, #1
 80079b0:	9903      	ldr	r1, [sp, #12]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	6802      	ldr	r2, [r0, #0]
 80079b6:	c908      	ldmia	r1!, {r3}
 80079b8:	b292      	uxth	r2, r2
 80079ba:	1955      	adds	r5, r2, r5
 80079bc:	b29a      	uxth	r2, r3
 80079be:	1aaa      	subs	r2, r5, r2
 80079c0:	6805      	ldr	r5, [r0, #0]
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	0c2d      	lsrs	r5, r5, #16
 80079c6:	1aeb      	subs	r3, r5, r3
 80079c8:	1415      	asrs	r5, r2, #16
 80079ca:	195b      	adds	r3, r3, r5
 80079cc:	141d      	asrs	r5, r3, #16
 80079ce:	b292      	uxth	r2, r2
 80079d0:	041b      	lsls	r3, r3, #16
 80079d2:	4313      	orrs	r3, r2
 80079d4:	c008      	stmia	r0!, {r3}
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	428b      	cmp	r3, r1
 80079da:	d2eb      	bcs.n	80079b4 <quorem+0xa8>
 80079dc:	9a02      	ldr	r2, [sp, #8]
 80079de:	00a3      	lsls	r3, r4, #2
 80079e0:	18d3      	adds	r3, r2, r3
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	d011      	beq.n	8007a0c <quorem+0x100>
 80079e8:	9e01      	ldr	r6, [sp, #4]
 80079ea:	0030      	movs	r0, r6
 80079ec:	b009      	add	sp, #36	; 0x24
 80079ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d104      	bne.n	8007a00 <quorem+0xf4>
 80079f6:	3c01      	subs	r4, #1
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	3d04      	subs	r5, #4
 80079fc:	42ab      	cmp	r3, r5
 80079fe:	d3f7      	bcc.n	80079f0 <quorem+0xe4>
 8007a00:	613c      	str	r4, [r7, #16]
 8007a02:	e7cb      	b.n	800799c <quorem+0x90>
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	d104      	bne.n	8007a14 <quorem+0x108>
 8007a0a:	3c01      	subs	r4, #1
 8007a0c:	9a02      	ldr	r2, [sp, #8]
 8007a0e:	3b04      	subs	r3, #4
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d3f7      	bcc.n	8007a04 <quorem+0xf8>
 8007a14:	613c      	str	r4, [r7, #16]
 8007a16:	e7e7      	b.n	80079e8 <quorem+0xdc>

08007a18 <_dtoa_r>:
 8007a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1a:	0016      	movs	r6, r2
 8007a1c:	001f      	movs	r7, r3
 8007a1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a20:	b09b      	sub	sp, #108	; 0x6c
 8007a22:	9002      	str	r0, [sp, #8]
 8007a24:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8007a26:	9606      	str	r6, [sp, #24]
 8007a28:	9707      	str	r7, [sp, #28]
 8007a2a:	2c00      	cmp	r4, #0
 8007a2c:	d108      	bne.n	8007a40 <_dtoa_r+0x28>
 8007a2e:	2010      	movs	r0, #16
 8007a30:	f000 ffd6 	bl	80089e0 <malloc>
 8007a34:	9b02      	ldr	r3, [sp, #8]
 8007a36:	6258      	str	r0, [r3, #36]	; 0x24
 8007a38:	6044      	str	r4, [r0, #4]
 8007a3a:	6084      	str	r4, [r0, #8]
 8007a3c:	6004      	str	r4, [r0, #0]
 8007a3e:	60c4      	str	r4, [r0, #12]
 8007a40:	9b02      	ldr	r3, [sp, #8]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	6819      	ldr	r1, [r3, #0]
 8007a46:	2900      	cmp	r1, #0
 8007a48:	d00b      	beq.n	8007a62 <_dtoa_r+0x4a>
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4093      	lsls	r3, r2
 8007a50:	604a      	str	r2, [r1, #4]
 8007a52:	608b      	str	r3, [r1, #8]
 8007a54:	9802      	ldr	r0, [sp, #8]
 8007a56:	f001 f819 	bl	8008a8c <_Bfree>
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	9b02      	ldr	r3, [sp, #8]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	da20      	bge.n	8007aa8 <_dtoa_r+0x90>
 8007a66:	2301      	movs	r3, #1
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	007b      	lsls	r3, r7, #1
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	9307      	str	r3, [sp, #28]
 8007a70:	9c07      	ldr	r4, [sp, #28]
 8007a72:	4bb2      	ldr	r3, [pc, #712]	; (8007d3c <_dtoa_r+0x324>)
 8007a74:	0022      	movs	r2, r4
 8007a76:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a78:	401a      	ands	r2, r3
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d117      	bne.n	8007aae <_dtoa_r+0x96>
 8007a7e:	4bb0      	ldr	r3, [pc, #704]	; (8007d40 <_dtoa_r+0x328>)
 8007a80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	9b06      	ldr	r3, [sp, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <_dtoa_r+0x7a>
 8007a8a:	0324      	lsls	r4, r4, #12
 8007a8c:	d101      	bne.n	8007a92 <_dtoa_r+0x7a>
 8007a8e:	f000 fd87 	bl	80085a0 <_dtoa_r+0xb88>
 8007a92:	4bac      	ldr	r3, [pc, #688]	; (8007d44 <_dtoa_r+0x32c>)
 8007a94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a96:	9308      	str	r3, [sp, #32]
 8007a98:	2a00      	cmp	r2, #0
 8007a9a:	d002      	beq.n	8007aa2 <_dtoa_r+0x8a>
 8007a9c:	4baa      	ldr	r3, [pc, #680]	; (8007d48 <_dtoa_r+0x330>)
 8007a9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	9808      	ldr	r0, [sp, #32]
 8007aa4:	b01b      	add	sp, #108	; 0x6c
 8007aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	e7e0      	b.n	8007a70 <_dtoa_r+0x58>
 8007aae:	9e06      	ldr	r6, [sp, #24]
 8007ab0:	9f07      	ldr	r7, [sp, #28]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	0030      	movs	r0, r6
 8007ab8:	0039      	movs	r1, r7
 8007aba:	f7f8 fcbd 	bl	8000438 <__aeabi_dcmpeq>
 8007abe:	1e05      	subs	r5, r0, #0
 8007ac0:	d00b      	beq.n	8007ada <_dtoa_r+0xc2>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4ba0      	ldr	r3, [pc, #640]	; (8007d4c <_dtoa_r+0x334>)
 8007aca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007acc:	9308      	str	r3, [sp, #32]
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d0e7      	beq.n	8007aa2 <_dtoa_r+0x8a>
 8007ad2:	4a9f      	ldr	r2, [pc, #636]	; (8007d50 <_dtoa_r+0x338>)
 8007ad4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007ad6:	600a      	str	r2, [r1, #0]
 8007ad8:	e7e3      	b.n	8007aa2 <_dtoa_r+0x8a>
 8007ada:	ab18      	add	r3, sp, #96	; 0x60
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	ab19      	add	r3, sp, #100	; 0x64
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	0032      	movs	r2, r6
 8007ae4:	003b      	movs	r3, r7
 8007ae6:	9802      	ldr	r0, [sp, #8]
 8007ae8:	f001 fa2a 	bl	8008f40 <__d2b>
 8007aec:	0063      	lsls	r3, r4, #1
 8007aee:	9003      	str	r0, [sp, #12]
 8007af0:	0d5b      	lsrs	r3, r3, #21
 8007af2:	d074      	beq.n	8007bde <_dtoa_r+0x1c6>
 8007af4:	033a      	lsls	r2, r7, #12
 8007af6:	4c97      	ldr	r4, [pc, #604]	; (8007d54 <_dtoa_r+0x33c>)
 8007af8:	0b12      	lsrs	r2, r2, #12
 8007afa:	4314      	orrs	r4, r2
 8007afc:	0021      	movs	r1, r4
 8007afe:	4a96      	ldr	r2, [pc, #600]	; (8007d58 <_dtoa_r+0x340>)
 8007b00:	0030      	movs	r0, r6
 8007b02:	9516      	str	r5, [sp, #88]	; 0x58
 8007b04:	189e      	adds	r6, r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	4b94      	ldr	r3, [pc, #592]	; (8007d5c <_dtoa_r+0x344>)
 8007b0a:	f7f9 ff5b 	bl	80019c4 <__aeabi_dsub>
 8007b0e:	4a94      	ldr	r2, [pc, #592]	; (8007d60 <_dtoa_r+0x348>)
 8007b10:	4b94      	ldr	r3, [pc, #592]	; (8007d64 <_dtoa_r+0x34c>)
 8007b12:	f7f9 fce5 	bl	80014e0 <__aeabi_dmul>
 8007b16:	4a94      	ldr	r2, [pc, #592]	; (8007d68 <_dtoa_r+0x350>)
 8007b18:	4b94      	ldr	r3, [pc, #592]	; (8007d6c <_dtoa_r+0x354>)
 8007b1a:	f7f8 fdbb 	bl	8000694 <__aeabi_dadd>
 8007b1e:	0004      	movs	r4, r0
 8007b20:	0030      	movs	r0, r6
 8007b22:	000d      	movs	r5, r1
 8007b24:	f7fa fae8 	bl	80020f8 <__aeabi_i2d>
 8007b28:	4a91      	ldr	r2, [pc, #580]	; (8007d70 <_dtoa_r+0x358>)
 8007b2a:	4b92      	ldr	r3, [pc, #584]	; (8007d74 <_dtoa_r+0x35c>)
 8007b2c:	f7f9 fcd8 	bl	80014e0 <__aeabi_dmul>
 8007b30:	0002      	movs	r2, r0
 8007b32:	000b      	movs	r3, r1
 8007b34:	0020      	movs	r0, r4
 8007b36:	0029      	movs	r1, r5
 8007b38:	f7f8 fdac 	bl	8000694 <__aeabi_dadd>
 8007b3c:	0004      	movs	r4, r0
 8007b3e:	000d      	movs	r5, r1
 8007b40:	f7fa faa4 	bl	800208c <__aeabi_d2iz>
 8007b44:	2200      	movs	r2, #0
 8007b46:	0007      	movs	r7, r0
 8007b48:	2300      	movs	r3, #0
 8007b4a:	0020      	movs	r0, r4
 8007b4c:	0029      	movs	r1, r5
 8007b4e:	f7f8 fc79 	bl	8000444 <__aeabi_dcmplt>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d009      	beq.n	8007b6a <_dtoa_r+0x152>
 8007b56:	0038      	movs	r0, r7
 8007b58:	f7fa face 	bl	80020f8 <__aeabi_i2d>
 8007b5c:	002b      	movs	r3, r5
 8007b5e:	0022      	movs	r2, r4
 8007b60:	f7f8 fc6a 	bl	8000438 <__aeabi_dcmpeq>
 8007b64:	4243      	negs	r3, r0
 8007b66:	4158      	adcs	r0, r3
 8007b68:	1a3f      	subs	r7, r7, r0
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	9314      	str	r3, [sp, #80]	; 0x50
 8007b6e:	2f16      	cmp	r7, #22
 8007b70:	d80d      	bhi.n	8007b8e <_dtoa_r+0x176>
 8007b72:	4981      	ldr	r1, [pc, #516]	; (8007d78 <_dtoa_r+0x360>)
 8007b74:	00fb      	lsls	r3, r7, #3
 8007b76:	18c9      	adds	r1, r1, r3
 8007b78:	6808      	ldr	r0, [r1, #0]
 8007b7a:	6849      	ldr	r1, [r1, #4]
 8007b7c:	9a06      	ldr	r2, [sp, #24]
 8007b7e:	9b07      	ldr	r3, [sp, #28]
 8007b80:	f7f8 fc74 	bl	800046c <__aeabi_dcmpgt>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d046      	beq.n	8007c16 <_dtoa_r+0x1fe>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	3f01      	subs	r7, #1
 8007b8c:	9314      	str	r3, [sp, #80]	; 0x50
 8007b8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007b90:	1b9e      	subs	r6, r3, r6
 8007b92:	2300      	movs	r3, #0
 8007b94:	930a      	str	r3, [sp, #40]	; 0x28
 8007b96:	0033      	movs	r3, r6
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b9c:	d504      	bpl.n	8007ba8 <_dtoa_r+0x190>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	1b9b      	subs	r3, r3, r6
 8007ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	db36      	blt.n	8007c1a <_dtoa_r+0x202>
 8007bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bae:	9711      	str	r7, [sp, #68]	; 0x44
 8007bb0:	19db      	adds	r3, r3, r7
 8007bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bba:	2401      	movs	r4, #1
 8007bbc:	2b09      	cmp	r3, #9
 8007bbe:	d900      	bls.n	8007bc2 <_dtoa_r+0x1aa>
 8007bc0:	e084      	b.n	8007ccc <_dtoa_r+0x2b4>
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	dd02      	ble.n	8007bcc <_dtoa_r+0x1b4>
 8007bc6:	2400      	movs	r4, #0
 8007bc8:	3b04      	subs	r3, #4
 8007bca:	9320      	str	r3, [sp, #128]	; 0x80
 8007bcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bce:	1e98      	subs	r0, r3, #2
 8007bd0:	2803      	cmp	r0, #3
 8007bd2:	d900      	bls.n	8007bd6 <_dtoa_r+0x1be>
 8007bd4:	e084      	b.n	8007ce0 <_dtoa_r+0x2c8>
 8007bd6:	f7f8 fa9f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007bda:	7775      	.short	0x7775
 8007bdc:	6a28      	.short	0x6a28
 8007bde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007be0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007be2:	189e      	adds	r6, r3, r2
 8007be4:	4b65      	ldr	r3, [pc, #404]	; (8007d7c <_dtoa_r+0x364>)
 8007be6:	18f2      	adds	r2, r6, r3
 8007be8:	2a20      	cmp	r2, #32
 8007bea:	dd0f      	ble.n	8007c0c <_dtoa_r+0x1f4>
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	409c      	lsls	r4, r3
 8007bf2:	4b63      	ldr	r3, [pc, #396]	; (8007d80 <_dtoa_r+0x368>)
 8007bf4:	9806      	ldr	r0, [sp, #24]
 8007bf6:	18f3      	adds	r3, r6, r3
 8007bf8:	40d8      	lsrs	r0, r3
 8007bfa:	4320      	orrs	r0, r4
 8007bfc:	f7fa fab6 	bl	800216c <__aeabi_ui2d>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4c60      	ldr	r4, [pc, #384]	; (8007d84 <_dtoa_r+0x36c>)
 8007c04:	3e01      	subs	r6, #1
 8007c06:	1909      	adds	r1, r1, r4
 8007c08:	9316      	str	r3, [sp, #88]	; 0x58
 8007c0a:	e77c      	b.n	8007b06 <_dtoa_r+0xee>
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	9806      	ldr	r0, [sp, #24]
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	4098      	lsls	r0, r3
 8007c14:	e7f2      	b.n	8007bfc <_dtoa_r+0x1e4>
 8007c16:	9014      	str	r0, [sp, #80]	; 0x50
 8007c18:	e7b9      	b.n	8007b8e <_dtoa_r+0x176>
 8007c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1c:	1bdb      	subs	r3, r3, r7
 8007c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c20:	427b      	negs	r3, r7
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	2300      	movs	r3, #0
 8007c26:	9311      	str	r3, [sp, #68]	; 0x44
 8007c28:	e7c6      	b.n	8007bb8 <_dtoa_r+0x1a0>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dd59      	ble.n	8007ce8 <_dtoa_r+0x2d0>
 8007c34:	930c      	str	r3, [sp, #48]	; 0x30
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	9a02      	ldr	r2, [sp, #8]
 8007c3a:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	606a      	str	r2, [r5, #4]
 8007c40:	3204      	adds	r2, #4
 8007c42:	0010      	movs	r0, r2
 8007c44:	3014      	adds	r0, #20
 8007c46:	6869      	ldr	r1, [r5, #4]
 8007c48:	4298      	cmp	r0, r3
 8007c4a:	d952      	bls.n	8007cf2 <_dtoa_r+0x2da>
 8007c4c:	9802      	ldr	r0, [sp, #8]
 8007c4e:	f000 fee5 	bl	8008a1c <_Balloc>
 8007c52:	9b02      	ldr	r3, [sp, #8]
 8007c54:	6028      	str	r0, [r5, #0]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	9308      	str	r3, [sp, #32]
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	2b0e      	cmp	r3, #14
 8007c60:	d900      	bls.n	8007c64 <_dtoa_r+0x24c>
 8007c62:	e10a      	b.n	8007e7a <_dtoa_r+0x462>
 8007c64:	2c00      	cmp	r4, #0
 8007c66:	d100      	bne.n	8007c6a <_dtoa_r+0x252>
 8007c68:	e107      	b.n	8007e7a <_dtoa_r+0x462>
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	9c07      	ldr	r4, [sp, #28]
 8007c6e:	9312      	str	r3, [sp, #72]	; 0x48
 8007c70:	9413      	str	r4, [sp, #76]	; 0x4c
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	dc00      	bgt.n	8007c78 <_dtoa_r+0x260>
 8007c76:	e089      	b.n	8007d8c <_dtoa_r+0x374>
 8007c78:	210f      	movs	r1, #15
 8007c7a:	003a      	movs	r2, r7
 8007c7c:	4b3e      	ldr	r3, [pc, #248]	; (8007d78 <_dtoa_r+0x360>)
 8007c7e:	400a      	ands	r2, r1
 8007c80:	00d2      	lsls	r2, r2, #3
 8007c82:	189b      	adds	r3, r3, r2
 8007c84:	681d      	ldr	r5, [r3, #0]
 8007c86:	685e      	ldr	r6, [r3, #4]
 8007c88:	2302      	movs	r3, #2
 8007c8a:	113c      	asrs	r4, r7, #4
 8007c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8007c8e:	06e3      	lsls	r3, r4, #27
 8007c90:	d50b      	bpl.n	8007caa <_dtoa_r+0x292>
 8007c92:	4b3d      	ldr	r3, [pc, #244]	; (8007d88 <_dtoa_r+0x370>)
 8007c94:	400c      	ands	r4, r1
 8007c96:	6a1a      	ldr	r2, [r3, #32]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c9e:	f7f9 f815 	bl	8000ccc <__aeabi_ddiv>
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	9006      	str	r0, [sp, #24]
 8007ca6:	9107      	str	r1, [sp, #28]
 8007ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8007caa:	2300      	movs	r3, #0
 8007cac:	e03a      	b.n	8007d24 <_dtoa_r+0x30c>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	930d      	str	r3, [sp, #52]	; 0x34
 8007cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb4:	18fb      	adds	r3, r7, r3
 8007cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cb8:	3301      	adds	r3, #1
 8007cba:	9309      	str	r3, [sp, #36]	; 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dcbb      	bgt.n	8007c38 <_dtoa_r+0x220>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e7b9      	b.n	8007c38 <_dtoa_r+0x220>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e7b1      	b.n	8007c2c <_dtoa_r+0x214>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e7f1      	b.n	8007cb0 <_dtoa_r+0x298>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	940d      	str	r4, [sp, #52]	; 0x34
 8007cd0:	9320      	str	r3, [sp, #128]	; 0x80
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cda:	3313      	adds	r3, #19
 8007cdc:	9221      	str	r2, [sp, #132]	; 0x84
 8007cde:	e7ab      	b.n	8007c38 <_dtoa_r+0x220>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ce4:	3b02      	subs	r3, #2
 8007ce6:	e7f5      	b.n	8007cd4 <_dtoa_r+0x2bc>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	930c      	str	r3, [sp, #48]	; 0x30
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	001a      	movs	r2, r3
 8007cf0:	e7f4      	b.n	8007cdc <_dtoa_r+0x2c4>
 8007cf2:	3101      	adds	r1, #1
 8007cf4:	6069      	str	r1, [r5, #4]
 8007cf6:	0052      	lsls	r2, r2, #1
 8007cf8:	e7a3      	b.n	8007c42 <_dtoa_r+0x22a>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	421c      	tst	r4, r3
 8007cfe:	d00e      	beq.n	8007d1e <_dtoa_r+0x306>
 8007d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d02:	4a21      	ldr	r2, [pc, #132]	; (8007d88 <_dtoa_r+0x370>)
 8007d04:	3301      	adds	r3, #1
 8007d06:	930e      	str	r3, [sp, #56]	; 0x38
 8007d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d0a:	0028      	movs	r0, r5
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	189b      	adds	r3, r3, r2
 8007d10:	0031      	movs	r1, r6
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f7f9 fbe3 	bl	80014e0 <__aeabi_dmul>
 8007d1a:	0005      	movs	r5, r0
 8007d1c:	000e      	movs	r6, r1
 8007d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d20:	1064      	asrs	r4, r4, #1
 8007d22:	3301      	adds	r3, #1
 8007d24:	9310      	str	r3, [sp, #64]	; 0x40
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	d1e7      	bne.n	8007cfa <_dtoa_r+0x2e2>
 8007d2a:	9806      	ldr	r0, [sp, #24]
 8007d2c:	9907      	ldr	r1, [sp, #28]
 8007d2e:	002a      	movs	r2, r5
 8007d30:	0033      	movs	r3, r6
 8007d32:	f7f8 ffcb 	bl	8000ccc <__aeabi_ddiv>
 8007d36:	9006      	str	r0, [sp, #24]
 8007d38:	9107      	str	r1, [sp, #28]
 8007d3a:	e042      	b.n	8007dc2 <_dtoa_r+0x3aa>
 8007d3c:	7ff00000 	.word	0x7ff00000
 8007d40:	0000270f 	.word	0x0000270f
 8007d44:	0800a98d 	.word	0x0800a98d
 8007d48:	0800a990 	.word	0x0800a990
 8007d4c:	0800a960 	.word	0x0800a960
 8007d50:	0800a961 	.word	0x0800a961
 8007d54:	3ff00000 	.word	0x3ff00000
 8007d58:	fffffc01 	.word	0xfffffc01
 8007d5c:	3ff80000 	.word	0x3ff80000
 8007d60:	636f4361 	.word	0x636f4361
 8007d64:	3fd287a7 	.word	0x3fd287a7
 8007d68:	8b60c8b3 	.word	0x8b60c8b3
 8007d6c:	3fc68a28 	.word	0x3fc68a28
 8007d70:	509f79fb 	.word	0x509f79fb
 8007d74:	3fd34413 	.word	0x3fd34413
 8007d78:	0800aa20 	.word	0x0800aa20
 8007d7c:	00000432 	.word	0x00000432
 8007d80:	00000412 	.word	0x00000412
 8007d84:	fe100000 	.word	0xfe100000
 8007d88:	0800a9f8 	.word	0x0800a9f8
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	930e      	str	r3, [sp, #56]	; 0x38
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	d016      	beq.n	8007dc2 <_dtoa_r+0x3aa>
 8007d94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d98:	427c      	negs	r4, r7
 8007d9a:	330d      	adds	r3, #13
 8007d9c:	4023      	ands	r3, r4
 8007d9e:	4ace      	ldr	r2, [pc, #824]	; (80080d8 <_dtoa_r+0x6c0>)
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	18d3      	adds	r3, r2, r3
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f7f9 fb9a 	bl	80014e0 <__aeabi_dmul>
 8007dac:	2300      	movs	r3, #0
 8007dae:	2601      	movs	r6, #1
 8007db0:	001d      	movs	r5, r3
 8007db2:	9006      	str	r0, [sp, #24]
 8007db4:	9107      	str	r1, [sp, #28]
 8007db6:	1124      	asrs	r4, r4, #4
 8007db8:	2c00      	cmp	r4, #0
 8007dba:	d000      	beq.n	8007dbe <_dtoa_r+0x3a6>
 8007dbc:	e08c      	b.n	8007ed8 <_dtoa_r+0x4c0>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1b9      	bne.n	8007d36 <_dtoa_r+0x31e>
 8007dc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d100      	bne.n	8007dca <_dtoa_r+0x3b2>
 8007dc8:	e096      	b.n	8007ef8 <_dtoa_r+0x4e0>
 8007dca:	9c06      	ldr	r4, [sp, #24]
 8007dcc:	9d07      	ldr	r5, [sp, #28]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4bc2      	ldr	r3, [pc, #776]	; (80080dc <_dtoa_r+0x6c4>)
 8007dd2:	0020      	movs	r0, r4
 8007dd4:	0029      	movs	r1, r5
 8007dd6:	f7f8 fb35 	bl	8000444 <__aeabi_dcmplt>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d100      	bne.n	8007de0 <_dtoa_r+0x3c8>
 8007dde:	e08b      	b.n	8007ef8 <_dtoa_r+0x4e0>
 8007de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d100      	bne.n	8007de8 <_dtoa_r+0x3d0>
 8007de6:	e087      	b.n	8007ef8 <_dtoa_r+0x4e0>
 8007de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	dd41      	ble.n	8007e72 <_dtoa_r+0x45a>
 8007dee:	4bbc      	ldr	r3, [pc, #752]	; (80080e0 <_dtoa_r+0x6c8>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	0020      	movs	r0, r4
 8007df4:	0029      	movs	r1, r5
 8007df6:	f7f9 fb73 	bl	80014e0 <__aeabi_dmul>
 8007dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dfc:	9006      	str	r0, [sp, #24]
 8007dfe:	9107      	str	r1, [sp, #28]
 8007e00:	3301      	adds	r3, #1
 8007e02:	930e      	str	r3, [sp, #56]	; 0x38
 8007e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e06:	1e7e      	subs	r6, r7, #1
 8007e08:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007e0a:	9310      	str	r3, [sp, #64]	; 0x40
 8007e0c:	f7fa f974 	bl	80020f8 <__aeabi_i2d>
 8007e10:	9a06      	ldr	r2, [sp, #24]
 8007e12:	9b07      	ldr	r3, [sp, #28]
 8007e14:	f7f9 fb64 	bl	80014e0 <__aeabi_dmul>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4bb2      	ldr	r3, [pc, #712]	; (80080e4 <_dtoa_r+0x6cc>)
 8007e1c:	f7f8 fc3a 	bl	8000694 <__aeabi_dadd>
 8007e20:	4ab1      	ldr	r2, [pc, #708]	; (80080e8 <_dtoa_r+0x6d0>)
 8007e22:	900e      	str	r0, [sp, #56]	; 0x38
 8007e24:	910f      	str	r1, [sp, #60]	; 0x3c
 8007e26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007e28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e2a:	4694      	mov	ip, r2
 8007e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e2e:	4463      	add	r3, ip
 8007e30:	9315      	str	r3, [sp, #84]	; 0x54
 8007e32:	001d      	movs	r5, r3
 8007e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d161      	bne.n	8007efe <_dtoa_r+0x4e6>
 8007e3a:	9806      	ldr	r0, [sp, #24]
 8007e3c:	9907      	ldr	r1, [sp, #28]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4baa      	ldr	r3, [pc, #680]	; (80080ec <_dtoa_r+0x6d4>)
 8007e42:	f7f9 fdbf 	bl	80019c4 <__aeabi_dsub>
 8007e46:	0022      	movs	r2, r4
 8007e48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e4a:	9006      	str	r0, [sp, #24]
 8007e4c:	9107      	str	r1, [sp, #28]
 8007e4e:	f7f8 fb0d 	bl	800046c <__aeabi_dcmpgt>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d000      	beq.n	8007e58 <_dtoa_r+0x440>
 8007e56:	e2a8      	b.n	80083aa <_dtoa_r+0x992>
 8007e58:	48a5      	ldr	r0, [pc, #660]	; (80080f0 <_dtoa_r+0x6d8>)
 8007e5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e5c:	4684      	mov	ip, r0
 8007e5e:	4461      	add	r1, ip
 8007e60:	000b      	movs	r3, r1
 8007e62:	9806      	ldr	r0, [sp, #24]
 8007e64:	9907      	ldr	r1, [sp, #28]
 8007e66:	0022      	movs	r2, r4
 8007e68:	f7f8 faec 	bl	8000444 <__aeabi_dcmplt>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d000      	beq.n	8007e72 <_dtoa_r+0x45a>
 8007e70:	e295      	b.n	800839e <_dtoa_r+0x986>
 8007e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007e76:	9306      	str	r3, [sp, #24]
 8007e78:	9407      	str	r4, [sp, #28]
 8007e7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	da00      	bge.n	8007e82 <_dtoa_r+0x46a>
 8007e80:	e15c      	b.n	800813c <_dtoa_r+0x724>
 8007e82:	2f0e      	cmp	r7, #14
 8007e84:	dd00      	ble.n	8007e88 <_dtoa_r+0x470>
 8007e86:	e159      	b.n	800813c <_dtoa_r+0x724>
 8007e88:	4b93      	ldr	r3, [pc, #588]	; (80080d8 <_dtoa_r+0x6c0>)
 8007e8a:	00fa      	lsls	r2, r7, #3
 8007e8c:	189b      	adds	r3, r3, r2
 8007e8e:	685c      	ldr	r4, [r3, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	9405      	str	r4, [sp, #20]
 8007e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	db00      	blt.n	8007e9e <_dtoa_r+0x486>
 8007e9c:	e0d8      	b.n	8008050 <_dtoa_r+0x638>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dd00      	ble.n	8007ea6 <_dtoa_r+0x48e>
 8007ea4:	e0d4      	b.n	8008050 <_dtoa_r+0x638>
 8007ea6:	d000      	beq.n	8007eaa <_dtoa_r+0x492>
 8007ea8:	e27d      	b.n	80083a6 <_dtoa_r+0x98e>
 8007eaa:	9804      	ldr	r0, [sp, #16]
 8007eac:	9905      	ldr	r1, [sp, #20]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4b8e      	ldr	r3, [pc, #568]	; (80080ec <_dtoa_r+0x6d4>)
 8007eb2:	f7f9 fb15 	bl	80014e0 <__aeabi_dmul>
 8007eb6:	9a06      	ldr	r2, [sp, #24]
 8007eb8:	9b07      	ldr	r3, [sp, #28]
 8007eba:	f7f8 fae1 	bl	8000480 <__aeabi_dcmpge>
 8007ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	001e      	movs	r6, r3
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d000      	beq.n	8007eca <_dtoa_r+0x4b2>
 8007ec8:	e24f      	b.n	800836a <_dtoa_r+0x952>
 8007eca:	9b08      	ldr	r3, [sp, #32]
 8007ecc:	9a08      	ldr	r2, [sp, #32]
 8007ece:	1c5d      	adds	r5, r3, #1
 8007ed0:	2331      	movs	r3, #49	; 0x31
 8007ed2:	3701      	adds	r7, #1
 8007ed4:	7013      	strb	r3, [r2, #0]
 8007ed6:	e24b      	b.n	8008370 <_dtoa_r+0x958>
 8007ed8:	4234      	tst	r4, r6
 8007eda:	d00a      	beq.n	8007ef2 <_dtoa_r+0x4da>
 8007edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ede:	4a85      	ldr	r2, [pc, #532]	; (80080f4 <_dtoa_r+0x6dc>)
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee4:	00eb      	lsls	r3, r5, #3
 8007ee6:	189b      	adds	r3, r3, r2
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f7f9 faf8 	bl	80014e0 <__aeabi_dmul>
 8007ef0:	0033      	movs	r3, r6
 8007ef2:	1064      	asrs	r4, r4, #1
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	e75f      	b.n	8007db8 <_dtoa_r+0x3a0>
 8007ef8:	003e      	movs	r6, r7
 8007efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efc:	e784      	b.n	8007e08 <_dtoa_r+0x3f0>
 8007efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f02:	1e5a      	subs	r2, r3, #1
 8007f04:	4b74      	ldr	r3, [pc, #464]	; (80080d8 <_dtoa_r+0x6c0>)
 8007f06:	00d2      	lsls	r2, r2, #3
 8007f08:	189b      	adds	r3, r3, r2
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2900      	cmp	r1, #0
 8007f10:	d049      	beq.n	8007fa6 <_dtoa_r+0x58e>
 8007f12:	2000      	movs	r0, #0
 8007f14:	4978      	ldr	r1, [pc, #480]	; (80080f8 <_dtoa_r+0x6e0>)
 8007f16:	f7f8 fed9 	bl	8000ccc <__aeabi_ddiv>
 8007f1a:	002b      	movs	r3, r5
 8007f1c:	0022      	movs	r2, r4
 8007f1e:	f7f9 fd51 	bl	80019c4 <__aeabi_dsub>
 8007f22:	9b08      	ldr	r3, [sp, #32]
 8007f24:	900e      	str	r0, [sp, #56]	; 0x38
 8007f26:	910f      	str	r1, [sp, #60]	; 0x3c
 8007f28:	9315      	str	r3, [sp, #84]	; 0x54
 8007f2a:	9806      	ldr	r0, [sp, #24]
 8007f2c:	9907      	ldr	r1, [sp, #28]
 8007f2e:	f7fa f8ad 	bl	800208c <__aeabi_d2iz>
 8007f32:	0004      	movs	r4, r0
 8007f34:	f7fa f8e0 	bl	80020f8 <__aeabi_i2d>
 8007f38:	0002      	movs	r2, r0
 8007f3a:	000b      	movs	r3, r1
 8007f3c:	9806      	ldr	r0, [sp, #24]
 8007f3e:	9907      	ldr	r1, [sp, #28]
 8007f40:	f7f9 fd40 	bl	80019c4 <__aeabi_dsub>
 8007f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f46:	3430      	adds	r4, #48	; 0x30
 8007f48:	1c5d      	adds	r5, r3, #1
 8007f4a:	701c      	strb	r4, [r3, #0]
 8007f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f50:	9006      	str	r0, [sp, #24]
 8007f52:	9107      	str	r1, [sp, #28]
 8007f54:	f7f8 fa76 	bl	8000444 <__aeabi_dcmplt>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d16c      	bne.n	8008036 <_dtoa_r+0x61e>
 8007f5c:	9a06      	ldr	r2, [sp, #24]
 8007f5e:	9b07      	ldr	r3, [sp, #28]
 8007f60:	2000      	movs	r0, #0
 8007f62:	495e      	ldr	r1, [pc, #376]	; (80080dc <_dtoa_r+0x6c4>)
 8007f64:	f7f9 fd2e 	bl	80019c4 <__aeabi_dsub>
 8007f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f6c:	f7f8 fa6a 	bl	8000444 <__aeabi_dcmplt>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d000      	beq.n	8007f76 <_dtoa_r+0x55e>
 8007f74:	e0c3      	b.n	80080fe <_dtoa_r+0x6e6>
 8007f76:	9b08      	ldr	r3, [sp, #32]
 8007f78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f7a:	1aeb      	subs	r3, r5, r3
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	dc00      	bgt.n	8007f82 <_dtoa_r+0x56a>
 8007f80:	e777      	b.n	8007e72 <_dtoa_r+0x45a>
 8007f82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f86:	2200      	movs	r2, #0
 8007f88:	4b55      	ldr	r3, [pc, #340]	; (80080e0 <_dtoa_r+0x6c8>)
 8007f8a:	f7f9 faa9 	bl	80014e0 <__aeabi_dmul>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	900e      	str	r0, [sp, #56]	; 0x38
 8007f92:	910f      	str	r1, [sp, #60]	; 0x3c
 8007f94:	9806      	ldr	r0, [sp, #24]
 8007f96:	9907      	ldr	r1, [sp, #28]
 8007f98:	4b51      	ldr	r3, [pc, #324]	; (80080e0 <_dtoa_r+0x6c8>)
 8007f9a:	f7f9 faa1 	bl	80014e0 <__aeabi_dmul>
 8007f9e:	9515      	str	r5, [sp, #84]	; 0x54
 8007fa0:	9006      	str	r0, [sp, #24]
 8007fa2:	9107      	str	r1, [sp, #28]
 8007fa4:	e7c1      	b.n	8007f2a <_dtoa_r+0x512>
 8007fa6:	0020      	movs	r0, r4
 8007fa8:	0029      	movs	r1, r5
 8007faa:	f7f9 fa99 	bl	80014e0 <__aeabi_dmul>
 8007fae:	9c08      	ldr	r4, [sp, #32]
 8007fb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fb2:	0023      	movs	r3, r4
 8007fb4:	4694      	mov	ip, r2
 8007fb6:	900e      	str	r0, [sp, #56]	; 0x38
 8007fb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8007fba:	4463      	add	r3, ip
 8007fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8007fbe:	9806      	ldr	r0, [sp, #24]
 8007fc0:	9907      	ldr	r1, [sp, #28]
 8007fc2:	f7fa f863 	bl	800208c <__aeabi_d2iz>
 8007fc6:	0005      	movs	r5, r0
 8007fc8:	f7fa f896 	bl	80020f8 <__aeabi_i2d>
 8007fcc:	000b      	movs	r3, r1
 8007fce:	0002      	movs	r2, r0
 8007fd0:	9806      	ldr	r0, [sp, #24]
 8007fd2:	9907      	ldr	r1, [sp, #28]
 8007fd4:	f7f9 fcf6 	bl	80019c4 <__aeabi_dsub>
 8007fd8:	3530      	adds	r5, #48	; 0x30
 8007fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fdc:	7025      	strb	r5, [r4, #0]
 8007fde:	3401      	adds	r4, #1
 8007fe0:	9006      	str	r0, [sp, #24]
 8007fe2:	9107      	str	r1, [sp, #28]
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	d12a      	bne.n	800803e <_dtoa_r+0x626>
 8007fe8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007fea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fec:	9a08      	ldr	r2, [sp, #32]
 8007fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff0:	4694      	mov	ip, r2
 8007ff2:	4463      	add	r3, ip
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	001d      	movs	r5, r3
 8007ff8:	4b3f      	ldr	r3, [pc, #252]	; (80080f8 <_dtoa_r+0x6e0>)
 8007ffa:	f7f8 fb4b 	bl	8000694 <__aeabi_dadd>
 8007ffe:	0002      	movs	r2, r0
 8008000:	000b      	movs	r3, r1
 8008002:	9806      	ldr	r0, [sp, #24]
 8008004:	9907      	ldr	r1, [sp, #28]
 8008006:	f7f8 fa31 	bl	800046c <__aeabi_dcmpgt>
 800800a:	2800      	cmp	r0, #0
 800800c:	d000      	beq.n	8008010 <_dtoa_r+0x5f8>
 800800e:	e076      	b.n	80080fe <_dtoa_r+0x6e6>
 8008010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008014:	2000      	movs	r0, #0
 8008016:	4938      	ldr	r1, [pc, #224]	; (80080f8 <_dtoa_r+0x6e0>)
 8008018:	f7f9 fcd4 	bl	80019c4 <__aeabi_dsub>
 800801c:	0002      	movs	r2, r0
 800801e:	000b      	movs	r3, r1
 8008020:	9806      	ldr	r0, [sp, #24]
 8008022:	9907      	ldr	r1, [sp, #28]
 8008024:	f7f8 fa0e 	bl	8000444 <__aeabi_dcmplt>
 8008028:	2800      	cmp	r0, #0
 800802a:	d100      	bne.n	800802e <_dtoa_r+0x616>
 800802c:	e721      	b.n	8007e72 <_dtoa_r+0x45a>
 800802e:	1e6b      	subs	r3, r5, #1
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	2a30      	cmp	r2, #48	; 0x30
 8008034:	d001      	beq.n	800803a <_dtoa_r+0x622>
 8008036:	0037      	movs	r7, r6
 8008038:	e03f      	b.n	80080ba <_dtoa_r+0x6a2>
 800803a:	001d      	movs	r5, r3
 800803c:	e7f7      	b.n	800802e <_dtoa_r+0x616>
 800803e:	9806      	ldr	r0, [sp, #24]
 8008040:	9907      	ldr	r1, [sp, #28]
 8008042:	2200      	movs	r2, #0
 8008044:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <_dtoa_r+0x6c8>)
 8008046:	f7f9 fa4b 	bl	80014e0 <__aeabi_dmul>
 800804a:	9006      	str	r0, [sp, #24]
 800804c:	9107      	str	r1, [sp, #28]
 800804e:	e7b6      	b.n	8007fbe <_dtoa_r+0x5a6>
 8008050:	9e08      	ldr	r6, [sp, #32]
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	9806      	ldr	r0, [sp, #24]
 8008058:	9907      	ldr	r1, [sp, #28]
 800805a:	f7f8 fe37 	bl	8000ccc <__aeabi_ddiv>
 800805e:	f7fa f815 	bl	800208c <__aeabi_d2iz>
 8008062:	0004      	movs	r4, r0
 8008064:	f7fa f848 	bl	80020f8 <__aeabi_i2d>
 8008068:	9a04      	ldr	r2, [sp, #16]
 800806a:	9b05      	ldr	r3, [sp, #20]
 800806c:	f7f9 fa38 	bl	80014e0 <__aeabi_dmul>
 8008070:	0002      	movs	r2, r0
 8008072:	000b      	movs	r3, r1
 8008074:	9806      	ldr	r0, [sp, #24]
 8008076:	9907      	ldr	r1, [sp, #28]
 8008078:	f7f9 fca4 	bl	80019c4 <__aeabi_dsub>
 800807c:	0023      	movs	r3, r4
 800807e:	3330      	adds	r3, #48	; 0x30
 8008080:	7033      	strb	r3, [r6, #0]
 8008082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008084:	9b08      	ldr	r3, [sp, #32]
 8008086:	1c75      	adds	r5, r6, #1
 8008088:	1aeb      	subs	r3, r5, r3
 800808a:	429a      	cmp	r2, r3
 800808c:	d148      	bne.n	8008120 <_dtoa_r+0x708>
 800808e:	0002      	movs	r2, r0
 8008090:	000b      	movs	r3, r1
 8008092:	f7f8 faff 	bl	8000694 <__aeabi_dadd>
 8008096:	9a04      	ldr	r2, [sp, #16]
 8008098:	9b05      	ldr	r3, [sp, #20]
 800809a:	9006      	str	r0, [sp, #24]
 800809c:	9107      	str	r1, [sp, #28]
 800809e:	f7f8 f9e5 	bl	800046c <__aeabi_dcmpgt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d12a      	bne.n	80080fc <_dtoa_r+0x6e4>
 80080a6:	9a04      	ldr	r2, [sp, #16]
 80080a8:	9b05      	ldr	r3, [sp, #20]
 80080aa:	9806      	ldr	r0, [sp, #24]
 80080ac:	9907      	ldr	r1, [sp, #28]
 80080ae:	f7f8 f9c3 	bl	8000438 <__aeabi_dcmpeq>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d001      	beq.n	80080ba <_dtoa_r+0x6a2>
 80080b6:	07e3      	lsls	r3, r4, #31
 80080b8:	d420      	bmi.n	80080fc <_dtoa_r+0x6e4>
 80080ba:	9903      	ldr	r1, [sp, #12]
 80080bc:	9802      	ldr	r0, [sp, #8]
 80080be:	f000 fce5 	bl	8008a8c <_Bfree>
 80080c2:	2300      	movs	r3, #0
 80080c4:	702b      	strb	r3, [r5, #0]
 80080c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080c8:	3701      	adds	r7, #1
 80080ca:	601f      	str	r7, [r3, #0]
 80080cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d100      	bne.n	80080d4 <_dtoa_r+0x6bc>
 80080d2:	e4e6      	b.n	8007aa2 <_dtoa_r+0x8a>
 80080d4:	601d      	str	r5, [r3, #0]
 80080d6:	e4e4      	b.n	8007aa2 <_dtoa_r+0x8a>
 80080d8:	0800aa20 	.word	0x0800aa20
 80080dc:	3ff00000 	.word	0x3ff00000
 80080e0:	40240000 	.word	0x40240000
 80080e4:	401c0000 	.word	0x401c0000
 80080e8:	fcc00000 	.word	0xfcc00000
 80080ec:	40140000 	.word	0x40140000
 80080f0:	7cc00000 	.word	0x7cc00000
 80080f4:	0800a9f8 	.word	0x0800a9f8
 80080f8:	3fe00000 	.word	0x3fe00000
 80080fc:	003e      	movs	r6, r7
 80080fe:	1e6b      	subs	r3, r5, #1
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	2a39      	cmp	r2, #57	; 0x39
 8008104:	d106      	bne.n	8008114 <_dtoa_r+0x6fc>
 8008106:	9a08      	ldr	r2, [sp, #32]
 8008108:	429a      	cmp	r2, r3
 800810a:	d107      	bne.n	800811c <_dtoa_r+0x704>
 800810c:	2330      	movs	r3, #48	; 0x30
 800810e:	7013      	strb	r3, [r2, #0]
 8008110:	0013      	movs	r3, r2
 8008112:	3601      	adds	r6, #1
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	3201      	adds	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e78c      	b.n	8008036 <_dtoa_r+0x61e>
 800811c:	001d      	movs	r5, r3
 800811e:	e7ee      	b.n	80080fe <_dtoa_r+0x6e6>
 8008120:	2200      	movs	r2, #0
 8008122:	4ba4      	ldr	r3, [pc, #656]	; (80083b4 <_dtoa_r+0x99c>)
 8008124:	f7f9 f9dc 	bl	80014e0 <__aeabi_dmul>
 8008128:	2200      	movs	r2, #0
 800812a:	2300      	movs	r3, #0
 800812c:	9006      	str	r0, [sp, #24]
 800812e:	9107      	str	r1, [sp, #28]
 8008130:	002e      	movs	r6, r5
 8008132:	f7f8 f981 	bl	8000438 <__aeabi_dcmpeq>
 8008136:	2800      	cmp	r0, #0
 8008138:	d08b      	beq.n	8008052 <_dtoa_r+0x63a>
 800813a:	e7be      	b.n	80080ba <_dtoa_r+0x6a2>
 800813c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800813e:	2a00      	cmp	r2, #0
 8008140:	d100      	bne.n	8008144 <_dtoa_r+0x72c>
 8008142:	e0da      	b.n	80082fa <_dtoa_r+0x8e2>
 8008144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008146:	2a01      	cmp	r2, #1
 8008148:	dd00      	ble.n	800814c <_dtoa_r+0x734>
 800814a:	e0bd      	b.n	80082c8 <_dtoa_r+0x8b0>
 800814c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800814e:	2a00      	cmp	r2, #0
 8008150:	d100      	bne.n	8008154 <_dtoa_r+0x73c>
 8008152:	e0b5      	b.n	80082c0 <_dtoa_r+0x8a8>
 8008154:	4a98      	ldr	r2, [pc, #608]	; (80083b8 <_dtoa_r+0x9a0>)
 8008156:	189b      	adds	r3, r3, r2
 8008158:	9d04      	ldr	r5, [sp, #16]
 800815a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800815c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800815e:	2101      	movs	r1, #1
 8008160:	18d2      	adds	r2, r2, r3
 8008162:	920a      	str	r2, [sp, #40]	; 0x28
 8008164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008166:	9802      	ldr	r0, [sp, #8]
 8008168:	18d3      	adds	r3, r2, r3
 800816a:	930b      	str	r3, [sp, #44]	; 0x2c
 800816c:	f000 fd2e 	bl	8008bcc <__i2b>
 8008170:	0006      	movs	r6, r0
 8008172:	2c00      	cmp	r4, #0
 8008174:	dd0e      	ble.n	8008194 <_dtoa_r+0x77c>
 8008176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008178:	2b00      	cmp	r3, #0
 800817a:	dd0b      	ble.n	8008194 <_dtoa_r+0x77c>
 800817c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800817e:	0023      	movs	r3, r4
 8008180:	4294      	cmp	r4, r2
 8008182:	dd00      	ble.n	8008186 <_dtoa_r+0x76e>
 8008184:	0013      	movs	r3, r2
 8008186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008188:	1ae4      	subs	r4, r4, r3
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	920a      	str	r2, [sp, #40]	; 0x28
 800818e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	930b      	str	r3, [sp, #44]	; 0x2c
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d01f      	beq.n	80081da <_dtoa_r+0x7c2>
 800819a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800819c:	2b00      	cmp	r3, #0
 800819e:	d100      	bne.n	80081a2 <_dtoa_r+0x78a>
 80081a0:	e0af      	b.n	8008302 <_dtoa_r+0x8ea>
 80081a2:	2d00      	cmp	r5, #0
 80081a4:	d011      	beq.n	80081ca <_dtoa_r+0x7b2>
 80081a6:	0031      	movs	r1, r6
 80081a8:	002a      	movs	r2, r5
 80081aa:	9802      	ldr	r0, [sp, #8]
 80081ac:	f000 fda6 	bl	8008cfc <__pow5mult>
 80081b0:	9a03      	ldr	r2, [sp, #12]
 80081b2:	0001      	movs	r1, r0
 80081b4:	0006      	movs	r6, r0
 80081b6:	9802      	ldr	r0, [sp, #8]
 80081b8:	f000 fd11 	bl	8008bde <__multiply>
 80081bc:	9903      	ldr	r1, [sp, #12]
 80081be:	9010      	str	r0, [sp, #64]	; 0x40
 80081c0:	9802      	ldr	r0, [sp, #8]
 80081c2:	f000 fc63 	bl	8008a8c <_Bfree>
 80081c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	9b04      	ldr	r3, [sp, #16]
 80081cc:	1b5a      	subs	r2, r3, r5
 80081ce:	d004      	beq.n	80081da <_dtoa_r+0x7c2>
 80081d0:	9903      	ldr	r1, [sp, #12]
 80081d2:	9802      	ldr	r0, [sp, #8]
 80081d4:	f000 fd92 	bl	8008cfc <__pow5mult>
 80081d8:	9003      	str	r0, [sp, #12]
 80081da:	2101      	movs	r1, #1
 80081dc:	9802      	ldr	r0, [sp, #8]
 80081de:	f000 fcf5 	bl	8008bcc <__i2b>
 80081e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e4:	9004      	str	r0, [sp, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d100      	bne.n	80081ec <_dtoa_r+0x7d4>
 80081ea:	e1e3      	b.n	80085b4 <_dtoa_r+0xb9c>
 80081ec:	001a      	movs	r2, r3
 80081ee:	0001      	movs	r1, r0
 80081f0:	9802      	ldr	r0, [sp, #8]
 80081f2:	f000 fd83 	bl	8008cfc <__pow5mult>
 80081f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80081f8:	9004      	str	r0, [sp, #16]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	dd00      	ble.n	8008200 <_dtoa_r+0x7e8>
 80081fe:	e082      	b.n	8008306 <_dtoa_r+0x8ee>
 8008200:	2500      	movs	r5, #0
 8008202:	9b06      	ldr	r3, [sp, #24]
 8008204:	42ab      	cmp	r3, r5
 8008206:	d10e      	bne.n	8008226 <_dtoa_r+0x80e>
 8008208:	9b07      	ldr	r3, [sp, #28]
 800820a:	031b      	lsls	r3, r3, #12
 800820c:	42ab      	cmp	r3, r5
 800820e:	d10a      	bne.n	8008226 <_dtoa_r+0x80e>
 8008210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008212:	9a07      	ldr	r2, [sp, #28]
 8008214:	4213      	tst	r3, r2
 8008216:	d006      	beq.n	8008226 <_dtoa_r+0x80e>
 8008218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821a:	3501      	adds	r5, #1
 800821c:	3301      	adds	r3, #1
 800821e:	930a      	str	r3, [sp, #40]	; 0x28
 8008220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008222:	3301      	adds	r3, #1
 8008224:	930b      	str	r3, [sp, #44]	; 0x2c
 8008226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008228:	2001      	movs	r0, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d16c      	bne.n	8008308 <_dtoa_r+0x8f0>
 800822e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008230:	1818      	adds	r0, r3, r0
 8008232:	231f      	movs	r3, #31
 8008234:	4018      	ands	r0, r3
 8008236:	d07e      	beq.n	8008336 <_dtoa_r+0x91e>
 8008238:	3301      	adds	r3, #1
 800823a:	1a1b      	subs	r3, r3, r0
 800823c:	2b04      	cmp	r3, #4
 800823e:	dd70      	ble.n	8008322 <_dtoa_r+0x90a>
 8008240:	231c      	movs	r3, #28
 8008242:	1a18      	subs	r0, r3, r0
 8008244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008246:	1824      	adds	r4, r4, r0
 8008248:	181b      	adds	r3, r3, r0
 800824a:	930a      	str	r3, [sp, #40]	; 0x28
 800824c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824e:	181b      	adds	r3, r3, r0
 8008250:	930b      	str	r3, [sp, #44]	; 0x2c
 8008252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008254:	2b00      	cmp	r3, #0
 8008256:	dd05      	ble.n	8008264 <_dtoa_r+0x84c>
 8008258:	001a      	movs	r2, r3
 800825a:	9903      	ldr	r1, [sp, #12]
 800825c:	9802      	ldr	r0, [sp, #8]
 800825e:	f000 fd9f 	bl	8008da0 <__lshift>
 8008262:	9003      	str	r0, [sp, #12]
 8008264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd05      	ble.n	8008276 <_dtoa_r+0x85e>
 800826a:	001a      	movs	r2, r3
 800826c:	9904      	ldr	r1, [sp, #16]
 800826e:	9802      	ldr	r0, [sp, #8]
 8008270:	f000 fd96 	bl	8008da0 <__lshift>
 8008274:	9004      	str	r0, [sp, #16]
 8008276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008278:	2b00      	cmp	r3, #0
 800827a:	d05e      	beq.n	800833a <_dtoa_r+0x922>
 800827c:	9904      	ldr	r1, [sp, #16]
 800827e:	9803      	ldr	r0, [sp, #12]
 8008280:	f000 fde0 	bl	8008e44 <__mcmp>
 8008284:	2800      	cmp	r0, #0
 8008286:	da58      	bge.n	800833a <_dtoa_r+0x922>
 8008288:	2300      	movs	r3, #0
 800828a:	220a      	movs	r2, #10
 800828c:	9903      	ldr	r1, [sp, #12]
 800828e:	9802      	ldr	r0, [sp, #8]
 8008290:	f000 fc15 	bl	8008abe <__multadd>
 8008294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008296:	3f01      	subs	r7, #1
 8008298:	9003      	str	r0, [sp, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d100      	bne.n	80082a0 <_dtoa_r+0x888>
 800829e:	e190      	b.n	80085c2 <_dtoa_r+0xbaa>
 80082a0:	2300      	movs	r3, #0
 80082a2:	0031      	movs	r1, r6
 80082a4:	220a      	movs	r2, #10
 80082a6:	9802      	ldr	r0, [sp, #8]
 80082a8:	f000 fc09 	bl	8008abe <__multadd>
 80082ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ae:	0006      	movs	r6, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dd00      	ble.n	80082b6 <_dtoa_r+0x89e>
 80082b4:	e088      	b.n	80083c8 <_dtoa_r+0x9b0>
 80082b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	dc00      	bgt.n	80082be <_dtoa_r+0x8a6>
 80082bc:	e084      	b.n	80083c8 <_dtoa_r+0x9b0>
 80082be:	e044      	b.n	800834a <_dtoa_r+0x932>
 80082c0:	2336      	movs	r3, #54	; 0x36
 80082c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	e747      	b.n	8008158 <_dtoa_r+0x740>
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	1e5d      	subs	r5, r3, #1
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	42ab      	cmp	r3, r5
 80082d0:	db08      	blt.n	80082e4 <_dtoa_r+0x8cc>
 80082d2:	1b5d      	subs	r5, r3, r5
 80082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da0c      	bge.n	80082f4 <_dtoa_r+0x8dc>
 80082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082de:	1a9c      	subs	r4, r3, r2
 80082e0:	2300      	movs	r3, #0
 80082e2:	e73b      	b.n	800815c <_dtoa_r+0x744>
 80082e4:	9b04      	ldr	r3, [sp, #16]
 80082e6:	9504      	str	r5, [sp, #16]
 80082e8:	1aea      	subs	r2, r5, r3
 80082ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ec:	2500      	movs	r5, #0
 80082ee:	189b      	adds	r3, r3, r2
 80082f0:	9311      	str	r3, [sp, #68]	; 0x44
 80082f2:	e7ef      	b.n	80082d4 <_dtoa_r+0x8bc>
 80082f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f8:	e730      	b.n	800815c <_dtoa_r+0x744>
 80082fa:	9d04      	ldr	r5, [sp, #16]
 80082fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082fe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8008300:	e737      	b.n	8008172 <_dtoa_r+0x75a>
 8008302:	9a04      	ldr	r2, [sp, #16]
 8008304:	e764      	b.n	80081d0 <_dtoa_r+0x7b8>
 8008306:	2500      	movs	r5, #0
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	9a04      	ldr	r2, [sp, #16]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	9310      	str	r3, [sp, #64]	; 0x40
 8008310:	3303      	adds	r3, #3
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	18d3      	adds	r3, r2, r3
 8008316:	6858      	ldr	r0, [r3, #4]
 8008318:	f000 fc0f 	bl	8008b3a <__hi0bits>
 800831c:	2320      	movs	r3, #32
 800831e:	1a18      	subs	r0, r3, r0
 8008320:	e785      	b.n	800822e <_dtoa_r+0x816>
 8008322:	2b04      	cmp	r3, #4
 8008324:	d095      	beq.n	8008252 <_dtoa_r+0x83a>
 8008326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008328:	331c      	adds	r3, #28
 800832a:	18d2      	adds	r2, r2, r3
 800832c:	920a      	str	r2, [sp, #40]	; 0x28
 800832e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008330:	18e4      	adds	r4, r4, r3
 8008332:	18d3      	adds	r3, r2, r3
 8008334:	e78c      	b.n	8008250 <_dtoa_r+0x838>
 8008336:	0003      	movs	r3, r0
 8008338:	e7f5      	b.n	8008326 <_dtoa_r+0x90e>
 800833a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	dc3d      	bgt.n	80083bc <_dtoa_r+0x9a4>
 8008340:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008342:	2b02      	cmp	r3, #2
 8008344:	dd3a      	ble.n	80083bc <_dtoa_r+0x9a4>
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	930c      	str	r3, [sp, #48]	; 0x30
 800834a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10c      	bne.n	800836a <_dtoa_r+0x952>
 8008350:	9904      	ldr	r1, [sp, #16]
 8008352:	2205      	movs	r2, #5
 8008354:	9802      	ldr	r0, [sp, #8]
 8008356:	f000 fbb2 	bl	8008abe <__multadd>
 800835a:	9004      	str	r0, [sp, #16]
 800835c:	0001      	movs	r1, r0
 800835e:	9803      	ldr	r0, [sp, #12]
 8008360:	f000 fd70 	bl	8008e44 <__mcmp>
 8008364:	2800      	cmp	r0, #0
 8008366:	dd00      	ble.n	800836a <_dtoa_r+0x952>
 8008368:	e5af      	b.n	8007eca <_dtoa_r+0x4b2>
 800836a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800836c:	9d08      	ldr	r5, [sp, #32]
 800836e:	43df      	mvns	r7, r3
 8008370:	2300      	movs	r3, #0
 8008372:	9309      	str	r3, [sp, #36]	; 0x24
 8008374:	9904      	ldr	r1, [sp, #16]
 8008376:	9802      	ldr	r0, [sp, #8]
 8008378:	f000 fb88 	bl	8008a8c <_Bfree>
 800837c:	2e00      	cmp	r6, #0
 800837e:	d100      	bne.n	8008382 <_dtoa_r+0x96a>
 8008380:	e69b      	b.n	80080ba <_dtoa_r+0x6a2>
 8008382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <_dtoa_r+0x97c>
 8008388:	42b3      	cmp	r3, r6
 800838a:	d003      	beq.n	8008394 <_dtoa_r+0x97c>
 800838c:	0019      	movs	r1, r3
 800838e:	9802      	ldr	r0, [sp, #8]
 8008390:	f000 fb7c 	bl	8008a8c <_Bfree>
 8008394:	0031      	movs	r1, r6
 8008396:	9802      	ldr	r0, [sp, #8]
 8008398:	f000 fb78 	bl	8008a8c <_Bfree>
 800839c:	e68d      	b.n	80080ba <_dtoa_r+0x6a2>
 800839e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	001e      	movs	r6, r3
 80083a4:	e7e1      	b.n	800836a <_dtoa_r+0x952>
 80083a6:	2300      	movs	r3, #0
 80083a8:	e7fa      	b.n	80083a0 <_dtoa_r+0x988>
 80083aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ac:	0037      	movs	r7, r6
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	001e      	movs	r6, r3
 80083b2:	e58a      	b.n	8007eca <_dtoa_r+0x4b2>
 80083b4:	40240000 	.word	0x40240000
 80083b8:	00000433 	.word	0x00000433
 80083bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d100      	bne.n	80083c4 <_dtoa_r+0x9ac>
 80083c2:	e0b2      	b.n	800852a <_dtoa_r+0xb12>
 80083c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c6:	930c      	str	r3, [sp, #48]	; 0x30
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	dd05      	ble.n	80083d8 <_dtoa_r+0x9c0>
 80083cc:	0031      	movs	r1, r6
 80083ce:	0022      	movs	r2, r4
 80083d0:	9802      	ldr	r0, [sp, #8]
 80083d2:	f000 fce5 	bl	8008da0 <__lshift>
 80083d6:	0006      	movs	r6, r0
 80083d8:	0030      	movs	r0, r6
 80083da:	2d00      	cmp	r5, #0
 80083dc:	d011      	beq.n	8008402 <_dtoa_r+0x9ea>
 80083de:	6871      	ldr	r1, [r6, #4]
 80083e0:	9802      	ldr	r0, [sp, #8]
 80083e2:	f000 fb1b 	bl	8008a1c <_Balloc>
 80083e6:	0031      	movs	r1, r6
 80083e8:	0004      	movs	r4, r0
 80083ea:	6933      	ldr	r3, [r6, #16]
 80083ec:	310c      	adds	r1, #12
 80083ee:	1c9a      	adds	r2, r3, #2
 80083f0:	0092      	lsls	r2, r2, #2
 80083f2:	300c      	adds	r0, #12
 80083f4:	f000 fb09 	bl	8008a0a <memcpy>
 80083f8:	2201      	movs	r2, #1
 80083fa:	0021      	movs	r1, r4
 80083fc:	9802      	ldr	r0, [sp, #8]
 80083fe:	f000 fccf 	bl	8008da0 <__lshift>
 8008402:	9609      	str	r6, [sp, #36]	; 0x24
 8008404:	0006      	movs	r6, r0
 8008406:	9b08      	ldr	r3, [sp, #32]
 8008408:	930a      	str	r3, [sp, #40]	; 0x28
 800840a:	9904      	ldr	r1, [sp, #16]
 800840c:	9803      	ldr	r0, [sp, #12]
 800840e:	f7ff fa7d 	bl	800790c <quorem>
 8008412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008414:	900d      	str	r0, [sp, #52]	; 0x34
 8008416:	0004      	movs	r4, r0
 8008418:	9803      	ldr	r0, [sp, #12]
 800841a:	f000 fd13 	bl	8008e44 <__mcmp>
 800841e:	0032      	movs	r2, r6
 8008420:	9010      	str	r0, [sp, #64]	; 0x40
 8008422:	9904      	ldr	r1, [sp, #16]
 8008424:	9802      	ldr	r0, [sp, #8]
 8008426:	f000 fd27 	bl	8008e78 <__mdiff>
 800842a:	2301      	movs	r3, #1
 800842c:	930b      	str	r3, [sp, #44]	; 0x2c
 800842e:	68c3      	ldr	r3, [r0, #12]
 8008430:	3430      	adds	r4, #48	; 0x30
 8008432:	0005      	movs	r5, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <_dtoa_r+0xa2a>
 8008438:	0001      	movs	r1, r0
 800843a:	9803      	ldr	r0, [sp, #12]
 800843c:	f000 fd02 	bl	8008e44 <__mcmp>
 8008440:	900b      	str	r0, [sp, #44]	; 0x2c
 8008442:	0029      	movs	r1, r5
 8008444:	9802      	ldr	r0, [sp, #8]
 8008446:	f000 fb21 	bl	8008a8c <_Bfree>
 800844a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800844e:	4313      	orrs	r3, r2
 8008450:	d10e      	bne.n	8008470 <_dtoa_r+0xa58>
 8008452:	9a06      	ldr	r2, [sp, #24]
 8008454:	3301      	adds	r3, #1
 8008456:	4213      	tst	r3, r2
 8008458:	d10a      	bne.n	8008470 <_dtoa_r+0xa58>
 800845a:	2c39      	cmp	r4, #57	; 0x39
 800845c:	d026      	beq.n	80084ac <_dtoa_r+0xa94>
 800845e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	dd01      	ble.n	8008468 <_dtoa_r+0xa50>
 8008464:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008466:	3431      	adds	r4, #49	; 0x31
 8008468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846a:	1c5d      	adds	r5, r3, #1
 800846c:	701c      	strb	r4, [r3, #0]
 800846e:	e781      	b.n	8008374 <_dtoa_r+0x95c>
 8008470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	db07      	blt.n	8008486 <_dtoa_r+0xa6e>
 8008476:	001d      	movs	r5, r3
 8008478:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800847a:	431d      	orrs	r5, r3
 800847c:	d122      	bne.n	80084c4 <_dtoa_r+0xaac>
 800847e:	2301      	movs	r3, #1
 8008480:	9a06      	ldr	r2, [sp, #24]
 8008482:	4213      	tst	r3, r2
 8008484:	d11e      	bne.n	80084c4 <_dtoa_r+0xaac>
 8008486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008488:	2b00      	cmp	r3, #0
 800848a:	dded      	ble.n	8008468 <_dtoa_r+0xa50>
 800848c:	9903      	ldr	r1, [sp, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	9802      	ldr	r0, [sp, #8]
 8008492:	f000 fc85 	bl	8008da0 <__lshift>
 8008496:	9904      	ldr	r1, [sp, #16]
 8008498:	9003      	str	r0, [sp, #12]
 800849a:	f000 fcd3 	bl	8008e44 <__mcmp>
 800849e:	2800      	cmp	r0, #0
 80084a0:	dc02      	bgt.n	80084a8 <_dtoa_r+0xa90>
 80084a2:	d1e1      	bne.n	8008468 <_dtoa_r+0xa50>
 80084a4:	07e3      	lsls	r3, r4, #31
 80084a6:	d5df      	bpl.n	8008468 <_dtoa_r+0xa50>
 80084a8:	2c39      	cmp	r4, #57	; 0x39
 80084aa:	d1db      	bne.n	8008464 <_dtoa_r+0xa4c>
 80084ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084b0:	1c5d      	adds	r5, r3, #1
 80084b2:	2339      	movs	r3, #57	; 0x39
 80084b4:	7013      	strb	r3, [r2, #0]
 80084b6:	1e6b      	subs	r3, r5, #1
 80084b8:	781a      	ldrb	r2, [r3, #0]
 80084ba:	2a39      	cmp	r2, #57	; 0x39
 80084bc:	d067      	beq.n	800858e <_dtoa_r+0xb76>
 80084be:	3201      	adds	r2, #1
 80084c0:	701a      	strb	r2, [r3, #0]
 80084c2:	e757      	b.n	8008374 <_dtoa_r+0x95c>
 80084c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c6:	1c5d      	adds	r5, r3, #1
 80084c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dd04      	ble.n	80084d8 <_dtoa_r+0xac0>
 80084ce:	2c39      	cmp	r4, #57	; 0x39
 80084d0:	d0ec      	beq.n	80084ac <_dtoa_r+0xa94>
 80084d2:	3401      	adds	r4, #1
 80084d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d6:	e7c9      	b.n	800846c <_dtoa_r+0xa54>
 80084d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084dc:	701c      	strb	r4, [r3, #0]
 80084de:	9b08      	ldr	r3, [sp, #32]
 80084e0:	1aeb      	subs	r3, r5, r3
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d03e      	beq.n	8008564 <_dtoa_r+0xb4c>
 80084e6:	2300      	movs	r3, #0
 80084e8:	220a      	movs	r2, #10
 80084ea:	9903      	ldr	r1, [sp, #12]
 80084ec:	9802      	ldr	r0, [sp, #8]
 80084ee:	f000 fae6 	bl	8008abe <__multadd>
 80084f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f4:	9003      	str	r0, [sp, #12]
 80084f6:	42b3      	cmp	r3, r6
 80084f8:	d109      	bne.n	800850e <_dtoa_r+0xaf6>
 80084fa:	2300      	movs	r3, #0
 80084fc:	220a      	movs	r2, #10
 80084fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008500:	9802      	ldr	r0, [sp, #8]
 8008502:	f000 fadc 	bl	8008abe <__multadd>
 8008506:	9009      	str	r0, [sp, #36]	; 0x24
 8008508:	0006      	movs	r6, r0
 800850a:	950a      	str	r5, [sp, #40]	; 0x28
 800850c:	e77d      	b.n	800840a <_dtoa_r+0x9f2>
 800850e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008510:	2300      	movs	r3, #0
 8008512:	220a      	movs	r2, #10
 8008514:	9802      	ldr	r0, [sp, #8]
 8008516:	f000 fad2 	bl	8008abe <__multadd>
 800851a:	2300      	movs	r3, #0
 800851c:	9009      	str	r0, [sp, #36]	; 0x24
 800851e:	220a      	movs	r2, #10
 8008520:	0031      	movs	r1, r6
 8008522:	9802      	ldr	r0, [sp, #8]
 8008524:	f000 facb 	bl	8008abe <__multadd>
 8008528:	e7ee      	b.n	8008508 <_dtoa_r+0xaf0>
 800852a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852c:	930c      	str	r3, [sp, #48]	; 0x30
 800852e:	9b08      	ldr	r3, [sp, #32]
 8008530:	9306      	str	r3, [sp, #24]
 8008532:	9904      	ldr	r1, [sp, #16]
 8008534:	9803      	ldr	r0, [sp, #12]
 8008536:	f7ff f9e9 	bl	800790c <quorem>
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	3030      	adds	r0, #48	; 0x30
 800853e:	1c5d      	adds	r5, r3, #1
 8008540:	7018      	strb	r0, [r3, #0]
 8008542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008544:	9b08      	ldr	r3, [sp, #32]
 8008546:	0004      	movs	r4, r0
 8008548:	1aeb      	subs	r3, r5, r3
 800854a:	429a      	cmp	r2, r3
 800854c:	dd08      	ble.n	8008560 <_dtoa_r+0xb48>
 800854e:	2300      	movs	r3, #0
 8008550:	220a      	movs	r2, #10
 8008552:	9903      	ldr	r1, [sp, #12]
 8008554:	9802      	ldr	r0, [sp, #8]
 8008556:	f000 fab2 	bl	8008abe <__multadd>
 800855a:	9506      	str	r5, [sp, #24]
 800855c:	9003      	str	r0, [sp, #12]
 800855e:	e7e8      	b.n	8008532 <_dtoa_r+0xb1a>
 8008560:	2300      	movs	r3, #0
 8008562:	9309      	str	r3, [sp, #36]	; 0x24
 8008564:	9903      	ldr	r1, [sp, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	9802      	ldr	r0, [sp, #8]
 800856a:	f000 fc19 	bl	8008da0 <__lshift>
 800856e:	9904      	ldr	r1, [sp, #16]
 8008570:	9003      	str	r0, [sp, #12]
 8008572:	f000 fc67 	bl	8008e44 <__mcmp>
 8008576:	2800      	cmp	r0, #0
 8008578:	dc9d      	bgt.n	80084b6 <_dtoa_r+0xa9e>
 800857a:	d101      	bne.n	8008580 <_dtoa_r+0xb68>
 800857c:	07e3      	lsls	r3, r4, #31
 800857e:	d49a      	bmi.n	80084b6 <_dtoa_r+0xa9e>
 8008580:	1e6b      	subs	r3, r5, #1
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	2a30      	cmp	r2, #48	; 0x30
 8008586:	d000      	beq.n	800858a <_dtoa_r+0xb72>
 8008588:	e6f4      	b.n	8008374 <_dtoa_r+0x95c>
 800858a:	001d      	movs	r5, r3
 800858c:	e7f8      	b.n	8008580 <_dtoa_r+0xb68>
 800858e:	9a08      	ldr	r2, [sp, #32]
 8008590:	429a      	cmp	r2, r3
 8008592:	d103      	bne.n	800859c <_dtoa_r+0xb84>
 8008594:	2331      	movs	r3, #49	; 0x31
 8008596:	3701      	adds	r7, #1
 8008598:	7013      	strb	r3, [r2, #0]
 800859a:	e6eb      	b.n	8008374 <_dtoa_r+0x95c>
 800859c:	001d      	movs	r5, r3
 800859e:	e78a      	b.n	80084b6 <_dtoa_r+0xa9e>
 80085a0:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <_dtoa_r+0xbb8>)
 80085a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085a4:	9308      	str	r3, [sp, #32]
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <_dtoa_r+0xbbc>)
 80085a8:	2a00      	cmp	r2, #0
 80085aa:	d001      	beq.n	80085b0 <_dtoa_r+0xb98>
 80085ac:	f7ff fa77 	bl	8007a9e <_dtoa_r+0x86>
 80085b0:	f7ff fa77 	bl	8007aa2 <_dtoa_r+0x8a>
 80085b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	dc00      	bgt.n	80085bc <_dtoa_r+0xba4>
 80085ba:	e621      	b.n	8008200 <_dtoa_r+0x7e8>
 80085bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80085be:	2001      	movs	r0, #1
 80085c0:	e635      	b.n	800822e <_dtoa_r+0x816>
 80085c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dcb2      	bgt.n	800852e <_dtoa_r+0xb16>
 80085c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	ddaf      	ble.n	800852e <_dtoa_r+0xb16>
 80085ce:	e6bc      	b.n	800834a <_dtoa_r+0x932>
 80085d0:	0800a984 	.word	0x0800a984
 80085d4:	0800a98c 	.word	0x0800a98c

080085d8 <__sflush_r>:
 80085d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085da:	898a      	ldrh	r2, [r1, #12]
 80085dc:	0005      	movs	r5, r0
 80085de:	000c      	movs	r4, r1
 80085e0:	0713      	lsls	r3, r2, #28
 80085e2:	d460      	bmi.n	80086a6 <__sflush_r+0xce>
 80085e4:	684b      	ldr	r3, [r1, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dc04      	bgt.n	80085f4 <__sflush_r+0x1c>
 80085ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	dc01      	bgt.n	80085f4 <__sflush_r+0x1c>
 80085f0:	2000      	movs	r0, #0
 80085f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80085f6:	2f00      	cmp	r7, #0
 80085f8:	d0fa      	beq.n	80085f0 <__sflush_r+0x18>
 80085fa:	2300      	movs	r3, #0
 80085fc:	682e      	ldr	r6, [r5, #0]
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	015b      	lsls	r3, r3, #5
 8008604:	6a21      	ldr	r1, [r4, #32]
 8008606:	401a      	ands	r2, r3
 8008608:	d034      	beq.n	8008674 <__sflush_r+0x9c>
 800860a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	075b      	lsls	r3, r3, #29
 8008610:	d506      	bpl.n	8008620 <__sflush_r+0x48>
 8008612:	6863      	ldr	r3, [r4, #4]
 8008614:	1ac0      	subs	r0, r0, r3
 8008616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <__sflush_r+0x48>
 800861c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800861e:	1ac0      	subs	r0, r0, r3
 8008620:	0002      	movs	r2, r0
 8008622:	6a21      	ldr	r1, [r4, #32]
 8008624:	2300      	movs	r3, #0
 8008626:	0028      	movs	r0, r5
 8008628:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800862a:	47b8      	blx	r7
 800862c:	89a1      	ldrh	r1, [r4, #12]
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d106      	bne.n	8008640 <__sflush_r+0x68>
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	2b1d      	cmp	r3, #29
 8008636:	d830      	bhi.n	800869a <__sflush_r+0xc2>
 8008638:	4a2b      	ldr	r2, [pc, #172]	; (80086e8 <__sflush_r+0x110>)
 800863a:	40da      	lsrs	r2, r3
 800863c:	07d3      	lsls	r3, r2, #31
 800863e:	d52c      	bpl.n	800869a <__sflush_r+0xc2>
 8008640:	2300      	movs	r3, #0
 8008642:	6063      	str	r3, [r4, #4]
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	04cb      	lsls	r3, r1, #19
 800864a:	d505      	bpl.n	8008658 <__sflush_r+0x80>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <__sflush_r+0x7e>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d100      	bne.n	8008658 <__sflush_r+0x80>
 8008656:	6560      	str	r0, [r4, #84]	; 0x54
 8008658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800865a:	602e      	str	r6, [r5, #0]
 800865c:	2900      	cmp	r1, #0
 800865e:	d0c7      	beq.n	80085f0 <__sflush_r+0x18>
 8008660:	0023      	movs	r3, r4
 8008662:	3344      	adds	r3, #68	; 0x44
 8008664:	4299      	cmp	r1, r3
 8008666:	d002      	beq.n	800866e <__sflush_r+0x96>
 8008668:	0028      	movs	r0, r5
 800866a:	f000 fccb 	bl	8009004 <_free_r>
 800866e:	2000      	movs	r0, #0
 8008670:	6360      	str	r0, [r4, #52]	; 0x34
 8008672:	e7be      	b.n	80085f2 <__sflush_r+0x1a>
 8008674:	2301      	movs	r3, #1
 8008676:	0028      	movs	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	d1c6      	bne.n	800860c <__sflush_r+0x34>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0c3      	beq.n	800860c <__sflush_r+0x34>
 8008684:	2b1d      	cmp	r3, #29
 8008686:	d001      	beq.n	800868c <__sflush_r+0xb4>
 8008688:	2b16      	cmp	r3, #22
 800868a:	d101      	bne.n	8008690 <__sflush_r+0xb8>
 800868c:	602e      	str	r6, [r5, #0]
 800868e:	e7af      	b.n	80085f0 <__sflush_r+0x18>
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	89a2      	ldrh	r2, [r4, #12]
 8008694:	4313      	orrs	r3, r2
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	e7ab      	b.n	80085f2 <__sflush_r+0x1a>
 800869a:	2340      	movs	r3, #64	; 0x40
 800869c:	430b      	orrs	r3, r1
 800869e:	2001      	movs	r0, #1
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	4240      	negs	r0, r0
 80086a4:	e7a5      	b.n	80085f2 <__sflush_r+0x1a>
 80086a6:	690f      	ldr	r7, [r1, #16]
 80086a8:	2f00      	cmp	r7, #0
 80086aa:	d0a1      	beq.n	80085f0 <__sflush_r+0x18>
 80086ac:	680b      	ldr	r3, [r1, #0]
 80086ae:	600f      	str	r7, [r1, #0]
 80086b0:	1bdb      	subs	r3, r3, r7
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	2300      	movs	r3, #0
 80086b6:	0792      	lsls	r2, r2, #30
 80086b8:	d100      	bne.n	80086bc <__sflush_r+0xe4>
 80086ba:	694b      	ldr	r3, [r1, #20]
 80086bc:	60a3      	str	r3, [r4, #8]
 80086be:	9b01      	ldr	r3, [sp, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dc00      	bgt.n	80086c6 <__sflush_r+0xee>
 80086c4:	e794      	b.n	80085f0 <__sflush_r+0x18>
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	003a      	movs	r2, r7
 80086ca:	6a21      	ldr	r1, [r4, #32]
 80086cc:	0028      	movs	r0, r5
 80086ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086d0:	47b0      	blx	r6
 80086d2:	2800      	cmp	r0, #0
 80086d4:	dc03      	bgt.n	80086de <__sflush_r+0x106>
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	89a2      	ldrh	r2, [r4, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	e7df      	b.n	800869e <__sflush_r+0xc6>
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	183f      	adds	r7, r7, r0
 80086e2:	1a1b      	subs	r3, r3, r0
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	e7ea      	b.n	80086be <__sflush_r+0xe6>
 80086e8:	20400001 	.word	0x20400001

080086ec <_fflush_r>:
 80086ec:	690b      	ldr	r3, [r1, #16]
 80086ee:	b570      	push	{r4, r5, r6, lr}
 80086f0:	0005      	movs	r5, r0
 80086f2:	000c      	movs	r4, r1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <_fflush_r+0x10>
 80086f8:	2000      	movs	r0, #0
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d004      	beq.n	800870a <_fflush_r+0x1e>
 8008700:	6983      	ldr	r3, [r0, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <_fflush_r+0x1e>
 8008706:	f000 f85f 	bl	80087c8 <__sinit>
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <_fflush_r+0x4c>)
 800870c:	429c      	cmp	r4, r3
 800870e:	d109      	bne.n	8008724 <_fflush_r+0x38>
 8008710:	686c      	ldr	r4, [r5, #4]
 8008712:	220c      	movs	r2, #12
 8008714:	5ea3      	ldrsh	r3, [r4, r2]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0ee      	beq.n	80086f8 <_fflush_r+0xc>
 800871a:	0021      	movs	r1, r4
 800871c:	0028      	movs	r0, r5
 800871e:	f7ff ff5b 	bl	80085d8 <__sflush_r>
 8008722:	e7ea      	b.n	80086fa <_fflush_r+0xe>
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <_fflush_r+0x50>)
 8008726:	429c      	cmp	r4, r3
 8008728:	d101      	bne.n	800872e <_fflush_r+0x42>
 800872a:	68ac      	ldr	r4, [r5, #8]
 800872c:	e7f1      	b.n	8008712 <_fflush_r+0x26>
 800872e:	4b04      	ldr	r3, [pc, #16]	; (8008740 <_fflush_r+0x54>)
 8008730:	429c      	cmp	r4, r3
 8008732:	d1ee      	bne.n	8008712 <_fflush_r+0x26>
 8008734:	68ec      	ldr	r4, [r5, #12]
 8008736:	e7ec      	b.n	8008712 <_fflush_r+0x26>
 8008738:	0800a9b4 	.word	0x0800a9b4
 800873c:	0800a9d4 	.word	0x0800a9d4
 8008740:	0800a994 	.word	0x0800a994

08008744 <std>:
 8008744:	2300      	movs	r3, #0
 8008746:	b510      	push	{r4, lr}
 8008748:	0004      	movs	r4, r0
 800874a:	6003      	str	r3, [r0, #0]
 800874c:	6043      	str	r3, [r0, #4]
 800874e:	6083      	str	r3, [r0, #8]
 8008750:	8181      	strh	r1, [r0, #12]
 8008752:	6643      	str	r3, [r0, #100]	; 0x64
 8008754:	81c2      	strh	r2, [r0, #14]
 8008756:	6103      	str	r3, [r0, #16]
 8008758:	6143      	str	r3, [r0, #20]
 800875a:	6183      	str	r3, [r0, #24]
 800875c:	0019      	movs	r1, r3
 800875e:	2208      	movs	r2, #8
 8008760:	305c      	adds	r0, #92	; 0x5c
 8008762:	f7fe fb1d 	bl	8006da0 <memset>
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <std+0x38>)
 8008768:	6224      	str	r4, [r4, #32]
 800876a:	6263      	str	r3, [r4, #36]	; 0x24
 800876c:	4b04      	ldr	r3, [pc, #16]	; (8008780 <std+0x3c>)
 800876e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008770:	4b04      	ldr	r3, [pc, #16]	; (8008784 <std+0x40>)
 8008772:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008774:	4b04      	ldr	r3, [pc, #16]	; (8008788 <std+0x44>)
 8008776:	6323      	str	r3, [r4, #48]	; 0x30
 8008778:	bd10      	pop	{r4, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	080093f5 	.word	0x080093f5
 8008780:	0800941d 	.word	0x0800941d
 8008784:	08009455 	.word	0x08009455
 8008788:	08009481 	.word	0x08009481

0800878c <_cleanup_r>:
 800878c:	b510      	push	{r4, lr}
 800878e:	4902      	ldr	r1, [pc, #8]	; (8008798 <_cleanup_r+0xc>)
 8008790:	f000 f88c 	bl	80088ac <_fwalk_reent>
 8008794:	bd10      	pop	{r4, pc}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	080086ed 	.word	0x080086ed

0800879c <__sfmoreglue>:
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	2568      	movs	r5, #104	; 0x68
 80087a0:	1e4a      	subs	r2, r1, #1
 80087a2:	4355      	muls	r5, r2
 80087a4:	000e      	movs	r6, r1
 80087a6:	0029      	movs	r1, r5
 80087a8:	3174      	adds	r1, #116	; 0x74
 80087aa:	f000 fc75 	bl	8009098 <_malloc_r>
 80087ae:	1e04      	subs	r4, r0, #0
 80087b0:	d008      	beq.n	80087c4 <__sfmoreglue+0x28>
 80087b2:	2100      	movs	r1, #0
 80087b4:	002a      	movs	r2, r5
 80087b6:	6001      	str	r1, [r0, #0]
 80087b8:	6046      	str	r6, [r0, #4]
 80087ba:	300c      	adds	r0, #12
 80087bc:	60a0      	str	r0, [r4, #8]
 80087be:	3268      	adds	r2, #104	; 0x68
 80087c0:	f7fe faee 	bl	8006da0 <memset>
 80087c4:	0020      	movs	r0, r4
 80087c6:	bd70      	pop	{r4, r5, r6, pc}

080087c8 <__sinit>:
 80087c8:	6983      	ldr	r3, [r0, #24]
 80087ca:	b513      	push	{r0, r1, r4, lr}
 80087cc:	0004      	movs	r4, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d128      	bne.n	8008824 <__sinit+0x5c>
 80087d2:	6483      	str	r3, [r0, #72]	; 0x48
 80087d4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80087d6:	6503      	str	r3, [r0, #80]	; 0x50
 80087d8:	4b13      	ldr	r3, [pc, #76]	; (8008828 <__sinit+0x60>)
 80087da:	4a14      	ldr	r2, [pc, #80]	; (800882c <__sinit+0x64>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6282      	str	r2, [r0, #40]	; 0x28
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	4298      	cmp	r0, r3
 80087e4:	d101      	bne.n	80087ea <__sinit+0x22>
 80087e6:	2301      	movs	r3, #1
 80087e8:	6183      	str	r3, [r0, #24]
 80087ea:	0020      	movs	r0, r4
 80087ec:	f000 f820 	bl	8008830 <__sfp>
 80087f0:	6060      	str	r0, [r4, #4]
 80087f2:	0020      	movs	r0, r4
 80087f4:	f000 f81c 	bl	8008830 <__sfp>
 80087f8:	60a0      	str	r0, [r4, #8]
 80087fa:	0020      	movs	r0, r4
 80087fc:	f000 f818 	bl	8008830 <__sfp>
 8008800:	2200      	movs	r2, #0
 8008802:	60e0      	str	r0, [r4, #12]
 8008804:	2104      	movs	r1, #4
 8008806:	6860      	ldr	r0, [r4, #4]
 8008808:	f7ff ff9c 	bl	8008744 <std>
 800880c:	2201      	movs	r2, #1
 800880e:	2109      	movs	r1, #9
 8008810:	68a0      	ldr	r0, [r4, #8]
 8008812:	f7ff ff97 	bl	8008744 <std>
 8008816:	2202      	movs	r2, #2
 8008818:	2112      	movs	r1, #18
 800881a:	68e0      	ldr	r0, [r4, #12]
 800881c:	f7ff ff92 	bl	8008744 <std>
 8008820:	2301      	movs	r3, #1
 8008822:	61a3      	str	r3, [r4, #24]
 8008824:	bd13      	pop	{r0, r1, r4, pc}
 8008826:	46c0      	nop			; (mov r8, r8)
 8008828:	0800a94c 	.word	0x0800a94c
 800882c:	0800878d 	.word	0x0800878d

08008830 <__sfp>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <__sfp+0x74>)
 8008834:	0007      	movs	r7, r0
 8008836:	681e      	ldr	r6, [r3, #0]
 8008838:	69b3      	ldr	r3, [r6, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <__sfp+0x14>
 800883e:	0030      	movs	r0, r6
 8008840:	f7ff ffc2 	bl	80087c8 <__sinit>
 8008844:	3648      	adds	r6, #72	; 0x48
 8008846:	68b4      	ldr	r4, [r6, #8]
 8008848:	6873      	ldr	r3, [r6, #4]
 800884a:	3b01      	subs	r3, #1
 800884c:	d504      	bpl.n	8008858 <__sfp+0x28>
 800884e:	6833      	ldr	r3, [r6, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d007      	beq.n	8008864 <__sfp+0x34>
 8008854:	6836      	ldr	r6, [r6, #0]
 8008856:	e7f6      	b.n	8008846 <__sfp+0x16>
 8008858:	220c      	movs	r2, #12
 800885a:	5ea5      	ldrsh	r5, [r4, r2]
 800885c:	2d00      	cmp	r5, #0
 800885e:	d00d      	beq.n	800887c <__sfp+0x4c>
 8008860:	3468      	adds	r4, #104	; 0x68
 8008862:	e7f2      	b.n	800884a <__sfp+0x1a>
 8008864:	2104      	movs	r1, #4
 8008866:	0038      	movs	r0, r7
 8008868:	f7ff ff98 	bl	800879c <__sfmoreglue>
 800886c:	6030      	str	r0, [r6, #0]
 800886e:	2800      	cmp	r0, #0
 8008870:	d1f0      	bne.n	8008854 <__sfp+0x24>
 8008872:	230c      	movs	r3, #12
 8008874:	0004      	movs	r4, r0
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	0020      	movs	r0, r4
 800887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800887c:	0020      	movs	r0, r4
 800887e:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <__sfp+0x78>)
 8008880:	6665      	str	r5, [r4, #100]	; 0x64
 8008882:	6025      	str	r5, [r4, #0]
 8008884:	6065      	str	r5, [r4, #4]
 8008886:	60a5      	str	r5, [r4, #8]
 8008888:	60e3      	str	r3, [r4, #12]
 800888a:	6125      	str	r5, [r4, #16]
 800888c:	6165      	str	r5, [r4, #20]
 800888e:	61a5      	str	r5, [r4, #24]
 8008890:	2208      	movs	r2, #8
 8008892:	0029      	movs	r1, r5
 8008894:	305c      	adds	r0, #92	; 0x5c
 8008896:	f7fe fa83 	bl	8006da0 <memset>
 800889a:	6365      	str	r5, [r4, #52]	; 0x34
 800889c:	63a5      	str	r5, [r4, #56]	; 0x38
 800889e:	64a5      	str	r5, [r4, #72]	; 0x48
 80088a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80088a2:	e7e9      	b.n	8008878 <__sfp+0x48>
 80088a4:	0800a94c 	.word	0x0800a94c
 80088a8:	ffff0001 	.word	0xffff0001

080088ac <_fwalk_reent>:
 80088ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ae:	0004      	movs	r4, r0
 80088b0:	0007      	movs	r7, r0
 80088b2:	2600      	movs	r6, #0
 80088b4:	9101      	str	r1, [sp, #4]
 80088b6:	3448      	adds	r4, #72	; 0x48
 80088b8:	2c00      	cmp	r4, #0
 80088ba:	d101      	bne.n	80088c0 <_fwalk_reent+0x14>
 80088bc:	0030      	movs	r0, r6
 80088be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088c0:	6863      	ldr	r3, [r4, #4]
 80088c2:	68a5      	ldr	r5, [r4, #8]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	9b00      	ldr	r3, [sp, #0]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	d501      	bpl.n	80088d2 <_fwalk_reent+0x26>
 80088ce:	6824      	ldr	r4, [r4, #0]
 80088d0:	e7f2      	b.n	80088b8 <_fwalk_reent+0xc>
 80088d2:	89ab      	ldrh	r3, [r5, #12]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d908      	bls.n	80088ea <_fwalk_reent+0x3e>
 80088d8:	220e      	movs	r2, #14
 80088da:	5eab      	ldrsh	r3, [r5, r2]
 80088dc:	3301      	adds	r3, #1
 80088de:	d004      	beq.n	80088ea <_fwalk_reent+0x3e>
 80088e0:	0029      	movs	r1, r5
 80088e2:	0038      	movs	r0, r7
 80088e4:	9b01      	ldr	r3, [sp, #4]
 80088e6:	4798      	blx	r3
 80088e8:	4306      	orrs	r6, r0
 80088ea:	3568      	adds	r5, #104	; 0x68
 80088ec:	e7eb      	b.n	80088c6 <_fwalk_reent+0x1a>
	...

080088f0 <_localeconv_r>:
 80088f0:	4b03      	ldr	r3, [pc, #12]	; (8008900 <_localeconv_r+0x10>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6a18      	ldr	r0, [r3, #32]
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d100      	bne.n	80088fc <_localeconv_r+0xc>
 80088fa:	4802      	ldr	r0, [pc, #8]	; (8008904 <_localeconv_r+0x14>)
 80088fc:	30f0      	adds	r0, #240	; 0xf0
 80088fe:	4770      	bx	lr
 8008900:	20000008 	.word	0x20000008
 8008904:	2000006c 	.word	0x2000006c

08008908 <__swhatbuf_r>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	000e      	movs	r6, r1
 800890c:	001d      	movs	r5, r3
 800890e:	230e      	movs	r3, #14
 8008910:	5ec9      	ldrsh	r1, [r1, r3]
 8008912:	b096      	sub	sp, #88	; 0x58
 8008914:	0014      	movs	r4, r2
 8008916:	2900      	cmp	r1, #0
 8008918:	da07      	bge.n	800892a <__swhatbuf_r+0x22>
 800891a:	2300      	movs	r3, #0
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	89b3      	ldrh	r3, [r6, #12]
 8008920:	061b      	lsls	r3, r3, #24
 8008922:	d411      	bmi.n	8008948 <__swhatbuf_r+0x40>
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	e00f      	b.n	800894a <__swhatbuf_r+0x42>
 800892a:	466a      	mov	r2, sp
 800892c:	f000 fdd4 	bl	80094d8 <_fstat_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	dbf2      	blt.n	800891a <__swhatbuf_r+0x12>
 8008934:	22f0      	movs	r2, #240	; 0xf0
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	0212      	lsls	r2, r2, #8
 800893a:	4013      	ands	r3, r2
 800893c:	4a05      	ldr	r2, [pc, #20]	; (8008954 <__swhatbuf_r+0x4c>)
 800893e:	189b      	adds	r3, r3, r2
 8008940:	425a      	negs	r2, r3
 8008942:	4153      	adcs	r3, r2
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	e7ed      	b.n	8008924 <__swhatbuf_r+0x1c>
 8008948:	2340      	movs	r3, #64	; 0x40
 800894a:	2000      	movs	r0, #0
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	b016      	add	sp, #88	; 0x58
 8008950:	bd70      	pop	{r4, r5, r6, pc}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	ffffe000 	.word	0xffffe000

08008958 <__smakebuf_r>:
 8008958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800895a:	2602      	movs	r6, #2
 800895c:	898b      	ldrh	r3, [r1, #12]
 800895e:	0005      	movs	r5, r0
 8008960:	000c      	movs	r4, r1
 8008962:	4233      	tst	r3, r6
 8008964:	d006      	beq.n	8008974 <__smakebuf_r+0x1c>
 8008966:	0023      	movs	r3, r4
 8008968:	3347      	adds	r3, #71	; 0x47
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	2301      	movs	r3, #1
 8008970:	6163      	str	r3, [r4, #20]
 8008972:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008974:	ab01      	add	r3, sp, #4
 8008976:	466a      	mov	r2, sp
 8008978:	f7ff ffc6 	bl	8008908 <__swhatbuf_r>
 800897c:	9900      	ldr	r1, [sp, #0]
 800897e:	0007      	movs	r7, r0
 8008980:	0028      	movs	r0, r5
 8008982:	f000 fb89 	bl	8009098 <_malloc_r>
 8008986:	2800      	cmp	r0, #0
 8008988:	d108      	bne.n	800899c <__smakebuf_r+0x44>
 800898a:	220c      	movs	r2, #12
 800898c:	5ea3      	ldrsh	r3, [r4, r2]
 800898e:	059a      	lsls	r2, r3, #22
 8008990:	d4ef      	bmi.n	8008972 <__smakebuf_r+0x1a>
 8008992:	2203      	movs	r2, #3
 8008994:	4393      	bics	r3, r2
 8008996:	431e      	orrs	r6, r3
 8008998:	81a6      	strh	r6, [r4, #12]
 800899a:	e7e4      	b.n	8008966 <__smakebuf_r+0xe>
 800899c:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <__smakebuf_r+0x84>)
 800899e:	62ab      	str	r3, [r5, #40]	; 0x28
 80089a0:	2380      	movs	r3, #128	; 0x80
 80089a2:	89a2      	ldrh	r2, [r4, #12]
 80089a4:	6020      	str	r0, [r4, #0]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	9b00      	ldr	r3, [sp, #0]
 80089ac:	6120      	str	r0, [r4, #16]
 80089ae:	6163      	str	r3, [r4, #20]
 80089b0:	9b01      	ldr	r3, [sp, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00d      	beq.n	80089d2 <__smakebuf_r+0x7a>
 80089b6:	230e      	movs	r3, #14
 80089b8:	5ee1      	ldrsh	r1, [r4, r3]
 80089ba:	0028      	movs	r0, r5
 80089bc:	f000 fd9e 	bl	80094fc <_isatty_r>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d006      	beq.n	80089d2 <__smakebuf_r+0x7a>
 80089c4:	2203      	movs	r2, #3
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	4393      	bics	r3, r2
 80089ca:	001a      	movs	r2, r3
 80089cc:	2301      	movs	r3, #1
 80089ce:	4313      	orrs	r3, r2
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	89a0      	ldrh	r0, [r4, #12]
 80089d4:	4338      	orrs	r0, r7
 80089d6:	81a0      	strh	r0, [r4, #12]
 80089d8:	e7cb      	b.n	8008972 <__smakebuf_r+0x1a>
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	0800878d 	.word	0x0800878d

080089e0 <malloc>:
 80089e0:	b510      	push	{r4, lr}
 80089e2:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <malloc+0x10>)
 80089e4:	0001      	movs	r1, r0
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	f000 fb56 	bl	8009098 <_malloc_r>
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	20000008 	.word	0x20000008

080089f4 <memchr>:
 80089f4:	b2c9      	uxtb	r1, r1
 80089f6:	1882      	adds	r2, r0, r2
 80089f8:	4290      	cmp	r0, r2
 80089fa:	d101      	bne.n	8008a00 <memchr+0xc>
 80089fc:	2000      	movs	r0, #0
 80089fe:	4770      	bx	lr
 8008a00:	7803      	ldrb	r3, [r0, #0]
 8008a02:	428b      	cmp	r3, r1
 8008a04:	d0fb      	beq.n	80089fe <memchr+0xa>
 8008a06:	3001      	adds	r0, #1
 8008a08:	e7f6      	b.n	80089f8 <memchr+0x4>

08008a0a <memcpy>:
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d100      	bne.n	8008a14 <memcpy+0xa>
 8008a12:	bd10      	pop	{r4, pc}
 8008a14:	5ccc      	ldrb	r4, [r1, r3]
 8008a16:	54c4      	strb	r4, [r0, r3]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	e7f8      	b.n	8008a0e <memcpy+0x4>

08008a1c <_Balloc>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a20:	0004      	movs	r4, r0
 8008a22:	000d      	movs	r5, r1
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	d107      	bne.n	8008a38 <_Balloc+0x1c>
 8008a28:	2010      	movs	r0, #16
 8008a2a:	f7ff ffd9 	bl	80089e0 <malloc>
 8008a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8008a30:	6046      	str	r6, [r0, #4]
 8008a32:	6086      	str	r6, [r0, #8]
 8008a34:	6006      	str	r6, [r0, #0]
 8008a36:	60c6      	str	r6, [r0, #12]
 8008a38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a3a:	68f3      	ldr	r3, [r6, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d013      	beq.n	8008a68 <_Balloc+0x4c>
 8008a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a42:	00aa      	lsls	r2, r5, #2
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	189b      	adds	r3, r3, r2
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d118      	bne.n	8008a80 <_Balloc+0x64>
 8008a4e:	2101      	movs	r1, #1
 8008a50:	000e      	movs	r6, r1
 8008a52:	40ae      	lsls	r6, r5
 8008a54:	1d72      	adds	r2, r6, #5
 8008a56:	0092      	lsls	r2, r2, #2
 8008a58:	0020      	movs	r0, r4
 8008a5a:	f000 fac5 	bl	8008fe8 <_calloc_r>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d00c      	beq.n	8008a7c <_Balloc+0x60>
 8008a62:	6045      	str	r5, [r0, #4]
 8008a64:	6086      	str	r6, [r0, #8]
 8008a66:	e00d      	b.n	8008a84 <_Balloc+0x68>
 8008a68:	2221      	movs	r2, #33	; 0x21
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	0020      	movs	r0, r4
 8008a6e:	f000 fabb 	bl	8008fe8 <_calloc_r>
 8008a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a74:	60f0      	str	r0, [r6, #12]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e1      	bne.n	8008a40 <_Balloc+0x24>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	6802      	ldr	r2, [r0, #0]
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	2300      	movs	r3, #0
 8008a86:	6103      	str	r3, [r0, #16]
 8008a88:	60c3      	str	r3, [r0, #12]
 8008a8a:	e7f8      	b.n	8008a7e <_Balloc+0x62>

08008a8c <_Bfree>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a90:	0006      	movs	r6, r0
 8008a92:	000d      	movs	r5, r1
 8008a94:	2c00      	cmp	r4, #0
 8008a96:	d107      	bne.n	8008aa8 <_Bfree+0x1c>
 8008a98:	2010      	movs	r0, #16
 8008a9a:	f7ff ffa1 	bl	80089e0 <malloc>
 8008a9e:	6270      	str	r0, [r6, #36]	; 0x24
 8008aa0:	6044      	str	r4, [r0, #4]
 8008aa2:	6084      	str	r4, [r0, #8]
 8008aa4:	6004      	str	r4, [r0, #0]
 8008aa6:	60c4      	str	r4, [r0, #12]
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	d007      	beq.n	8008abc <_Bfree+0x30>
 8008aac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008aae:	686a      	ldr	r2, [r5, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	0092      	lsls	r2, r2, #2
 8008ab4:	189b      	adds	r3, r3, r2
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	602a      	str	r2, [r5, #0]
 8008aba:	601d      	str	r5, [r3, #0]
 8008abc:	bd70      	pop	{r4, r5, r6, pc}

08008abe <__multadd>:
 8008abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac0:	001e      	movs	r6, r3
 8008ac2:	2314      	movs	r3, #20
 8008ac4:	469c      	mov	ip, r3
 8008ac6:	0007      	movs	r7, r0
 8008ac8:	000c      	movs	r4, r1
 8008aca:	2000      	movs	r0, #0
 8008acc:	690d      	ldr	r5, [r1, #16]
 8008ace:	448c      	add	ip, r1
 8008ad0:	4663      	mov	r3, ip
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	b299      	uxth	r1, r3
 8008ad8:	4663      	mov	r3, ip
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4351      	muls	r1, r2
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	4353      	muls	r3, r2
 8008ae2:	1989      	adds	r1, r1, r6
 8008ae4:	0c0e      	lsrs	r6, r1, #16
 8008ae6:	199b      	adds	r3, r3, r6
 8008ae8:	b289      	uxth	r1, r1
 8008aea:	0c1e      	lsrs	r6, r3, #16
 8008aec:	041b      	lsls	r3, r3, #16
 8008aee:	185b      	adds	r3, r3, r1
 8008af0:	4661      	mov	r1, ip
 8008af2:	c108      	stmia	r1!, {r3}
 8008af4:	468c      	mov	ip, r1
 8008af6:	4285      	cmp	r5, r0
 8008af8:	dcea      	bgt.n	8008ad0 <__multadd+0x12>
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d01b      	beq.n	8008b36 <__multadd+0x78>
 8008afe:	68a3      	ldr	r3, [r4, #8]
 8008b00:	42ab      	cmp	r3, r5
 8008b02:	dc12      	bgt.n	8008b2a <__multadd+0x6c>
 8008b04:	6863      	ldr	r3, [r4, #4]
 8008b06:	0038      	movs	r0, r7
 8008b08:	1c59      	adds	r1, r3, #1
 8008b0a:	f7ff ff87 	bl	8008a1c <_Balloc>
 8008b0e:	0021      	movs	r1, r4
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	9001      	str	r0, [sp, #4]
 8008b14:	1c9a      	adds	r2, r3, #2
 8008b16:	0092      	lsls	r2, r2, #2
 8008b18:	310c      	adds	r1, #12
 8008b1a:	300c      	adds	r0, #12
 8008b1c:	f7ff ff75 	bl	8008a0a <memcpy>
 8008b20:	0021      	movs	r1, r4
 8008b22:	0038      	movs	r0, r7
 8008b24:	f7ff ffb2 	bl	8008a8c <_Bfree>
 8008b28:	9c01      	ldr	r4, [sp, #4]
 8008b2a:	1d2b      	adds	r3, r5, #4
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	18e3      	adds	r3, r4, r3
 8008b30:	3501      	adds	r5, #1
 8008b32:	605e      	str	r6, [r3, #4]
 8008b34:	6125      	str	r5, [r4, #16]
 8008b36:	0020      	movs	r0, r4
 8008b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08008b3a <__hi0bits>:
 8008b3a:	0003      	movs	r3, r0
 8008b3c:	0c02      	lsrs	r2, r0, #16
 8008b3e:	2000      	movs	r0, #0
 8008b40:	4282      	cmp	r2, r0
 8008b42:	d101      	bne.n	8008b48 <__hi0bits+0xe>
 8008b44:	041b      	lsls	r3, r3, #16
 8008b46:	3010      	adds	r0, #16
 8008b48:	0e1a      	lsrs	r2, r3, #24
 8008b4a:	d101      	bne.n	8008b50 <__hi0bits+0x16>
 8008b4c:	3008      	adds	r0, #8
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	0f1a      	lsrs	r2, r3, #28
 8008b52:	d101      	bne.n	8008b58 <__hi0bits+0x1e>
 8008b54:	3004      	adds	r0, #4
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	0f9a      	lsrs	r2, r3, #30
 8008b5a:	d101      	bne.n	8008b60 <__hi0bits+0x26>
 8008b5c:	3002      	adds	r0, #2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	db03      	blt.n	8008b6c <__hi0bits+0x32>
 8008b64:	3001      	adds	r0, #1
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	d400      	bmi.n	8008b6c <__hi0bits+0x32>
 8008b6a:	2020      	movs	r0, #32
 8008b6c:	4770      	bx	lr

08008b6e <__lo0bits>:
 8008b6e:	2207      	movs	r2, #7
 8008b70:	6803      	ldr	r3, [r0, #0]
 8008b72:	b510      	push	{r4, lr}
 8008b74:	0001      	movs	r1, r0
 8008b76:	401a      	ands	r2, r3
 8008b78:	d00d      	beq.n	8008b96 <__lo0bits+0x28>
 8008b7a:	2401      	movs	r4, #1
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	4223      	tst	r3, r4
 8008b80:	d105      	bne.n	8008b8e <__lo0bits+0x20>
 8008b82:	3002      	adds	r0, #2
 8008b84:	4203      	tst	r3, r0
 8008b86:	d003      	beq.n	8008b90 <__lo0bits+0x22>
 8008b88:	40e3      	lsrs	r3, r4
 8008b8a:	0020      	movs	r0, r4
 8008b8c:	600b      	str	r3, [r1, #0]
 8008b8e:	bd10      	pop	{r4, pc}
 8008b90:	089b      	lsrs	r3, r3, #2
 8008b92:	600b      	str	r3, [r1, #0]
 8008b94:	e7fb      	b.n	8008b8e <__lo0bits+0x20>
 8008b96:	b29c      	uxth	r4, r3
 8008b98:	0010      	movs	r0, r2
 8008b9a:	2c00      	cmp	r4, #0
 8008b9c:	d101      	bne.n	8008ba2 <__lo0bits+0x34>
 8008b9e:	2010      	movs	r0, #16
 8008ba0:	0c1b      	lsrs	r3, r3, #16
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	d101      	bne.n	8008bac <__lo0bits+0x3e>
 8008ba8:	3008      	adds	r0, #8
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	071a      	lsls	r2, r3, #28
 8008bae:	d101      	bne.n	8008bb4 <__lo0bits+0x46>
 8008bb0:	3004      	adds	r0, #4
 8008bb2:	091b      	lsrs	r3, r3, #4
 8008bb4:	079a      	lsls	r2, r3, #30
 8008bb6:	d101      	bne.n	8008bbc <__lo0bits+0x4e>
 8008bb8:	3002      	adds	r0, #2
 8008bba:	089b      	lsrs	r3, r3, #2
 8008bbc:	07da      	lsls	r2, r3, #31
 8008bbe:	d4e8      	bmi.n	8008b92 <__lo0bits+0x24>
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	d001      	beq.n	8008bc8 <__lo0bits+0x5a>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	e7e4      	b.n	8008b92 <__lo0bits+0x24>
 8008bc8:	2020      	movs	r0, #32
 8008bca:	e7e0      	b.n	8008b8e <__lo0bits+0x20>

08008bcc <__i2b>:
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	000c      	movs	r4, r1
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	f7ff ff23 	bl	8008a1c <_Balloc>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	6144      	str	r4, [r0, #20]
 8008bda:	6103      	str	r3, [r0, #16]
 8008bdc:	bd10      	pop	{r4, pc}

08008bde <__multiply>:
 8008bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be0:	690b      	ldr	r3, [r1, #16]
 8008be2:	0014      	movs	r4, r2
 8008be4:	6912      	ldr	r2, [r2, #16]
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	000d      	movs	r5, r1
 8008bea:	4293      	cmp	r3, r2
 8008bec:	da01      	bge.n	8008bf2 <__multiply+0x14>
 8008bee:	0025      	movs	r5, r4
 8008bf0:	000c      	movs	r4, r1
 8008bf2:	692f      	ldr	r7, [r5, #16]
 8008bf4:	6926      	ldr	r6, [r4, #16]
 8008bf6:	6869      	ldr	r1, [r5, #4]
 8008bf8:	19bb      	adds	r3, r7, r6
 8008bfa:	9302      	str	r3, [sp, #8]
 8008bfc:	68ab      	ldr	r3, [r5, #8]
 8008bfe:	19ba      	adds	r2, r7, r6
 8008c00:	4293      	cmp	r3, r2
 8008c02:	da00      	bge.n	8008c06 <__multiply+0x28>
 8008c04:	3101      	adds	r1, #1
 8008c06:	f7ff ff09 	bl	8008a1c <_Balloc>
 8008c0a:	0002      	movs	r2, r0
 8008c0c:	19bb      	adds	r3, r7, r6
 8008c0e:	3214      	adds	r2, #20
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	18d3      	adds	r3, r2, r3
 8008c14:	469c      	mov	ip, r3
 8008c16:	2100      	movs	r1, #0
 8008c18:	0013      	movs	r3, r2
 8008c1a:	9004      	str	r0, [sp, #16]
 8008c1c:	4563      	cmp	r3, ip
 8008c1e:	d31d      	bcc.n	8008c5c <__multiply+0x7e>
 8008c20:	3514      	adds	r5, #20
 8008c22:	00bf      	lsls	r7, r7, #2
 8008c24:	19eb      	adds	r3, r5, r7
 8008c26:	3414      	adds	r4, #20
 8008c28:	00b6      	lsls	r6, r6, #2
 8008c2a:	9305      	str	r3, [sp, #20]
 8008c2c:	19a3      	adds	r3, r4, r6
 8008c2e:	9503      	str	r5, [sp, #12]
 8008c30:	9401      	str	r4, [sp, #4]
 8008c32:	9307      	str	r3, [sp, #28]
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	9901      	ldr	r1, [sp, #4]
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d311      	bcc.n	8008c60 <__multiply+0x82>
 8008c3c:	9b02      	ldr	r3, [sp, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dd06      	ble.n	8008c50 <__multiply+0x72>
 8008c42:	2304      	movs	r3, #4
 8008c44:	425b      	negs	r3, r3
 8008c46:	449c      	add	ip, r3
 8008c48:	4663      	mov	r3, ip
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d051      	beq.n	8008cf4 <__multiply+0x116>
 8008c50:	9b04      	ldr	r3, [sp, #16]
 8008c52:	9a02      	ldr	r2, [sp, #8]
 8008c54:	0018      	movs	r0, r3
 8008c56:	611a      	str	r2, [r3, #16]
 8008c58:	b009      	add	sp, #36	; 0x24
 8008c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c5c:	c302      	stmia	r3!, {r1}
 8008c5e:	e7dd      	b.n	8008c1c <__multiply+0x3e>
 8008c60:	9b01      	ldr	r3, [sp, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	b298      	uxth	r0, r3
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d01c      	beq.n	8008ca4 <__multiply+0xc6>
 8008c6a:	0015      	movs	r5, r2
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	9f03      	ldr	r7, [sp, #12]
 8008c70:	cf02      	ldmia	r7!, {r1}
 8008c72:	682c      	ldr	r4, [r5, #0]
 8008c74:	b28b      	uxth	r3, r1
 8008c76:	4343      	muls	r3, r0
 8008c78:	0c09      	lsrs	r1, r1, #16
 8008c7a:	4341      	muls	r1, r0
 8008c7c:	b2a4      	uxth	r4, r4
 8008c7e:	191b      	adds	r3, r3, r4
 8008c80:	199b      	adds	r3, r3, r6
 8008c82:	000e      	movs	r6, r1
 8008c84:	6829      	ldr	r1, [r5, #0]
 8008c86:	9506      	str	r5, [sp, #24]
 8008c88:	0c09      	lsrs	r1, r1, #16
 8008c8a:	1871      	adds	r1, r6, r1
 8008c8c:	0c1e      	lsrs	r6, r3, #16
 8008c8e:	1989      	adds	r1, r1, r6
 8008c90:	0c0e      	lsrs	r6, r1, #16
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	0409      	lsls	r1, r1, #16
 8008c96:	430b      	orrs	r3, r1
 8008c98:	c508      	stmia	r5!, {r3}
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	42bb      	cmp	r3, r7
 8008c9e:	d8e7      	bhi.n	8008c70 <__multiply+0x92>
 8008ca0:	9b06      	ldr	r3, [sp, #24]
 8008ca2:	605e      	str	r6, [r3, #4]
 8008ca4:	9b01      	ldr	r3, [sp, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	0c1d      	lsrs	r5, r3, #16
 8008caa:	d01e      	beq.n	8008cea <__multiply+0x10c>
 8008cac:	0010      	movs	r0, r2
 8008cae:	2700      	movs	r7, #0
 8008cb0:	6813      	ldr	r3, [r2, #0]
 8008cb2:	9e03      	ldr	r6, [sp, #12]
 8008cb4:	6831      	ldr	r1, [r6, #0]
 8008cb6:	6804      	ldr	r4, [r0, #0]
 8008cb8:	b289      	uxth	r1, r1
 8008cba:	4369      	muls	r1, r5
 8008cbc:	0c24      	lsrs	r4, r4, #16
 8008cbe:	1909      	adds	r1, r1, r4
 8008cc0:	19c9      	adds	r1, r1, r7
 8008cc2:	040f      	lsls	r7, r1, #16
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	433b      	orrs	r3, r7
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	ce80      	ldmia	r6!, {r7}
 8008ccc:	6843      	ldr	r3, [r0, #4]
 8008cce:	0c3f      	lsrs	r7, r7, #16
 8008cd0:	436f      	muls	r7, r5
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	0c09      	lsrs	r1, r1, #16
 8008cd8:	185b      	adds	r3, r3, r1
 8008cda:	9905      	ldr	r1, [sp, #20]
 8008cdc:	9006      	str	r0, [sp, #24]
 8008cde:	0c1f      	lsrs	r7, r3, #16
 8008ce0:	3004      	adds	r0, #4
 8008ce2:	42b1      	cmp	r1, r6
 8008ce4:	d8e6      	bhi.n	8008cb4 <__multiply+0xd6>
 8008ce6:	9906      	ldr	r1, [sp, #24]
 8008ce8:	604b      	str	r3, [r1, #4]
 8008cea:	9b01      	ldr	r3, [sp, #4]
 8008cec:	3204      	adds	r2, #4
 8008cee:	3304      	adds	r3, #4
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	e79f      	b.n	8008c34 <__multiply+0x56>
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	e79f      	b.n	8008c3c <__multiply+0x5e>

08008cfc <__pow5mult>:
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d00:	4013      	ands	r3, r2
 8008d02:	0005      	movs	r5, r0
 8008d04:	000e      	movs	r6, r1
 8008d06:	0014      	movs	r4, r2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <__pow5mult+0x22>
 8008d0c:	4922      	ldr	r1, [pc, #136]	; (8008d98 <__pow5mult+0x9c>)
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	009a      	lsls	r2, r3, #2
 8008d12:	5852      	ldr	r2, [r2, r1]
 8008d14:	2300      	movs	r3, #0
 8008d16:	0031      	movs	r1, r6
 8008d18:	f7ff fed1 	bl	8008abe <__multadd>
 8008d1c:	0006      	movs	r6, r0
 8008d1e:	10a3      	asrs	r3, r4, #2
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	d036      	beq.n	8008d92 <__pow5mult+0x96>
 8008d24:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	d107      	bne.n	8008d3a <__pow5mult+0x3e>
 8008d2a:	2010      	movs	r0, #16
 8008d2c:	f7ff fe58 	bl	80089e0 <malloc>
 8008d30:	6268      	str	r0, [r5, #36]	; 0x24
 8008d32:	6044      	str	r4, [r0, #4]
 8008d34:	6084      	str	r4, [r0, #8]
 8008d36:	6004      	str	r4, [r0, #0]
 8008d38:	60c4      	str	r4, [r0, #12]
 8008d3a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008d3c:	68bc      	ldr	r4, [r7, #8]
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	d107      	bne.n	8008d52 <__pow5mult+0x56>
 8008d42:	4916      	ldr	r1, [pc, #88]	; (8008d9c <__pow5mult+0xa0>)
 8008d44:	0028      	movs	r0, r5
 8008d46:	f7ff ff41 	bl	8008bcc <__i2b>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	0004      	movs	r4, r0
 8008d4e:	60b8      	str	r0, [r7, #8]
 8008d50:	6003      	str	r3, [r0, #0]
 8008d52:	2201      	movs	r2, #1
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	4213      	tst	r3, r2
 8008d58:	d00a      	beq.n	8008d70 <__pow5mult+0x74>
 8008d5a:	0031      	movs	r1, r6
 8008d5c:	0022      	movs	r2, r4
 8008d5e:	0028      	movs	r0, r5
 8008d60:	f7ff ff3d 	bl	8008bde <__multiply>
 8008d64:	0007      	movs	r7, r0
 8008d66:	0031      	movs	r1, r6
 8008d68:	0028      	movs	r0, r5
 8008d6a:	f7ff fe8f 	bl	8008a8c <_Bfree>
 8008d6e:	003e      	movs	r6, r7
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	105b      	asrs	r3, r3, #1
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	d00c      	beq.n	8008d92 <__pow5mult+0x96>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d107      	bne.n	8008d8e <__pow5mult+0x92>
 8008d7e:	0022      	movs	r2, r4
 8008d80:	0021      	movs	r1, r4
 8008d82:	0028      	movs	r0, r5
 8008d84:	f7ff ff2b 	bl	8008bde <__multiply>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	6020      	str	r0, [r4, #0]
 8008d8c:	6003      	str	r3, [r0, #0]
 8008d8e:	0004      	movs	r4, r0
 8008d90:	e7df      	b.n	8008d52 <__pow5mult+0x56>
 8008d92:	0030      	movs	r0, r6
 8008d94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d96:	46c0      	nop			; (mov r8, r8)
 8008d98:	0800aae8 	.word	0x0800aae8
 8008d9c:	00000271 	.word	0x00000271

08008da0 <__lshift>:
 8008da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da2:	000d      	movs	r5, r1
 8008da4:	0017      	movs	r7, r2
 8008da6:	692b      	ldr	r3, [r5, #16]
 8008da8:	1154      	asrs	r4, r2, #5
 8008daa:	b085      	sub	sp, #20
 8008dac:	18e3      	adds	r3, r4, r3
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	3301      	adds	r3, #1
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	6849      	ldr	r1, [r1, #4]
 8008db6:	68ab      	ldr	r3, [r5, #8]
 8008db8:	9002      	str	r0, [sp, #8]
 8008dba:	9a00      	ldr	r2, [sp, #0]
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	db35      	blt.n	8008e2c <__lshift+0x8c>
 8008dc0:	9802      	ldr	r0, [sp, #8]
 8008dc2:	f7ff fe2b 	bl	8008a1c <_Balloc>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	0002      	movs	r2, r0
 8008dca:	0006      	movs	r6, r0
 8008dcc:	0019      	movs	r1, r3
 8008dce:	3214      	adds	r2, #20
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	db2e      	blt.n	8008e32 <__lshift+0x92>
 8008dd4:	43e3      	mvns	r3, r4
 8008dd6:	17db      	asrs	r3, r3, #31
 8008dd8:	401c      	ands	r4, r3
 8008dda:	002b      	movs	r3, r5
 8008ddc:	00a4      	lsls	r4, r4, #2
 8008dde:	1914      	adds	r4, r2, r4
 8008de0:	692a      	ldr	r2, [r5, #16]
 8008de2:	3314      	adds	r3, #20
 8008de4:	0092      	lsls	r2, r2, #2
 8008de6:	189a      	adds	r2, r3, r2
 8008de8:	4694      	mov	ip, r2
 8008dea:	221f      	movs	r2, #31
 8008dec:	4017      	ands	r7, r2
 8008dee:	d024      	beq.n	8008e3a <__lshift+0x9a>
 8008df0:	3201      	adds	r2, #1
 8008df2:	1bd2      	subs	r2, r2, r7
 8008df4:	9203      	str	r2, [sp, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	6819      	ldr	r1, [r3, #0]
 8008dfa:	0020      	movs	r0, r4
 8008dfc:	40b9      	lsls	r1, r7
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	c404      	stmia	r4!, {r2}
 8008e02:	cb04      	ldmia	r3!, {r2}
 8008e04:	9903      	ldr	r1, [sp, #12]
 8008e06:	40ca      	lsrs	r2, r1
 8008e08:	459c      	cmp	ip, r3
 8008e0a:	d8f5      	bhi.n	8008df8 <__lshift+0x58>
 8008e0c:	6042      	str	r2, [r0, #4]
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	d002      	beq.n	8008e18 <__lshift+0x78>
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	3302      	adds	r3, #2
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	9802      	ldr	r0, [sp, #8]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	6133      	str	r3, [r6, #16]
 8008e20:	0029      	movs	r1, r5
 8008e22:	f7ff fe33 	bl	8008a8c <_Bfree>
 8008e26:	0030      	movs	r0, r6
 8008e28:	b005      	add	sp, #20
 8008e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e2c:	3101      	adds	r1, #1
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	e7c3      	b.n	8008dba <__lshift+0x1a>
 8008e32:	0098      	lsls	r0, r3, #2
 8008e34:	5011      	str	r1, [r2, r0]
 8008e36:	3301      	adds	r3, #1
 8008e38:	e7ca      	b.n	8008dd0 <__lshift+0x30>
 8008e3a:	cb04      	ldmia	r3!, {r2}
 8008e3c:	c404      	stmia	r4!, {r2}
 8008e3e:	459c      	cmp	ip, r3
 8008e40:	d8fb      	bhi.n	8008e3a <__lshift+0x9a>
 8008e42:	e7e9      	b.n	8008e18 <__lshift+0x78>

08008e44 <__mcmp>:
 8008e44:	690a      	ldr	r2, [r1, #16]
 8008e46:	6903      	ldr	r3, [r0, #16]
 8008e48:	b530      	push	{r4, r5, lr}
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	d10d      	bne.n	8008e6a <__mcmp+0x26>
 8008e4e:	0092      	lsls	r2, r2, #2
 8008e50:	3014      	adds	r0, #20
 8008e52:	3114      	adds	r1, #20
 8008e54:	1884      	adds	r4, r0, r2
 8008e56:	1889      	adds	r1, r1, r2
 8008e58:	3c04      	subs	r4, #4
 8008e5a:	3904      	subs	r1, #4
 8008e5c:	6825      	ldr	r5, [r4, #0]
 8008e5e:	680a      	ldr	r2, [r1, #0]
 8008e60:	4295      	cmp	r5, r2
 8008e62:	d004      	beq.n	8008e6e <__mcmp+0x2a>
 8008e64:	2301      	movs	r3, #1
 8008e66:	4295      	cmp	r5, r2
 8008e68:	d304      	bcc.n	8008e74 <__mcmp+0x30>
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	bd30      	pop	{r4, r5, pc}
 8008e6e:	42a0      	cmp	r0, r4
 8008e70:	d3f2      	bcc.n	8008e58 <__mcmp+0x14>
 8008e72:	e7fa      	b.n	8008e6a <__mcmp+0x26>
 8008e74:	425b      	negs	r3, r3
 8008e76:	e7f8      	b.n	8008e6a <__mcmp+0x26>

08008e78 <__mdiff>:
 8008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7a:	000d      	movs	r5, r1
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	0007      	movs	r7, r0
 8008e80:	0011      	movs	r1, r2
 8008e82:	0028      	movs	r0, r5
 8008e84:	0014      	movs	r4, r2
 8008e86:	f7ff ffdd 	bl	8008e44 <__mcmp>
 8008e8a:	1e06      	subs	r6, r0, #0
 8008e8c:	d108      	bne.n	8008ea0 <__mdiff+0x28>
 8008e8e:	0001      	movs	r1, r0
 8008e90:	0038      	movs	r0, r7
 8008e92:	f7ff fdc3 	bl	8008a1c <_Balloc>
 8008e96:	2301      	movs	r3, #1
 8008e98:	6146      	str	r6, [r0, #20]
 8008e9a:	6103      	str	r3, [r0, #16]
 8008e9c:	b005      	add	sp, #20
 8008e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	db04      	blt.n	8008eb2 <__mdiff+0x3a>
 8008ea8:	0023      	movs	r3, r4
 8008eaa:	002c      	movs	r4, r5
 8008eac:	001d      	movs	r5, r3
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	6861      	ldr	r1, [r4, #4]
 8008eb4:	0038      	movs	r0, r7
 8008eb6:	f7ff fdb1 	bl	8008a1c <_Balloc>
 8008eba:	002f      	movs	r7, r5
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	9b01      	ldr	r3, [sp, #4]
 8008ec0:	6926      	ldr	r6, [r4, #16]
 8008ec2:	60c3      	str	r3, [r0, #12]
 8008ec4:	3414      	adds	r4, #20
 8008ec6:	00b3      	lsls	r3, r6, #2
 8008ec8:	18e3      	adds	r3, r4, r3
 8008eca:	9302      	str	r3, [sp, #8]
 8008ecc:	692b      	ldr	r3, [r5, #16]
 8008ece:	3714      	adds	r7, #20
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	9303      	str	r3, [sp, #12]
 8008ed6:	0003      	movs	r3, r0
 8008ed8:	4694      	mov	ip, r2
 8008eda:	3314      	adds	r3, #20
 8008edc:	cc20      	ldmia	r4!, {r5}
 8008ede:	cf04      	ldmia	r7!, {r2}
 8008ee0:	9201      	str	r2, [sp, #4]
 8008ee2:	b2aa      	uxth	r2, r5
 8008ee4:	4494      	add	ip, r2
 8008ee6:	466a      	mov	r2, sp
 8008ee8:	4661      	mov	r1, ip
 8008eea:	8892      	ldrh	r2, [r2, #4]
 8008eec:	0c2d      	lsrs	r5, r5, #16
 8008eee:	1a8a      	subs	r2, r1, r2
 8008ef0:	9901      	ldr	r1, [sp, #4]
 8008ef2:	0c09      	lsrs	r1, r1, #16
 8008ef4:	1a69      	subs	r1, r5, r1
 8008ef6:	1415      	asrs	r5, r2, #16
 8008ef8:	1949      	adds	r1, r1, r5
 8008efa:	140d      	asrs	r5, r1, #16
 8008efc:	b292      	uxth	r2, r2
 8008efe:	0409      	lsls	r1, r1, #16
 8008f00:	430a      	orrs	r2, r1
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	9a03      	ldr	r2, [sp, #12]
 8008f06:	46ac      	mov	ip, r5
 8008f08:	3304      	adds	r3, #4
 8008f0a:	42ba      	cmp	r2, r7
 8008f0c:	d8e6      	bhi.n	8008edc <__mdiff+0x64>
 8008f0e:	9902      	ldr	r1, [sp, #8]
 8008f10:	001a      	movs	r2, r3
 8008f12:	428c      	cmp	r4, r1
 8008f14:	d305      	bcc.n	8008f22 <__mdiff+0xaa>
 8008f16:	3a04      	subs	r2, #4
 8008f18:	6813      	ldr	r3, [r2, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00e      	beq.n	8008f3c <__mdiff+0xc4>
 8008f1e:	6106      	str	r6, [r0, #16]
 8008f20:	e7bc      	b.n	8008e9c <__mdiff+0x24>
 8008f22:	cc04      	ldmia	r4!, {r2}
 8008f24:	b291      	uxth	r1, r2
 8008f26:	4461      	add	r1, ip
 8008f28:	140d      	asrs	r5, r1, #16
 8008f2a:	0c12      	lsrs	r2, r2, #16
 8008f2c:	1952      	adds	r2, r2, r5
 8008f2e:	1415      	asrs	r5, r2, #16
 8008f30:	b289      	uxth	r1, r1
 8008f32:	0412      	lsls	r2, r2, #16
 8008f34:	430a      	orrs	r2, r1
 8008f36:	46ac      	mov	ip, r5
 8008f38:	c304      	stmia	r3!, {r2}
 8008f3a:	e7e8      	b.n	8008f0e <__mdiff+0x96>
 8008f3c:	3e01      	subs	r6, #1
 8008f3e:	e7ea      	b.n	8008f16 <__mdiff+0x9e>

08008f40 <__d2b>:
 8008f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f42:	001d      	movs	r5, r3
 8008f44:	2101      	movs	r1, #1
 8008f46:	0014      	movs	r4, r2
 8008f48:	9f08      	ldr	r7, [sp, #32]
 8008f4a:	f7ff fd67 	bl	8008a1c <_Balloc>
 8008f4e:	032b      	lsls	r3, r5, #12
 8008f50:	006d      	lsls	r5, r5, #1
 8008f52:	0006      	movs	r6, r0
 8008f54:	0b1b      	lsrs	r3, r3, #12
 8008f56:	0d6d      	lsrs	r5, r5, #21
 8008f58:	d124      	bne.n	8008fa4 <__d2b+0x64>
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	2c00      	cmp	r4, #0
 8008f5e:	d027      	beq.n	8008fb0 <__d2b+0x70>
 8008f60:	4668      	mov	r0, sp
 8008f62:	9400      	str	r4, [sp, #0]
 8008f64:	f7ff fe03 	bl	8008b6e <__lo0bits>
 8008f68:	9c00      	ldr	r4, [sp, #0]
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d01e      	beq.n	8008fac <__d2b+0x6c>
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	2120      	movs	r1, #32
 8008f72:	001a      	movs	r2, r3
 8008f74:	1a09      	subs	r1, r1, r0
 8008f76:	408a      	lsls	r2, r1
 8008f78:	40c3      	lsrs	r3, r0
 8008f7a:	4322      	orrs	r2, r4
 8008f7c:	6172      	str	r2, [r6, #20]
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	9c01      	ldr	r4, [sp, #4]
 8008f82:	61b4      	str	r4, [r6, #24]
 8008f84:	1e63      	subs	r3, r4, #1
 8008f86:	419c      	sbcs	r4, r3
 8008f88:	3401      	adds	r4, #1
 8008f8a:	6134      	str	r4, [r6, #16]
 8008f8c:	2d00      	cmp	r5, #0
 8008f8e:	d018      	beq.n	8008fc2 <__d2b+0x82>
 8008f90:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <__d2b+0x9c>)
 8008f92:	18ed      	adds	r5, r5, r3
 8008f94:	2335      	movs	r3, #53	; 0x35
 8008f96:	182d      	adds	r5, r5, r0
 8008f98:	603d      	str	r5, [r7, #0]
 8008f9a:	1a18      	subs	r0, r3, r0
 8008f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9e:	6018      	str	r0, [r3, #0]
 8008fa0:	0030      	movs	r0, r6
 8008fa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008fa4:	2280      	movs	r2, #128	; 0x80
 8008fa6:	0352      	lsls	r2, r2, #13
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	e7d6      	b.n	8008f5a <__d2b+0x1a>
 8008fac:	6174      	str	r4, [r6, #20]
 8008fae:	e7e7      	b.n	8008f80 <__d2b+0x40>
 8008fb0:	a801      	add	r0, sp, #4
 8008fb2:	f7ff fddc 	bl	8008b6e <__lo0bits>
 8008fb6:	2401      	movs	r4, #1
 8008fb8:	9b01      	ldr	r3, [sp, #4]
 8008fba:	6134      	str	r4, [r6, #16]
 8008fbc:	6173      	str	r3, [r6, #20]
 8008fbe:	3020      	adds	r0, #32
 8008fc0:	e7e4      	b.n	8008f8c <__d2b+0x4c>
 8008fc2:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <__d2b+0xa0>)
 8008fc4:	18c0      	adds	r0, r0, r3
 8008fc6:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <__d2b+0xa4>)
 8008fc8:	6038      	str	r0, [r7, #0]
 8008fca:	18e3      	adds	r3, r4, r3
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	18f3      	adds	r3, r6, r3
 8008fd0:	6958      	ldr	r0, [r3, #20]
 8008fd2:	f7ff fdb2 	bl	8008b3a <__hi0bits>
 8008fd6:	0164      	lsls	r4, r4, #5
 8008fd8:	1a20      	subs	r0, r4, r0
 8008fda:	e7df      	b.n	8008f9c <__d2b+0x5c>
 8008fdc:	fffffbcd 	.word	0xfffffbcd
 8008fe0:	fffffbce 	.word	0xfffffbce
 8008fe4:	3fffffff 	.word	0x3fffffff

08008fe8 <_calloc_r>:
 8008fe8:	434a      	muls	r2, r1
 8008fea:	b570      	push	{r4, r5, r6, lr}
 8008fec:	0011      	movs	r1, r2
 8008fee:	0014      	movs	r4, r2
 8008ff0:	f000 f852 	bl	8009098 <_malloc_r>
 8008ff4:	1e05      	subs	r5, r0, #0
 8008ff6:	d003      	beq.n	8009000 <_calloc_r+0x18>
 8008ff8:	0022      	movs	r2, r4
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f7fd fed0 	bl	8006da0 <memset>
 8009000:	0028      	movs	r0, r5
 8009002:	bd70      	pop	{r4, r5, r6, pc}

08009004 <_free_r>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	0005      	movs	r5, r0
 8009008:	2900      	cmp	r1, #0
 800900a:	d010      	beq.n	800902e <_free_r+0x2a>
 800900c:	1f0c      	subs	r4, r1, #4
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	da00      	bge.n	8009016 <_free_r+0x12>
 8009014:	18e4      	adds	r4, r4, r3
 8009016:	0028      	movs	r0, r5
 8009018:	f000 faa8 	bl	800956c <__malloc_lock>
 800901c:	4a1d      	ldr	r2, [pc, #116]	; (8009094 <_free_r+0x90>)
 800901e:	6813      	ldr	r3, [r2, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d105      	bne.n	8009030 <_free_r+0x2c>
 8009024:	6063      	str	r3, [r4, #4]
 8009026:	6014      	str	r4, [r2, #0]
 8009028:	0028      	movs	r0, r5
 800902a:	f000 faa0 	bl	800956e <__malloc_unlock>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	42a3      	cmp	r3, r4
 8009032:	d909      	bls.n	8009048 <_free_r+0x44>
 8009034:	6821      	ldr	r1, [r4, #0]
 8009036:	1860      	adds	r0, r4, r1
 8009038:	4283      	cmp	r3, r0
 800903a:	d1f3      	bne.n	8009024 <_free_r+0x20>
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	1841      	adds	r1, r0, r1
 8009042:	6021      	str	r1, [r4, #0]
 8009044:	e7ee      	b.n	8009024 <_free_r+0x20>
 8009046:	0013      	movs	r3, r2
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	2a00      	cmp	r2, #0
 800904c:	d001      	beq.n	8009052 <_free_r+0x4e>
 800904e:	42a2      	cmp	r2, r4
 8009050:	d9f9      	bls.n	8009046 <_free_r+0x42>
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	1858      	adds	r0, r3, r1
 8009056:	42a0      	cmp	r0, r4
 8009058:	d10b      	bne.n	8009072 <_free_r+0x6e>
 800905a:	6820      	ldr	r0, [r4, #0]
 800905c:	1809      	adds	r1, r1, r0
 800905e:	1858      	adds	r0, r3, r1
 8009060:	6019      	str	r1, [r3, #0]
 8009062:	4282      	cmp	r2, r0
 8009064:	d1e0      	bne.n	8009028 <_free_r+0x24>
 8009066:	6810      	ldr	r0, [r2, #0]
 8009068:	6852      	ldr	r2, [r2, #4]
 800906a:	1841      	adds	r1, r0, r1
 800906c:	6019      	str	r1, [r3, #0]
 800906e:	605a      	str	r2, [r3, #4]
 8009070:	e7da      	b.n	8009028 <_free_r+0x24>
 8009072:	42a0      	cmp	r0, r4
 8009074:	d902      	bls.n	800907c <_free_r+0x78>
 8009076:	230c      	movs	r3, #12
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	e7d5      	b.n	8009028 <_free_r+0x24>
 800907c:	6821      	ldr	r1, [r4, #0]
 800907e:	1860      	adds	r0, r4, r1
 8009080:	4282      	cmp	r2, r0
 8009082:	d103      	bne.n	800908c <_free_r+0x88>
 8009084:	6810      	ldr	r0, [r2, #0]
 8009086:	6852      	ldr	r2, [r2, #4]
 8009088:	1841      	adds	r1, r0, r1
 800908a:	6021      	str	r1, [r4, #0]
 800908c:	6062      	str	r2, [r4, #4]
 800908e:	605c      	str	r4, [r3, #4]
 8009090:	e7ca      	b.n	8009028 <_free_r+0x24>
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	20000268 	.word	0x20000268

08009098 <_malloc_r>:
 8009098:	2303      	movs	r3, #3
 800909a:	b570      	push	{r4, r5, r6, lr}
 800909c:	1ccd      	adds	r5, r1, #3
 800909e:	439d      	bics	r5, r3
 80090a0:	3508      	adds	r5, #8
 80090a2:	0006      	movs	r6, r0
 80090a4:	2d0c      	cmp	r5, #12
 80090a6:	d21e      	bcs.n	80090e6 <_malloc_r+0x4e>
 80090a8:	250c      	movs	r5, #12
 80090aa:	42a9      	cmp	r1, r5
 80090ac:	d81d      	bhi.n	80090ea <_malloc_r+0x52>
 80090ae:	0030      	movs	r0, r6
 80090b0:	f000 fa5c 	bl	800956c <__malloc_lock>
 80090b4:	4a25      	ldr	r2, [pc, #148]	; (800914c <_malloc_r+0xb4>)
 80090b6:	6814      	ldr	r4, [r2, #0]
 80090b8:	0021      	movs	r1, r4
 80090ba:	2900      	cmp	r1, #0
 80090bc:	d119      	bne.n	80090f2 <_malloc_r+0x5a>
 80090be:	4c24      	ldr	r4, [pc, #144]	; (8009150 <_malloc_r+0xb8>)
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d103      	bne.n	80090ce <_malloc_r+0x36>
 80090c6:	0030      	movs	r0, r6
 80090c8:	f000 f982 	bl	80093d0 <_sbrk_r>
 80090cc:	6020      	str	r0, [r4, #0]
 80090ce:	0029      	movs	r1, r5
 80090d0:	0030      	movs	r0, r6
 80090d2:	f000 f97d 	bl	80093d0 <_sbrk_r>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	d12b      	bne.n	8009132 <_malloc_r+0x9a>
 80090da:	230c      	movs	r3, #12
 80090dc:	0030      	movs	r0, r6
 80090de:	6033      	str	r3, [r6, #0]
 80090e0:	f000 fa45 	bl	800956e <__malloc_unlock>
 80090e4:	e003      	b.n	80090ee <_malloc_r+0x56>
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	dadf      	bge.n	80090aa <_malloc_r+0x12>
 80090ea:	230c      	movs	r3, #12
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	2000      	movs	r0, #0
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	680b      	ldr	r3, [r1, #0]
 80090f4:	1b5b      	subs	r3, r3, r5
 80090f6:	d419      	bmi.n	800912c <_malloc_r+0x94>
 80090f8:	2b0b      	cmp	r3, #11
 80090fa:	d903      	bls.n	8009104 <_malloc_r+0x6c>
 80090fc:	600b      	str	r3, [r1, #0]
 80090fe:	18cc      	adds	r4, r1, r3
 8009100:	6025      	str	r5, [r4, #0]
 8009102:	e003      	b.n	800910c <_malloc_r+0x74>
 8009104:	684b      	ldr	r3, [r1, #4]
 8009106:	428c      	cmp	r4, r1
 8009108:	d10d      	bne.n	8009126 <_malloc_r+0x8e>
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	0030      	movs	r0, r6
 800910e:	f000 fa2e 	bl	800956e <__malloc_unlock>
 8009112:	0020      	movs	r0, r4
 8009114:	2207      	movs	r2, #7
 8009116:	300b      	adds	r0, #11
 8009118:	1d23      	adds	r3, r4, #4
 800911a:	4390      	bics	r0, r2
 800911c:	1ac3      	subs	r3, r0, r3
 800911e:	d0e7      	beq.n	80090f0 <_malloc_r+0x58>
 8009120:	425a      	negs	r2, r3
 8009122:	50e2      	str	r2, [r4, r3]
 8009124:	e7e4      	b.n	80090f0 <_malloc_r+0x58>
 8009126:	6063      	str	r3, [r4, #4]
 8009128:	000c      	movs	r4, r1
 800912a:	e7ef      	b.n	800910c <_malloc_r+0x74>
 800912c:	000c      	movs	r4, r1
 800912e:	6849      	ldr	r1, [r1, #4]
 8009130:	e7c3      	b.n	80090ba <_malloc_r+0x22>
 8009132:	2303      	movs	r3, #3
 8009134:	1cc4      	adds	r4, r0, #3
 8009136:	439c      	bics	r4, r3
 8009138:	42a0      	cmp	r0, r4
 800913a:	d0e1      	beq.n	8009100 <_malloc_r+0x68>
 800913c:	1a21      	subs	r1, r4, r0
 800913e:	0030      	movs	r0, r6
 8009140:	f000 f946 	bl	80093d0 <_sbrk_r>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d1db      	bne.n	8009100 <_malloc_r+0x68>
 8009148:	e7c7      	b.n	80090da <_malloc_r+0x42>
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	20000268 	.word	0x20000268
 8009150:	2000026c 	.word	0x2000026c

08009154 <__sfputc_r>:
 8009154:	6893      	ldr	r3, [r2, #8]
 8009156:	b510      	push	{r4, lr}
 8009158:	3b01      	subs	r3, #1
 800915a:	6093      	str	r3, [r2, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	da04      	bge.n	800916a <__sfputc_r+0x16>
 8009160:	6994      	ldr	r4, [r2, #24]
 8009162:	42a3      	cmp	r3, r4
 8009164:	db07      	blt.n	8009176 <__sfputc_r+0x22>
 8009166:	290a      	cmp	r1, #10
 8009168:	d005      	beq.n	8009176 <__sfputc_r+0x22>
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	1c58      	adds	r0, r3, #1
 800916e:	6010      	str	r0, [r2, #0]
 8009170:	7019      	strb	r1, [r3, #0]
 8009172:	0008      	movs	r0, r1
 8009174:	bd10      	pop	{r4, pc}
 8009176:	f7fe fafd 	bl	8007774 <__swbuf_r>
 800917a:	0001      	movs	r1, r0
 800917c:	e7f9      	b.n	8009172 <__sfputc_r+0x1e>

0800917e <__sfputs_r>:
 800917e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009180:	0006      	movs	r6, r0
 8009182:	000f      	movs	r7, r1
 8009184:	0014      	movs	r4, r2
 8009186:	18d5      	adds	r5, r2, r3
 8009188:	42ac      	cmp	r4, r5
 800918a:	d101      	bne.n	8009190 <__sfputs_r+0x12>
 800918c:	2000      	movs	r0, #0
 800918e:	e007      	b.n	80091a0 <__sfputs_r+0x22>
 8009190:	7821      	ldrb	r1, [r4, #0]
 8009192:	003a      	movs	r2, r7
 8009194:	0030      	movs	r0, r6
 8009196:	f7ff ffdd 	bl	8009154 <__sfputc_r>
 800919a:	3401      	adds	r4, #1
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d1f3      	bne.n	8009188 <__sfputs_r+0xa>
 80091a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091a4 <_vfiprintf_r>:
 80091a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a6:	b0a1      	sub	sp, #132	; 0x84
 80091a8:	9003      	str	r0, [sp, #12]
 80091aa:	000f      	movs	r7, r1
 80091ac:	0016      	movs	r6, r2
 80091ae:	001d      	movs	r5, r3
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d005      	beq.n	80091c0 <_vfiprintf_r+0x1c>
 80091b4:	6983      	ldr	r3, [r0, #24]
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <_vfiprintf_r+0x1c>
 80091bc:	f7ff fb04 	bl	80087c8 <__sinit>
 80091c0:	4b7b      	ldr	r3, [pc, #492]	; (80093b0 <_vfiprintf_r+0x20c>)
 80091c2:	429f      	cmp	r7, r3
 80091c4:	d15c      	bne.n	8009280 <_vfiprintf_r+0xdc>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	685f      	ldr	r7, [r3, #4]
 80091ca:	89bb      	ldrh	r3, [r7, #12]
 80091cc:	071b      	lsls	r3, r3, #28
 80091ce:	d563      	bpl.n	8009298 <_vfiprintf_r+0xf4>
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d060      	beq.n	8009298 <_vfiprintf_r+0xf4>
 80091d6:	2300      	movs	r3, #0
 80091d8:	ac08      	add	r4, sp, #32
 80091da:	6163      	str	r3, [r4, #20]
 80091dc:	3320      	adds	r3, #32
 80091de:	7663      	strb	r3, [r4, #25]
 80091e0:	3310      	adds	r3, #16
 80091e2:	76a3      	strb	r3, [r4, #26]
 80091e4:	9507      	str	r5, [sp, #28]
 80091e6:	0035      	movs	r5, r6
 80091e8:	782b      	ldrb	r3, [r5, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <_vfiprintf_r+0x4e>
 80091ee:	2b25      	cmp	r3, #37	; 0x25
 80091f0:	d15c      	bne.n	80092ac <_vfiprintf_r+0x108>
 80091f2:	1bab      	subs	r3, r5, r6
 80091f4:	9305      	str	r3, [sp, #20]
 80091f6:	d00c      	beq.n	8009212 <_vfiprintf_r+0x6e>
 80091f8:	0032      	movs	r2, r6
 80091fa:	0039      	movs	r1, r7
 80091fc:	9803      	ldr	r0, [sp, #12]
 80091fe:	f7ff ffbe 	bl	800917e <__sfputs_r>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	d100      	bne.n	8009208 <_vfiprintf_r+0x64>
 8009206:	e0c4      	b.n	8009392 <_vfiprintf_r+0x1ee>
 8009208:	6962      	ldr	r2, [r4, #20]
 800920a:	9b05      	ldr	r3, [sp, #20]
 800920c:	4694      	mov	ip, r2
 800920e:	4463      	add	r3, ip
 8009210:	6163      	str	r3, [r4, #20]
 8009212:	782b      	ldrb	r3, [r5, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d100      	bne.n	800921a <_vfiprintf_r+0x76>
 8009218:	e0bb      	b.n	8009392 <_vfiprintf_r+0x1ee>
 800921a:	2201      	movs	r2, #1
 800921c:	2300      	movs	r3, #0
 800921e:	4252      	negs	r2, r2
 8009220:	6062      	str	r2, [r4, #4]
 8009222:	a904      	add	r1, sp, #16
 8009224:	3254      	adds	r2, #84	; 0x54
 8009226:	1852      	adds	r2, r2, r1
 8009228:	1c6e      	adds	r6, r5, #1
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	60e3      	str	r3, [r4, #12]
 800922e:	60a3      	str	r3, [r4, #8]
 8009230:	7013      	strb	r3, [r2, #0]
 8009232:	65a3      	str	r3, [r4, #88]	; 0x58
 8009234:	7831      	ldrb	r1, [r6, #0]
 8009236:	2205      	movs	r2, #5
 8009238:	485e      	ldr	r0, [pc, #376]	; (80093b4 <_vfiprintf_r+0x210>)
 800923a:	f7ff fbdb 	bl	80089f4 <memchr>
 800923e:	1c75      	adds	r5, r6, #1
 8009240:	2800      	cmp	r0, #0
 8009242:	d135      	bne.n	80092b0 <_vfiprintf_r+0x10c>
 8009244:	6822      	ldr	r2, [r4, #0]
 8009246:	06d3      	lsls	r3, r2, #27
 8009248:	d504      	bpl.n	8009254 <_vfiprintf_r+0xb0>
 800924a:	2353      	movs	r3, #83	; 0x53
 800924c:	a904      	add	r1, sp, #16
 800924e:	185b      	adds	r3, r3, r1
 8009250:	2120      	movs	r1, #32
 8009252:	7019      	strb	r1, [r3, #0]
 8009254:	0713      	lsls	r3, r2, #28
 8009256:	d504      	bpl.n	8009262 <_vfiprintf_r+0xbe>
 8009258:	2353      	movs	r3, #83	; 0x53
 800925a:	a904      	add	r1, sp, #16
 800925c:	185b      	adds	r3, r3, r1
 800925e:	212b      	movs	r1, #43	; 0x2b
 8009260:	7019      	strb	r1, [r3, #0]
 8009262:	7833      	ldrb	r3, [r6, #0]
 8009264:	2b2a      	cmp	r3, #42	; 0x2a
 8009266:	d02c      	beq.n	80092c2 <_vfiprintf_r+0x11e>
 8009268:	0035      	movs	r5, r6
 800926a:	2100      	movs	r1, #0
 800926c:	200a      	movs	r0, #10
 800926e:	68e3      	ldr	r3, [r4, #12]
 8009270:	782a      	ldrb	r2, [r5, #0]
 8009272:	1c6e      	adds	r6, r5, #1
 8009274:	3a30      	subs	r2, #48	; 0x30
 8009276:	2a09      	cmp	r2, #9
 8009278:	d964      	bls.n	8009344 <_vfiprintf_r+0x1a0>
 800927a:	2900      	cmp	r1, #0
 800927c:	d02e      	beq.n	80092dc <_vfiprintf_r+0x138>
 800927e:	e026      	b.n	80092ce <_vfiprintf_r+0x12a>
 8009280:	4b4d      	ldr	r3, [pc, #308]	; (80093b8 <_vfiprintf_r+0x214>)
 8009282:	429f      	cmp	r7, r3
 8009284:	d102      	bne.n	800928c <_vfiprintf_r+0xe8>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	689f      	ldr	r7, [r3, #8]
 800928a:	e79e      	b.n	80091ca <_vfiprintf_r+0x26>
 800928c:	4b4b      	ldr	r3, [pc, #300]	; (80093bc <_vfiprintf_r+0x218>)
 800928e:	429f      	cmp	r7, r3
 8009290:	d19b      	bne.n	80091ca <_vfiprintf_r+0x26>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	68df      	ldr	r7, [r3, #12]
 8009296:	e798      	b.n	80091ca <_vfiprintf_r+0x26>
 8009298:	0039      	movs	r1, r7
 800929a:	9803      	ldr	r0, [sp, #12]
 800929c:	f7fe fac0 	bl	8007820 <__swsetup_r>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d098      	beq.n	80091d6 <_vfiprintf_r+0x32>
 80092a4:	2001      	movs	r0, #1
 80092a6:	4240      	negs	r0, r0
 80092a8:	b021      	add	sp, #132	; 0x84
 80092aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ac:	3501      	adds	r5, #1
 80092ae:	e79b      	b.n	80091e8 <_vfiprintf_r+0x44>
 80092b0:	4b40      	ldr	r3, [pc, #256]	; (80093b4 <_vfiprintf_r+0x210>)
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	1ac0      	subs	r0, r0, r3
 80092b6:	2301      	movs	r3, #1
 80092b8:	4083      	lsls	r3, r0
 80092ba:	4313      	orrs	r3, r2
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	002e      	movs	r6, r5
 80092c0:	e7b8      	b.n	8009234 <_vfiprintf_r+0x90>
 80092c2:	9b07      	ldr	r3, [sp, #28]
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9107      	str	r1, [sp, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	db01      	blt.n	80092d2 <_vfiprintf_r+0x12e>
 80092ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80092d0:	e004      	b.n	80092dc <_vfiprintf_r+0x138>
 80092d2:	425b      	negs	r3, r3
 80092d4:	60e3      	str	r3, [r4, #12]
 80092d6:	2302      	movs	r3, #2
 80092d8:	4313      	orrs	r3, r2
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	782b      	ldrb	r3, [r5, #0]
 80092de:	2b2e      	cmp	r3, #46	; 0x2e
 80092e0:	d10a      	bne.n	80092f8 <_vfiprintf_r+0x154>
 80092e2:	786b      	ldrb	r3, [r5, #1]
 80092e4:	2b2a      	cmp	r3, #42	; 0x2a
 80092e6:	d135      	bne.n	8009354 <_vfiprintf_r+0x1b0>
 80092e8:	9b07      	ldr	r3, [sp, #28]
 80092ea:	3502      	adds	r5, #2
 80092ec:	1d1a      	adds	r2, r3, #4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	9207      	str	r2, [sp, #28]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	db2b      	blt.n	800934e <_vfiprintf_r+0x1aa>
 80092f6:	9309      	str	r3, [sp, #36]	; 0x24
 80092f8:	4e31      	ldr	r6, [pc, #196]	; (80093c0 <_vfiprintf_r+0x21c>)
 80092fa:	7829      	ldrb	r1, [r5, #0]
 80092fc:	2203      	movs	r2, #3
 80092fe:	0030      	movs	r0, r6
 8009300:	f7ff fb78 	bl	80089f4 <memchr>
 8009304:	2800      	cmp	r0, #0
 8009306:	d006      	beq.n	8009316 <_vfiprintf_r+0x172>
 8009308:	2340      	movs	r3, #64	; 0x40
 800930a:	1b80      	subs	r0, r0, r6
 800930c:	4083      	lsls	r3, r0
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	3501      	adds	r5, #1
 8009312:	4313      	orrs	r3, r2
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	7829      	ldrb	r1, [r5, #0]
 8009318:	2206      	movs	r2, #6
 800931a:	482a      	ldr	r0, [pc, #168]	; (80093c4 <_vfiprintf_r+0x220>)
 800931c:	1c6e      	adds	r6, r5, #1
 800931e:	7621      	strb	r1, [r4, #24]
 8009320:	f7ff fb68 	bl	80089f4 <memchr>
 8009324:	2800      	cmp	r0, #0
 8009326:	d03a      	beq.n	800939e <_vfiprintf_r+0x1fa>
 8009328:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <_vfiprintf_r+0x224>)
 800932a:	2b00      	cmp	r3, #0
 800932c:	d125      	bne.n	800937a <_vfiprintf_r+0x1d6>
 800932e:	2207      	movs	r2, #7
 8009330:	9b07      	ldr	r3, [sp, #28]
 8009332:	3307      	adds	r3, #7
 8009334:	4393      	bics	r3, r2
 8009336:	3308      	adds	r3, #8
 8009338:	9307      	str	r3, [sp, #28]
 800933a:	6963      	ldr	r3, [r4, #20]
 800933c:	9a04      	ldr	r2, [sp, #16]
 800933e:	189b      	adds	r3, r3, r2
 8009340:	6163      	str	r3, [r4, #20]
 8009342:	e750      	b.n	80091e6 <_vfiprintf_r+0x42>
 8009344:	4343      	muls	r3, r0
 8009346:	2101      	movs	r1, #1
 8009348:	189b      	adds	r3, r3, r2
 800934a:	0035      	movs	r5, r6
 800934c:	e790      	b.n	8009270 <_vfiprintf_r+0xcc>
 800934e:	2301      	movs	r3, #1
 8009350:	425b      	negs	r3, r3
 8009352:	e7d0      	b.n	80092f6 <_vfiprintf_r+0x152>
 8009354:	2300      	movs	r3, #0
 8009356:	200a      	movs	r0, #10
 8009358:	001a      	movs	r2, r3
 800935a:	3501      	adds	r5, #1
 800935c:	6063      	str	r3, [r4, #4]
 800935e:	7829      	ldrb	r1, [r5, #0]
 8009360:	1c6e      	adds	r6, r5, #1
 8009362:	3930      	subs	r1, #48	; 0x30
 8009364:	2909      	cmp	r1, #9
 8009366:	d903      	bls.n	8009370 <_vfiprintf_r+0x1cc>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0c5      	beq.n	80092f8 <_vfiprintf_r+0x154>
 800936c:	9209      	str	r2, [sp, #36]	; 0x24
 800936e:	e7c3      	b.n	80092f8 <_vfiprintf_r+0x154>
 8009370:	4342      	muls	r2, r0
 8009372:	2301      	movs	r3, #1
 8009374:	1852      	adds	r2, r2, r1
 8009376:	0035      	movs	r5, r6
 8009378:	e7f1      	b.n	800935e <_vfiprintf_r+0x1ba>
 800937a:	ab07      	add	r3, sp, #28
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	003a      	movs	r2, r7
 8009380:	4b12      	ldr	r3, [pc, #72]	; (80093cc <_vfiprintf_r+0x228>)
 8009382:	0021      	movs	r1, r4
 8009384:	9803      	ldr	r0, [sp, #12]
 8009386:	f7fd fdaf 	bl	8006ee8 <_printf_float>
 800938a:	9004      	str	r0, [sp, #16]
 800938c:	9b04      	ldr	r3, [sp, #16]
 800938e:	3301      	adds	r3, #1
 8009390:	d1d3      	bne.n	800933a <_vfiprintf_r+0x196>
 8009392:	89bb      	ldrh	r3, [r7, #12]
 8009394:	065b      	lsls	r3, r3, #25
 8009396:	d500      	bpl.n	800939a <_vfiprintf_r+0x1f6>
 8009398:	e784      	b.n	80092a4 <_vfiprintf_r+0x100>
 800939a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800939c:	e784      	b.n	80092a8 <_vfiprintf_r+0x104>
 800939e:	ab07      	add	r3, sp, #28
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	003a      	movs	r2, r7
 80093a4:	4b09      	ldr	r3, [pc, #36]	; (80093cc <_vfiprintf_r+0x228>)
 80093a6:	0021      	movs	r1, r4
 80093a8:	9803      	ldr	r0, [sp, #12]
 80093aa:	f7fe f857 	bl	800745c <_printf_i>
 80093ae:	e7ec      	b.n	800938a <_vfiprintf_r+0x1e6>
 80093b0:	0800a9b4 	.word	0x0800a9b4
 80093b4:	0800aaf4 	.word	0x0800aaf4
 80093b8:	0800a9d4 	.word	0x0800a9d4
 80093bc:	0800a994 	.word	0x0800a994
 80093c0:	0800aafa 	.word	0x0800aafa
 80093c4:	0800aafe 	.word	0x0800aafe
 80093c8:	08006ee9 	.word	0x08006ee9
 80093cc:	0800917f 	.word	0x0800917f

080093d0 <_sbrk_r>:
 80093d0:	2300      	movs	r3, #0
 80093d2:	b570      	push	{r4, r5, r6, lr}
 80093d4:	4c06      	ldr	r4, [pc, #24]	; (80093f0 <_sbrk_r+0x20>)
 80093d6:	0005      	movs	r5, r0
 80093d8:	0008      	movs	r0, r1
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	f7fd fade 	bl	800699c <_sbrk>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d103      	bne.n	80093ec <_sbrk_r+0x1c>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d000      	beq.n	80093ec <_sbrk_r+0x1c>
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	20000418 	.word	0x20000418

080093f4 <__sread>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	000c      	movs	r4, r1
 80093f8:	250e      	movs	r5, #14
 80093fa:	5f49      	ldrsh	r1, [r1, r5]
 80093fc:	f000 f8b8 	bl	8009570 <_read_r>
 8009400:	2800      	cmp	r0, #0
 8009402:	db03      	blt.n	800940c <__sread+0x18>
 8009404:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009406:	181b      	adds	r3, r3, r0
 8009408:	6563      	str	r3, [r4, #84]	; 0x54
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	4a02      	ldr	r2, [pc, #8]	; (8009418 <__sread+0x24>)
 8009410:	4013      	ands	r3, r2
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	e7f9      	b.n	800940a <__sread+0x16>
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	ffffefff 	.word	0xffffefff

0800941c <__swrite>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	001f      	movs	r7, r3
 8009420:	898b      	ldrh	r3, [r1, #12]
 8009422:	0005      	movs	r5, r0
 8009424:	000c      	movs	r4, r1
 8009426:	0016      	movs	r6, r2
 8009428:	05db      	lsls	r3, r3, #23
 800942a:	d505      	bpl.n	8009438 <__swrite+0x1c>
 800942c:	230e      	movs	r3, #14
 800942e:	5ec9      	ldrsh	r1, [r1, r3]
 8009430:	2200      	movs	r2, #0
 8009432:	2302      	movs	r3, #2
 8009434:	f000 f874 	bl	8009520 <_lseek_r>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	4a05      	ldr	r2, [pc, #20]	; (8009450 <__swrite+0x34>)
 800943c:	0028      	movs	r0, r5
 800943e:	4013      	ands	r3, r2
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	0032      	movs	r2, r6
 8009444:	230e      	movs	r3, #14
 8009446:	5ee1      	ldrsh	r1, [r4, r3]
 8009448:	003b      	movs	r3, r7
 800944a:	f000 f81f 	bl	800948c <_write_r>
 800944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009450:	ffffefff 	.word	0xffffefff

08009454 <__sseek>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	000c      	movs	r4, r1
 8009458:	250e      	movs	r5, #14
 800945a:	5f49      	ldrsh	r1, [r1, r5]
 800945c:	f000 f860 	bl	8009520 <_lseek_r>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	1c42      	adds	r2, r0, #1
 8009464:	d103      	bne.n	800946e <__sseek+0x1a>
 8009466:	4a05      	ldr	r2, [pc, #20]	; (800947c <__sseek+0x28>)
 8009468:	4013      	ands	r3, r2
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	2280      	movs	r2, #128	; 0x80
 8009470:	0152      	lsls	r2, r2, #5
 8009472:	4313      	orrs	r3, r2
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	6560      	str	r0, [r4, #84]	; 0x54
 8009478:	e7f8      	b.n	800946c <__sseek+0x18>
 800947a:	46c0      	nop			; (mov r8, r8)
 800947c:	ffffefff 	.word	0xffffefff

08009480 <__sclose>:
 8009480:	b510      	push	{r4, lr}
 8009482:	230e      	movs	r3, #14
 8009484:	5ec9      	ldrsh	r1, [r1, r3]
 8009486:	f000 f815 	bl	80094b4 <_close_r>
 800948a:	bd10      	pop	{r4, pc}

0800948c <_write_r>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	0005      	movs	r5, r0
 8009490:	0008      	movs	r0, r1
 8009492:	0011      	movs	r1, r2
 8009494:	2200      	movs	r2, #0
 8009496:	4c06      	ldr	r4, [pc, #24]	; (80094b0 <_write_r+0x24>)
 8009498:	6022      	str	r2, [r4, #0]
 800949a:	001a      	movs	r2, r3
 800949c:	f7fd fa36 	bl	800690c <_write>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d103      	bne.n	80094ac <_write_r+0x20>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d000      	beq.n	80094ac <_write_r+0x20>
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	20000418 	.word	0x20000418

080094b4 <_close_r>:
 80094b4:	2300      	movs	r3, #0
 80094b6:	b570      	push	{r4, r5, r6, lr}
 80094b8:	4c06      	ldr	r4, [pc, #24]	; (80094d4 <_close_r+0x20>)
 80094ba:	0005      	movs	r5, r0
 80094bc:	0008      	movs	r0, r1
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	f7fd fa40 	bl	8006944 <_close>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d103      	bne.n	80094d0 <_close_r+0x1c>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d000      	beq.n	80094d0 <_close_r+0x1c>
 80094ce:	602b      	str	r3, [r5, #0]
 80094d0:	bd70      	pop	{r4, r5, r6, pc}
 80094d2:	46c0      	nop			; (mov r8, r8)
 80094d4:	20000418 	.word	0x20000418

080094d8 <_fstat_r>:
 80094d8:	2300      	movs	r3, #0
 80094da:	b570      	push	{r4, r5, r6, lr}
 80094dc:	4c06      	ldr	r4, [pc, #24]	; (80094f8 <_fstat_r+0x20>)
 80094de:	0005      	movs	r5, r0
 80094e0:	0008      	movs	r0, r1
 80094e2:	0011      	movs	r1, r2
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	f7fd fa37 	bl	8006958 <_fstat>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	d103      	bne.n	80094f6 <_fstat_r+0x1e>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d000      	beq.n	80094f6 <_fstat_r+0x1e>
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	20000418 	.word	0x20000418

080094fc <_isatty_r>:
 80094fc:	2300      	movs	r3, #0
 80094fe:	b570      	push	{r4, r5, r6, lr}
 8009500:	4c06      	ldr	r4, [pc, #24]	; (800951c <_isatty_r+0x20>)
 8009502:	0005      	movs	r5, r0
 8009504:	0008      	movs	r0, r1
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	f7fd fa34 	bl	8006974 <_isatty>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d103      	bne.n	8009518 <_isatty_r+0x1c>
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d000      	beq.n	8009518 <_isatty_r+0x1c>
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	bd70      	pop	{r4, r5, r6, pc}
 800951a:	46c0      	nop			; (mov r8, r8)
 800951c:	20000418 	.word	0x20000418

08009520 <_lseek_r>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	0005      	movs	r5, r0
 8009524:	0008      	movs	r0, r1
 8009526:	0011      	movs	r1, r2
 8009528:	2200      	movs	r2, #0
 800952a:	4c06      	ldr	r4, [pc, #24]	; (8009544 <_lseek_r+0x24>)
 800952c:	6022      	str	r2, [r4, #0]
 800952e:	001a      	movs	r2, r3
 8009530:	f7fd fa29 	bl	8006986 <_lseek>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d103      	bne.n	8009540 <_lseek_r+0x20>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d000      	beq.n	8009540 <_lseek_r+0x20>
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	bd70      	pop	{r4, r5, r6, pc}
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	20000418 	.word	0x20000418

08009548 <__ascii_mbtowc>:
 8009548:	b082      	sub	sp, #8
 800954a:	2900      	cmp	r1, #0
 800954c:	d100      	bne.n	8009550 <__ascii_mbtowc+0x8>
 800954e:	a901      	add	r1, sp, #4
 8009550:	1e10      	subs	r0, r2, #0
 8009552:	d006      	beq.n	8009562 <__ascii_mbtowc+0x1a>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d006      	beq.n	8009566 <__ascii_mbtowc+0x1e>
 8009558:	7813      	ldrb	r3, [r2, #0]
 800955a:	600b      	str	r3, [r1, #0]
 800955c:	7810      	ldrb	r0, [r2, #0]
 800955e:	1e43      	subs	r3, r0, #1
 8009560:	4198      	sbcs	r0, r3
 8009562:	b002      	add	sp, #8
 8009564:	4770      	bx	lr
 8009566:	2002      	movs	r0, #2
 8009568:	4240      	negs	r0, r0
 800956a:	e7fa      	b.n	8009562 <__ascii_mbtowc+0x1a>

0800956c <__malloc_lock>:
 800956c:	4770      	bx	lr

0800956e <__malloc_unlock>:
 800956e:	4770      	bx	lr

08009570 <_read_r>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	0005      	movs	r5, r0
 8009574:	0008      	movs	r0, r1
 8009576:	0011      	movs	r1, r2
 8009578:	2200      	movs	r2, #0
 800957a:	4c06      	ldr	r4, [pc, #24]	; (8009594 <_read_r+0x24>)
 800957c:	6022      	str	r2, [r4, #0]
 800957e:	001a      	movs	r2, r3
 8009580:	f7fd f9a7 	bl	80068d2 <_read>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d103      	bne.n	8009590 <_read_r+0x20>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d000      	beq.n	8009590 <_read_r+0x20>
 800958e:	602b      	str	r3, [r5, #0]
 8009590:	bd70      	pop	{r4, r5, r6, pc}
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	20000418 	.word	0x20000418

08009598 <__ascii_wctomb>:
 8009598:	1e0b      	subs	r3, r1, #0
 800959a:	d004      	beq.n	80095a6 <__ascii_wctomb+0xe>
 800959c:	2aff      	cmp	r2, #255	; 0xff
 800959e:	d904      	bls.n	80095aa <__ascii_wctomb+0x12>
 80095a0:	238a      	movs	r3, #138	; 0x8a
 80095a2:	6003      	str	r3, [r0, #0]
 80095a4:	3b8b      	subs	r3, #139	; 0x8b
 80095a6:	0018      	movs	r0, r3
 80095a8:	4770      	bx	lr
 80095aa:	700a      	strb	r2, [r1, #0]
 80095ac:	2301      	movs	r3, #1
 80095ae:	e7fa      	b.n	80095a6 <__ascii_wctomb+0xe>

080095b0 <pow>:
 80095b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b2:	2400      	movs	r4, #0
 80095b4:	b091      	sub	sp, #68	; 0x44
 80095b6:	001f      	movs	r7, r3
 80095b8:	9000      	str	r0, [sp, #0]
 80095ba:	9101      	str	r1, [sp, #4]
 80095bc:	0016      	movs	r6, r2
 80095be:	f000 f98d 	bl	80098dc <__ieee754_pow>
 80095c2:	4bbe      	ldr	r3, [pc, #760]	; (80098bc <pow+0x30c>)
 80095c4:	9002      	str	r0, [sp, #8]
 80095c6:	9103      	str	r1, [sp, #12]
 80095c8:	571c      	ldrsb	r4, [r3, r4]
 80095ca:	1c63      	adds	r3, r4, #1
 80095cc:	d100      	bne.n	80095d0 <pow+0x20>
 80095ce:	e0d4      	b.n	800977a <pow+0x1ca>
 80095d0:	0032      	movs	r2, r6
 80095d2:	003b      	movs	r3, r7
 80095d4:	0030      	movs	r0, r6
 80095d6:	0039      	movs	r1, r7
 80095d8:	f7f8 fd3c 	bl	8002054 <__aeabi_dcmpun>
 80095dc:	1e05      	subs	r5, r0, #0
 80095de:	d000      	beq.n	80095e2 <pow+0x32>
 80095e0:	e0cb      	b.n	800977a <pow+0x1ca>
 80095e2:	9a00      	ldr	r2, [sp, #0]
 80095e4:	9b01      	ldr	r3, [sp, #4]
 80095e6:	0010      	movs	r0, r2
 80095e8:	0019      	movs	r1, r3
 80095ea:	f7f8 fd33 	bl	8002054 <__aeabi_dcmpun>
 80095ee:	2200      	movs	r2, #0
 80095f0:	9005      	str	r0, [sp, #20]
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d01e      	beq.n	8009634 <pow+0x84>
 80095f6:	2300      	movs	r3, #0
 80095f8:	0030      	movs	r0, r6
 80095fa:	0039      	movs	r1, r7
 80095fc:	f7f6 ff1c 	bl	8000438 <__aeabi_dcmpeq>
 8009600:	2800      	cmp	r0, #0
 8009602:	d100      	bne.n	8009606 <pow+0x56>
 8009604:	e0b9      	b.n	800977a <pow+0x1ca>
 8009606:	2301      	movs	r3, #1
 8009608:	9306      	str	r3, [sp, #24]
 800960a:	4bad      	ldr	r3, [pc, #692]	; (80098c0 <pow+0x310>)
 800960c:	950e      	str	r5, [sp, #56]	; 0x38
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	9a00      	ldr	r2, [sp, #0]
 8009612:	9b01      	ldr	r3, [sp, #4]
 8009614:	9208      	str	r2, [sp, #32]
 8009616:	9309      	str	r3, [sp, #36]	; 0x24
 8009618:	2200      	movs	r2, #0
 800961a:	4baa      	ldr	r3, [pc, #680]	; (80098c4 <pow+0x314>)
 800961c:	960a      	str	r6, [sp, #40]	; 0x28
 800961e:	970b      	str	r7, [sp, #44]	; 0x2c
 8009620:	920c      	str	r2, [sp, #48]	; 0x30
 8009622:	930d      	str	r3, [sp, #52]	; 0x34
 8009624:	2c02      	cmp	r4, #2
 8009626:	d033      	beq.n	8009690 <pow+0xe0>
 8009628:	a806      	add	r0, sp, #24
 800962a:	f000 ff0b 	bl	800a444 <matherr>
 800962e:	2800      	cmp	r0, #0
 8009630:	d125      	bne.n	800967e <pow+0xce>
 8009632:	e059      	b.n	80096e8 <pow+0x138>
 8009634:	2300      	movs	r3, #0
 8009636:	9800      	ldr	r0, [sp, #0]
 8009638:	9901      	ldr	r1, [sp, #4]
 800963a:	f7f6 fefd 	bl	8000438 <__aeabi_dcmpeq>
 800963e:	2800      	cmp	r0, #0
 8009640:	d057      	beq.n	80096f2 <pow+0x142>
 8009642:	2200      	movs	r2, #0
 8009644:	2300      	movs	r3, #0
 8009646:	0030      	movs	r0, r6
 8009648:	0039      	movs	r1, r7
 800964a:	f7f6 fef5 	bl	8000438 <__aeabi_dcmpeq>
 800964e:	1e05      	subs	r5, r0, #0
 8009650:	d021      	beq.n	8009696 <pow+0xe6>
 8009652:	2301      	movs	r3, #1
 8009654:	9306      	str	r3, [sp, #24]
 8009656:	4b9a      	ldr	r3, [pc, #616]	; (80098c0 <pow+0x310>)
 8009658:	960a      	str	r6, [sp, #40]	; 0x28
 800965a:	970b      	str	r7, [sp, #44]	; 0x2c
 800965c:	9307      	str	r3, [sp, #28]
 800965e:	9b05      	ldr	r3, [sp, #20]
 8009660:	930e      	str	r3, [sp, #56]	; 0x38
 8009662:	9a00      	ldr	r2, [sp, #0]
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	9208      	str	r2, [sp, #32]
 8009668:	9309      	str	r3, [sp, #36]	; 0x24
 800966a:	2200      	movs	r2, #0
 800966c:	2300      	movs	r3, #0
 800966e:	920c      	str	r2, [sp, #48]	; 0x30
 8009670:	930d      	str	r3, [sp, #52]	; 0x34
 8009672:	2c00      	cmp	r4, #0
 8009674:	d0d8      	beq.n	8009628 <pow+0x78>
 8009676:	2200      	movs	r2, #0
 8009678:	4b92      	ldr	r3, [pc, #584]	; (80098c4 <pow+0x314>)
 800967a:	920c      	str	r2, [sp, #48]	; 0x30
 800967c:	930d      	str	r3, [sp, #52]	; 0x34
 800967e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <pow+0xe0>
 8009686:	f7fd fb61 	bl	8006d4c <__errno>
 800968a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	6003      	str	r3, [r0, #0]
 8009690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009692:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009694:	e06f      	b.n	8009776 <pow+0x1c6>
 8009696:	0030      	movs	r0, r6
 8009698:	0039      	movs	r1, r7
 800969a:	f000 fecb 	bl	800a434 <finite>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d06b      	beq.n	800977a <pow+0x1ca>
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	0030      	movs	r0, r6
 80096a8:	0039      	movs	r1, r7
 80096aa:	f7f6 fecb 	bl	8000444 <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d063      	beq.n	800977a <pow+0x1ca>
 80096b2:	2301      	movs	r3, #1
 80096b4:	9306      	str	r3, [sp, #24]
 80096b6:	4b82      	ldr	r3, [pc, #520]	; (80098c0 <pow+0x310>)
 80096b8:	950e      	str	r5, [sp, #56]	; 0x38
 80096ba:	9307      	str	r3, [sp, #28]
 80096bc:	9b00      	ldr	r3, [sp, #0]
 80096be:	9c01      	ldr	r4, [sp, #4]
 80096c0:	9308      	str	r3, [sp, #32]
 80096c2:	9409      	str	r4, [sp, #36]	; 0x24
 80096c4:	4b7d      	ldr	r3, [pc, #500]	; (80098bc <pow+0x30c>)
 80096c6:	960a      	str	r6, [sp, #40]	; 0x28
 80096c8:	970b      	str	r7, [sp, #44]	; 0x2c
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	b25b      	sxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d104      	bne.n	80096dc <pow+0x12c>
 80096d2:	2300      	movs	r3, #0
 80096d4:	2400      	movs	r4, #0
 80096d6:	930c      	str	r3, [sp, #48]	; 0x30
 80096d8:	940d      	str	r4, [sp, #52]	; 0x34
 80096da:	e7a5      	b.n	8009628 <pow+0x78>
 80096dc:	2000      	movs	r0, #0
 80096de:	497a      	ldr	r1, [pc, #488]	; (80098c8 <pow+0x318>)
 80096e0:	900c      	str	r0, [sp, #48]	; 0x30
 80096e2:	910d      	str	r1, [sp, #52]	; 0x34
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d19f      	bne.n	8009628 <pow+0x78>
 80096e8:	f7fd fb30 	bl	8006d4c <__errno>
 80096ec:	2321      	movs	r3, #33	; 0x21
 80096ee:	6003      	str	r3, [r0, #0]
 80096f0:	e7c5      	b.n	800967e <pow+0xce>
 80096f2:	9802      	ldr	r0, [sp, #8]
 80096f4:	9903      	ldr	r1, [sp, #12]
 80096f6:	f000 fe9d 	bl	800a434 <finite>
 80096fa:	9005      	str	r0, [sp, #20]
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d000      	beq.n	8009702 <pow+0x152>
 8009700:	e0a5      	b.n	800984e <pow+0x29e>
 8009702:	9800      	ldr	r0, [sp, #0]
 8009704:	9901      	ldr	r1, [sp, #4]
 8009706:	f000 fe95 	bl	800a434 <finite>
 800970a:	2800      	cmp	r0, #0
 800970c:	d100      	bne.n	8009710 <pow+0x160>
 800970e:	e09e      	b.n	800984e <pow+0x29e>
 8009710:	0030      	movs	r0, r6
 8009712:	0039      	movs	r1, r7
 8009714:	f000 fe8e 	bl	800a434 <finite>
 8009718:	2800      	cmp	r0, #0
 800971a:	d100      	bne.n	800971e <pow+0x16e>
 800971c:	e097      	b.n	800984e <pow+0x29e>
 800971e:	2500      	movs	r5, #0
 8009720:	4b66      	ldr	r3, [pc, #408]	; (80098bc <pow+0x30c>)
 8009722:	ac06      	add	r4, sp, #24
 8009724:	575d      	ldrsb	r5, [r3, r5]
 8009726:	9a02      	ldr	r2, [sp, #8]
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	0019      	movs	r1, r3
 800972c:	0010      	movs	r0, r2
 800972e:	f7f8 fc91 	bl	8002054 <__aeabi_dcmpun>
 8009732:	4b63      	ldr	r3, [pc, #396]	; (80098c0 <pow+0x310>)
 8009734:	2800      	cmp	r0, #0
 8009736:	d031      	beq.n	800979c <pow+0x1ec>
 8009738:	2201      	movs	r2, #1
 800973a:	6063      	str	r3, [r4, #4]
 800973c:	9b05      	ldr	r3, [sp, #20]
 800973e:	9206      	str	r2, [sp, #24]
 8009740:	6223      	str	r3, [r4, #32]
 8009742:	6126      	str	r6, [r4, #16]
 8009744:	6167      	str	r7, [r4, #20]
 8009746:	9a00      	ldr	r2, [sp, #0]
 8009748:	9b01      	ldr	r3, [sp, #4]
 800974a:	60a2      	str	r2, [r4, #8]
 800974c:	60e3      	str	r3, [r4, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	2300      	movs	r3, #0
 8009752:	2d00      	cmp	r5, #0
 8009754:	d115      	bne.n	8009782 <pow+0x1d2>
 8009756:	61a2      	str	r2, [r4, #24]
 8009758:	61e3      	str	r3, [r4, #28]
 800975a:	0020      	movs	r0, r4
 800975c:	f000 fe72 	bl	800a444 <matherr>
 8009760:	2800      	cmp	r0, #0
 8009762:	d016      	beq.n	8009792 <pow+0x1e2>
 8009764:	6a23      	ldr	r3, [r4, #32]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <pow+0x1c2>
 800976a:	f7fd faef 	bl	8006d4c <__errno>
 800976e:	6a23      	ldr	r3, [r4, #32]
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	69a3      	ldr	r3, [r4, #24]
 8009774:	69e4      	ldr	r4, [r4, #28]
 8009776:	9302      	str	r3, [sp, #8]
 8009778:	9403      	str	r4, [sp, #12]
 800977a:	9802      	ldr	r0, [sp, #8]
 800977c:	9903      	ldr	r1, [sp, #12]
 800977e:	b011      	add	sp, #68	; 0x44
 8009780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009782:	0010      	movs	r0, r2
 8009784:	0019      	movs	r1, r3
 8009786:	f7f7 faa1 	bl	8000ccc <__aeabi_ddiv>
 800978a:	61a0      	str	r0, [r4, #24]
 800978c:	61e1      	str	r1, [r4, #28]
 800978e:	2d02      	cmp	r5, #2
 8009790:	d1e3      	bne.n	800975a <pow+0x1aa>
 8009792:	f7fd fadb 	bl	8006d4c <__errno>
 8009796:	2321      	movs	r3, #33	; 0x21
 8009798:	6003      	str	r3, [r0, #0]
 800979a:	e7e3      	b.n	8009764 <pow+0x1b4>
 800979c:	2203      	movs	r2, #3
 800979e:	6126      	str	r6, [r4, #16]
 80097a0:	6167      	str	r7, [r4, #20]
 80097a2:	9206      	str	r2, [sp, #24]
 80097a4:	6063      	str	r3, [r4, #4]
 80097a6:	6220      	str	r0, [r4, #32]
 80097a8:	9a00      	ldr	r2, [sp, #0]
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	0030      	movs	r0, r6
 80097ae:	60a2      	str	r2, [r4, #8]
 80097b0:	60e3      	str	r3, [r4, #12]
 80097b2:	0039      	movs	r1, r7
 80097b4:	2200      	movs	r2, #0
 80097b6:	4b45      	ldr	r3, [pc, #276]	; (80098cc <pow+0x31c>)
 80097b8:	f7f7 fe92 	bl	80014e0 <__aeabi_dmul>
 80097bc:	0006      	movs	r6, r0
 80097be:	000f      	movs	r7, r1
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	d124      	bne.n	800980e <pow+0x25e>
 80097c4:	9800      	ldr	r0, [sp, #0]
 80097c6:	9901      	ldr	r1, [sp, #4]
 80097c8:	22e0      	movs	r2, #224	; 0xe0
 80097ca:	4b41      	ldr	r3, [pc, #260]	; (80098d0 <pow+0x320>)
 80097cc:	0612      	lsls	r2, r2, #24
 80097ce:	61a2      	str	r2, [r4, #24]
 80097d0:	61e3      	str	r3, [r4, #28]
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	f7f6 fe35 	bl	8000444 <__aeabi_dcmplt>
 80097da:	2800      	cmp	r0, #0
 80097dc:	d030      	beq.n	8009840 <pow+0x290>
 80097de:	0030      	movs	r0, r6
 80097e0:	0039      	movs	r1, r7
 80097e2:	f000 fe37 	bl	800a454 <rint>
 80097e6:	0032      	movs	r2, r6
 80097e8:	003b      	movs	r3, r7
 80097ea:	f7f6 fe25 	bl	8000438 <__aeabi_dcmpeq>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d104      	bne.n	80097fc <pow+0x24c>
 80097f2:	22e0      	movs	r2, #224	; 0xe0
 80097f4:	4b37      	ldr	r3, [pc, #220]	; (80098d4 <pow+0x324>)
 80097f6:	0612      	lsls	r2, r2, #24
 80097f8:	61a2      	str	r2, [r4, #24]
 80097fa:	61e3      	str	r3, [r4, #28]
 80097fc:	4b2f      	ldr	r3, [pc, #188]	; (80098bc <pow+0x30c>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	b25b      	sxtb	r3, r3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d11c      	bne.n	8009840 <pow+0x290>
 8009806:	f7fd faa1 	bl	8006d4c <__errno>
 800980a:	2322      	movs	r3, #34	; 0x22
 800980c:	e7c4      	b.n	8009798 <pow+0x1e8>
 800980e:	2200      	movs	r2, #0
 8009810:	9800      	ldr	r0, [sp, #0]
 8009812:	9901      	ldr	r1, [sp, #4]
 8009814:	4b30      	ldr	r3, [pc, #192]	; (80098d8 <pow+0x328>)
 8009816:	61a2      	str	r2, [r4, #24]
 8009818:	61e3      	str	r3, [r4, #28]
 800981a:	2200      	movs	r2, #0
 800981c:	2300      	movs	r3, #0
 800981e:	f7f6 fe11 	bl	8000444 <__aeabi_dcmplt>
 8009822:	2800      	cmp	r0, #0
 8009824:	d0ea      	beq.n	80097fc <pow+0x24c>
 8009826:	0030      	movs	r0, r6
 8009828:	0039      	movs	r1, r7
 800982a:	f000 fe13 	bl	800a454 <rint>
 800982e:	0032      	movs	r2, r6
 8009830:	003b      	movs	r3, r7
 8009832:	f7f6 fe01 	bl	8000438 <__aeabi_dcmpeq>
 8009836:	2800      	cmp	r0, #0
 8009838:	d1e0      	bne.n	80097fc <pow+0x24c>
 800983a:	2200      	movs	r2, #0
 800983c:	4b22      	ldr	r3, [pc, #136]	; (80098c8 <pow+0x318>)
 800983e:	e7db      	b.n	80097f8 <pow+0x248>
 8009840:	0020      	movs	r0, r4
 8009842:	f000 fdff 	bl	800a444 <matherr>
 8009846:	2800      	cmp	r0, #0
 8009848:	d000      	beq.n	800984c <pow+0x29c>
 800984a:	e78b      	b.n	8009764 <pow+0x1b4>
 800984c:	e7db      	b.n	8009806 <pow+0x256>
 800984e:	2200      	movs	r2, #0
 8009850:	9802      	ldr	r0, [sp, #8]
 8009852:	9903      	ldr	r1, [sp, #12]
 8009854:	2300      	movs	r3, #0
 8009856:	f7f6 fdef 	bl	8000438 <__aeabi_dcmpeq>
 800985a:	2800      	cmp	r0, #0
 800985c:	d100      	bne.n	8009860 <pow+0x2b0>
 800985e:	e78c      	b.n	800977a <pow+0x1ca>
 8009860:	9800      	ldr	r0, [sp, #0]
 8009862:	9901      	ldr	r1, [sp, #4]
 8009864:	f000 fde6 	bl	800a434 <finite>
 8009868:	2800      	cmp	r0, #0
 800986a:	d100      	bne.n	800986e <pow+0x2be>
 800986c:	e785      	b.n	800977a <pow+0x1ca>
 800986e:	0030      	movs	r0, r6
 8009870:	0039      	movs	r1, r7
 8009872:	f000 fddf 	bl	800a434 <finite>
 8009876:	2800      	cmp	r0, #0
 8009878:	d100      	bne.n	800987c <pow+0x2cc>
 800987a:	e77e      	b.n	800977a <pow+0x1ca>
 800987c:	2304      	movs	r3, #4
 800987e:	9306      	str	r3, [sp, #24]
 8009880:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <pow+0x310>)
 8009882:	960a      	str	r6, [sp, #40]	; 0x28
 8009884:	970b      	str	r7, [sp, #44]	; 0x2c
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	2300      	movs	r3, #0
 800988a:	930e      	str	r3, [sp, #56]	; 0x38
 800988c:	9b00      	ldr	r3, [sp, #0]
 800988e:	9c01      	ldr	r4, [sp, #4]
 8009890:	9308      	str	r3, [sp, #32]
 8009892:	9409      	str	r4, [sp, #36]	; 0x24
 8009894:	2300      	movs	r3, #0
 8009896:	2400      	movs	r4, #0
 8009898:	930c      	str	r3, [sp, #48]	; 0x30
 800989a:	940d      	str	r4, [sp, #52]	; 0x34
 800989c:	4b07      	ldr	r3, [pc, #28]	; (80098bc <pow+0x30c>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	b25b      	sxtb	r3, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d103      	bne.n	80098ae <pow+0x2fe>
 80098a6:	f7fd fa51 	bl	8006d4c <__errno>
 80098aa:	2322      	movs	r3, #34	; 0x22
 80098ac:	e71f      	b.n	80096ee <pow+0x13e>
 80098ae:	a806      	add	r0, sp, #24
 80098b0:	f000 fdc8 	bl	800a444 <matherr>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d000      	beq.n	80098ba <pow+0x30a>
 80098b8:	e6e1      	b.n	800967e <pow+0xce>
 80098ba:	e7f4      	b.n	80098a6 <pow+0x2f6>
 80098bc:	200001d8 	.word	0x200001d8
 80098c0:	0800ac10 	.word	0x0800ac10
 80098c4:	3ff00000 	.word	0x3ff00000
 80098c8:	fff00000 	.word	0xfff00000
 80098cc:	3fe00000 	.word	0x3fe00000
 80098d0:	47efffff 	.word	0x47efffff
 80098d4:	c7efffff 	.word	0xc7efffff
 80098d8:	7ff00000 	.word	0x7ff00000

080098dc <__ieee754_pow>:
 80098dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098de:	b095      	sub	sp, #84	; 0x54
 80098e0:	9202      	str	r2, [sp, #8]
 80098e2:	9303      	str	r3, [sp, #12]
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	000e      	movs	r6, r1
 80098e8:	9902      	ldr	r1, [sp, #8]
 80098ea:	005d      	lsls	r5, r3, #1
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	000b      	movs	r3, r1
 80098f0:	086d      	lsrs	r5, r5, #1
 80098f2:	0007      	movs	r7, r0
 80098f4:	432b      	orrs	r3, r5
 80098f6:	d101      	bne.n	80098fc <__ieee754_pow+0x20>
 80098f8:	f000 fcad 	bl	800a256 <__ieee754_pow+0x97a>
 80098fc:	4b7e      	ldr	r3, [pc, #504]	; (8009af8 <__ieee754_pow+0x21c>)
 80098fe:	0074      	lsls	r4, r6, #1
 8009900:	9608      	str	r6, [sp, #32]
 8009902:	9000      	str	r0, [sp, #0]
 8009904:	0864      	lsrs	r4, r4, #1
 8009906:	469c      	mov	ip, r3
 8009908:	429c      	cmp	r4, r3
 800990a:	dc0b      	bgt.n	8009924 <__ieee754_pow+0x48>
 800990c:	d104      	bne.n	8009918 <__ieee754_pow+0x3c>
 800990e:	2800      	cmp	r0, #0
 8009910:	d108      	bne.n	8009924 <__ieee754_pow+0x48>
 8009912:	42a5      	cmp	r5, r4
 8009914:	dc0c      	bgt.n	8009930 <__ieee754_pow+0x54>
 8009916:	e001      	b.n	800991c <__ieee754_pow+0x40>
 8009918:	429d      	cmp	r5, r3
 800991a:	dc03      	bgt.n	8009924 <__ieee754_pow+0x48>
 800991c:	4565      	cmp	r5, ip
 800991e:	d10d      	bne.n	800993c <__ieee754_pow+0x60>
 8009920:	2900      	cmp	r1, #0
 8009922:	d00b      	beq.n	800993c <__ieee754_pow+0x60>
 8009924:	4b75      	ldr	r3, [pc, #468]	; (8009afc <__ieee754_pow+0x220>)
 8009926:	18e4      	adds	r4, r4, r3
 8009928:	4327      	orrs	r7, r4
 800992a:	d101      	bne.n	8009930 <__ieee754_pow+0x54>
 800992c:	f000 fc93 	bl	800a256 <__ieee754_pow+0x97a>
 8009930:	4873      	ldr	r0, [pc, #460]	; (8009b00 <__ieee754_pow+0x224>)
 8009932:	f000 fd89 	bl	800a448 <nan>
 8009936:	9000      	str	r0, [sp, #0]
 8009938:	9101      	str	r1, [sp, #4]
 800993a:	e061      	b.n	8009a00 <__ieee754_pow+0x124>
 800993c:	2300      	movs	r3, #0
 800993e:	9306      	str	r3, [sp, #24]
 8009940:	2e00      	cmp	r6, #0
 8009942:	da17      	bge.n	8009974 <__ieee754_pow+0x98>
 8009944:	4a6f      	ldr	r2, [pc, #444]	; (8009b04 <__ieee754_pow+0x228>)
 8009946:	4295      	cmp	r5, r2
 8009948:	dc4d      	bgt.n	80099e6 <__ieee754_pow+0x10a>
 800994a:	4a6f      	ldr	r2, [pc, #444]	; (8009b08 <__ieee754_pow+0x22c>)
 800994c:	4295      	cmp	r5, r2
 800994e:	dd11      	ble.n	8009974 <__ieee754_pow+0x98>
 8009950:	4b6e      	ldr	r3, [pc, #440]	; (8009b0c <__ieee754_pow+0x230>)
 8009952:	152a      	asrs	r2, r5, #20
 8009954:	18d2      	adds	r2, r2, r3
 8009956:	2a14      	cmp	r2, #20
 8009958:	dd25      	ble.n	80099a6 <__ieee754_pow+0xca>
 800995a:	2034      	movs	r0, #52	; 0x34
 800995c:	1a82      	subs	r2, r0, r2
 800995e:	9802      	ldr	r0, [sp, #8]
 8009960:	40d0      	lsrs	r0, r2
 8009962:	0003      	movs	r3, r0
 8009964:	4093      	lsls	r3, r2
 8009966:	428b      	cmp	r3, r1
 8009968:	d104      	bne.n	8009974 <__ieee754_pow+0x98>
 800996a:	2201      	movs	r2, #1
 800996c:	4010      	ands	r0, r2
 800996e:	1892      	adds	r2, r2, r2
 8009970:	1a13      	subs	r3, r2, r0
 8009972:	9306      	str	r3, [sp, #24]
 8009974:	2900      	cmp	r1, #0
 8009976:	d15e      	bne.n	8009a36 <__ieee754_pow+0x15a>
 8009978:	4565      	cmp	r5, ip
 800997a:	d123      	bne.n	80099c4 <__ieee754_pow+0xe8>
 800997c:	4b5f      	ldr	r3, [pc, #380]	; (8009afc <__ieee754_pow+0x220>)
 800997e:	18e3      	adds	r3, r4, r3
 8009980:	431f      	orrs	r7, r3
 8009982:	d101      	bne.n	8009988 <__ieee754_pow+0xac>
 8009984:	f000 fc67 	bl	800a256 <__ieee754_pow+0x97a>
 8009988:	4b5f      	ldr	r3, [pc, #380]	; (8009b08 <__ieee754_pow+0x22c>)
 800998a:	429c      	cmp	r4, r3
 800998c:	dd2d      	ble.n	80099ea <__ieee754_pow+0x10e>
 800998e:	9b02      	ldr	r3, [sp, #8]
 8009990:	9c03      	ldr	r4, [sp, #12]
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	9401      	str	r4, [sp, #4]
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	da31      	bge.n	8009a00 <__ieee754_pow+0x124>
 800999c:	2300      	movs	r3, #0
 800999e:	2400      	movs	r4, #0
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	9401      	str	r4, [sp, #4]
 80099a4:	e02c      	b.n	8009a00 <__ieee754_pow+0x124>
 80099a6:	2900      	cmp	r1, #0
 80099a8:	d145      	bne.n	8009a36 <__ieee754_pow+0x15a>
 80099aa:	2314      	movs	r3, #20
 80099ac:	1a9a      	subs	r2, r3, r2
 80099ae:	002b      	movs	r3, r5
 80099b0:	4113      	asrs	r3, r2
 80099b2:	0019      	movs	r1, r3
 80099b4:	4091      	lsls	r1, r2
 80099b6:	42a9      	cmp	r1, r5
 80099b8:	d104      	bne.n	80099c4 <__ieee754_pow+0xe8>
 80099ba:	2201      	movs	r2, #1
 80099bc:	4013      	ands	r3, r2
 80099be:	1892      	adds	r2, r2, r2
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	9306      	str	r3, [sp, #24]
 80099c4:	4b52      	ldr	r3, [pc, #328]	; (8009b10 <__ieee754_pow+0x234>)
 80099c6:	429d      	cmp	r5, r3
 80099c8:	d11e      	bne.n	8009a08 <__ieee754_pow+0x12c>
 80099ca:	0038      	movs	r0, r7
 80099cc:	0031      	movs	r1, r6
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	9000      	str	r0, [sp, #0]
 80099d2:	9101      	str	r1, [sp, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	da13      	bge.n	8009a00 <__ieee754_pow+0x124>
 80099d8:	003a      	movs	r2, r7
 80099da:	0033      	movs	r3, r6
 80099dc:	2000      	movs	r0, #0
 80099de:	494c      	ldr	r1, [pc, #304]	; (8009b10 <__ieee754_pow+0x234>)
 80099e0:	f7f7 f974 	bl	8000ccc <__aeabi_ddiv>
 80099e4:	e7a7      	b.n	8009936 <__ieee754_pow+0x5a>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e7c3      	b.n	8009972 <__ieee754_pow+0x96>
 80099ea:	9b04      	ldr	r3, [sp, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dad5      	bge.n	800999c <__ieee754_pow+0xc0>
 80099f0:	2280      	movs	r2, #128	; 0x80
 80099f2:	0612      	lsls	r2, r2, #24
 80099f4:	4694      	mov	ip, r2
 80099f6:	9b02      	ldr	r3, [sp, #8]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	4463      	add	r3, ip
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	9800      	ldr	r0, [sp, #0]
 8009a02:	9901      	ldr	r1, [sp, #4]
 8009a04:	b015      	add	sp, #84	; 0x54
 8009a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a08:	2380      	movs	r3, #128	; 0x80
 8009a0a:	9a04      	ldr	r2, [sp, #16]
 8009a0c:	05db      	lsls	r3, r3, #23
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d106      	bne.n	8009a20 <__ieee754_pow+0x144>
 8009a12:	003a      	movs	r2, r7
 8009a14:	0033      	movs	r3, r6
 8009a16:	0038      	movs	r0, r7
 8009a18:	0031      	movs	r1, r6
 8009a1a:	f7f7 fd61 	bl	80014e0 <__aeabi_dmul>
 8009a1e:	e78a      	b.n	8009936 <__ieee754_pow+0x5a>
 8009a20:	4b3c      	ldr	r3, [pc, #240]	; (8009b14 <__ieee754_pow+0x238>)
 8009a22:	9a04      	ldr	r2, [sp, #16]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d106      	bne.n	8009a36 <__ieee754_pow+0x15a>
 8009a28:	2e00      	cmp	r6, #0
 8009a2a:	db04      	blt.n	8009a36 <__ieee754_pow+0x15a>
 8009a2c:	0038      	movs	r0, r7
 8009a2e:	0031      	movs	r1, r6
 8009a30:	f000 fc4a 	bl	800a2c8 <__ieee754_sqrt>
 8009a34:	e77f      	b.n	8009936 <__ieee754_pow+0x5a>
 8009a36:	0038      	movs	r0, r7
 8009a38:	0031      	movs	r1, r6
 8009a3a:	f000 fcf7 	bl	800a42c <fabs>
 8009a3e:	9000      	str	r0, [sp, #0]
 8009a40:	9101      	str	r1, [sp, #4]
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	d12e      	bne.n	8009aa4 <__ieee754_pow+0x1c8>
 8009a46:	2c00      	cmp	r4, #0
 8009a48:	d004      	beq.n	8009a54 <__ieee754_pow+0x178>
 8009a4a:	4a31      	ldr	r2, [pc, #196]	; (8009b10 <__ieee754_pow+0x234>)
 8009a4c:	00b3      	lsls	r3, r6, #2
 8009a4e:	089b      	lsrs	r3, r3, #2
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d127      	bne.n	8009aa4 <__ieee754_pow+0x1c8>
 8009a54:	9b04      	ldr	r3, [sp, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da07      	bge.n	8009a6a <__ieee754_pow+0x18e>
 8009a5a:	9a00      	ldr	r2, [sp, #0]
 8009a5c:	9b01      	ldr	r3, [sp, #4]
 8009a5e:	2000      	movs	r0, #0
 8009a60:	492b      	ldr	r1, [pc, #172]	; (8009b10 <__ieee754_pow+0x234>)
 8009a62:	f7f7 f933 	bl	8000ccc <__aeabi_ddiv>
 8009a66:	9000      	str	r0, [sp, #0]
 8009a68:	9101      	str	r1, [sp, #4]
 8009a6a:	9b08      	ldr	r3, [sp, #32]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dac7      	bge.n	8009a00 <__ieee754_pow+0x124>
 8009a70:	4b22      	ldr	r3, [pc, #136]	; (8009afc <__ieee754_pow+0x220>)
 8009a72:	18e4      	adds	r4, r4, r3
 8009a74:	9b06      	ldr	r3, [sp, #24]
 8009a76:	431c      	orrs	r4, r3
 8009a78:	d108      	bne.n	8009a8c <__ieee754_pow+0x1b0>
 8009a7a:	9a00      	ldr	r2, [sp, #0]
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	0010      	movs	r0, r2
 8009a80:	0019      	movs	r1, r3
 8009a82:	f7f7 ff9f 	bl	80019c4 <__aeabi_dsub>
 8009a86:	0002      	movs	r2, r0
 8009a88:	000b      	movs	r3, r1
 8009a8a:	e7a9      	b.n	80099e0 <__ieee754_pow+0x104>
 8009a8c:	9b06      	ldr	r3, [sp, #24]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d1b6      	bne.n	8009a00 <__ieee754_pow+0x124>
 8009a92:	9800      	ldr	r0, [sp, #0]
 8009a94:	2180      	movs	r1, #128	; 0x80
 8009a96:	0002      	movs	r2, r0
 8009a98:	9801      	ldr	r0, [sp, #4]
 8009a9a:	0609      	lsls	r1, r1, #24
 8009a9c:	1843      	adds	r3, r0, r1
 8009a9e:	9200      	str	r2, [sp, #0]
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	e7ad      	b.n	8009a00 <__ieee754_pow+0x124>
 8009aa4:	0ff3      	lsrs	r3, r6, #31
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	9310      	str	r3, [sp, #64]	; 0x40
 8009aaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009aac:	9b06      	ldr	r3, [sp, #24]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	d104      	bne.n	8009abc <__ieee754_pow+0x1e0>
 8009ab2:	003a      	movs	r2, r7
 8009ab4:	0033      	movs	r3, r6
 8009ab6:	0038      	movs	r0, r7
 8009ab8:	0031      	movs	r1, r6
 8009aba:	e7e2      	b.n	8009a82 <__ieee754_pow+0x1a6>
 8009abc:	4b16      	ldr	r3, [pc, #88]	; (8009b18 <__ieee754_pow+0x23c>)
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	dc00      	bgt.n	8009ac4 <__ieee754_pow+0x1e8>
 8009ac2:	e0f7      	b.n	8009cb4 <__ieee754_pow+0x3d8>
 8009ac4:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <__ieee754_pow+0x240>)
 8009ac6:	429d      	cmp	r5, r3
 8009ac8:	dd0b      	ble.n	8009ae2 <__ieee754_pow+0x206>
 8009aca:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <__ieee754_pow+0x22c>)
 8009acc:	429c      	cmp	r4, r3
 8009ace:	dc0e      	bgt.n	8009aee <__ieee754_pow+0x212>
 8009ad0:	9b04      	ldr	r3, [sp, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	db00      	blt.n	8009ad8 <__ieee754_pow+0x1fc>
 8009ad6:	e761      	b.n	800999c <__ieee754_pow+0xc0>
 8009ad8:	4a11      	ldr	r2, [pc, #68]	; (8009b20 <__ieee754_pow+0x244>)
 8009ada:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <__ieee754_pow+0x248>)
 8009adc:	0010      	movs	r0, r2
 8009ade:	0019      	movs	r1, r3
 8009ae0:	e79b      	b.n	8009a1a <__ieee754_pow+0x13e>
 8009ae2:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <__ieee754_pow+0x24c>)
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	ddf3      	ble.n	8009ad0 <__ieee754_pow+0x1f4>
 8009ae8:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <__ieee754_pow+0x234>)
 8009aea:	429c      	cmp	r4, r3
 8009aec:	dd1e      	ble.n	8009b2c <__ieee754_pow+0x250>
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dcf1      	bgt.n	8009ad8 <__ieee754_pow+0x1fc>
 8009af4:	e752      	b.n	800999c <__ieee754_pow+0xc0>
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	c0100000 	.word	0xc0100000
 8009b00:	0800aaf9 	.word	0x0800aaf9
 8009b04:	433fffff 	.word	0x433fffff
 8009b08:	3fefffff 	.word	0x3fefffff
 8009b0c:	fffffc01 	.word	0xfffffc01
 8009b10:	3ff00000 	.word	0x3ff00000
 8009b14:	3fe00000 	.word	0x3fe00000
 8009b18:	41e00000 	.word	0x41e00000
 8009b1c:	43f00000 	.word	0x43f00000
 8009b20:	8800759c 	.word	0x8800759c
 8009b24:	7e37e43c 	.word	0x7e37e43c
 8009b28:	3feffffe 	.word	0x3feffffe
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	9800      	ldr	r0, [sp, #0]
 8009b30:	9901      	ldr	r1, [sp, #4]
 8009b32:	4b52      	ldr	r3, [pc, #328]	; (8009c7c <__ieee754_pow+0x3a0>)
 8009b34:	f7f7 ff46 	bl	80019c4 <__aeabi_dsub>
 8009b38:	22c0      	movs	r2, #192	; 0xc0
 8009b3a:	4b51      	ldr	r3, [pc, #324]	; (8009c80 <__ieee754_pow+0x3a4>)
 8009b3c:	05d2      	lsls	r2, r2, #23
 8009b3e:	0006      	movs	r6, r0
 8009b40:	000f      	movs	r7, r1
 8009b42:	f7f7 fccd 	bl	80014e0 <__aeabi_dmul>
 8009b46:	4a4f      	ldr	r2, [pc, #316]	; (8009c84 <__ieee754_pow+0x3a8>)
 8009b48:	9000      	str	r0, [sp, #0]
 8009b4a:	9101      	str	r1, [sp, #4]
 8009b4c:	4b4e      	ldr	r3, [pc, #312]	; (8009c88 <__ieee754_pow+0x3ac>)
 8009b4e:	0030      	movs	r0, r6
 8009b50:	0039      	movs	r1, r7
 8009b52:	f7f7 fcc5 	bl	80014e0 <__aeabi_dmul>
 8009b56:	2200      	movs	r2, #0
 8009b58:	9004      	str	r0, [sp, #16]
 8009b5a:	9105      	str	r1, [sp, #20]
 8009b5c:	4b4b      	ldr	r3, [pc, #300]	; (8009c8c <__ieee754_pow+0x3b0>)
 8009b5e:	0030      	movs	r0, r6
 8009b60:	0039      	movs	r1, r7
 8009b62:	f7f7 fcbd 	bl	80014e0 <__aeabi_dmul>
 8009b66:	0002      	movs	r2, r0
 8009b68:	000b      	movs	r3, r1
 8009b6a:	4849      	ldr	r0, [pc, #292]	; (8009c90 <__ieee754_pow+0x3b4>)
 8009b6c:	4949      	ldr	r1, [pc, #292]	; (8009c94 <__ieee754_pow+0x3b8>)
 8009b6e:	f7f7 ff29 	bl	80019c4 <__aeabi_dsub>
 8009b72:	0032      	movs	r2, r6
 8009b74:	003b      	movs	r3, r7
 8009b76:	f7f7 fcb3 	bl	80014e0 <__aeabi_dmul>
 8009b7a:	0002      	movs	r2, r0
 8009b7c:	000b      	movs	r3, r1
 8009b7e:	2000      	movs	r0, #0
 8009b80:	4945      	ldr	r1, [pc, #276]	; (8009c98 <__ieee754_pow+0x3bc>)
 8009b82:	f7f7 ff1f 	bl	80019c4 <__aeabi_dsub>
 8009b86:	0032      	movs	r2, r6
 8009b88:	0004      	movs	r4, r0
 8009b8a:	000d      	movs	r5, r1
 8009b8c:	003b      	movs	r3, r7
 8009b8e:	0030      	movs	r0, r6
 8009b90:	0039      	movs	r1, r7
 8009b92:	f7f7 fca5 	bl	80014e0 <__aeabi_dmul>
 8009b96:	0002      	movs	r2, r0
 8009b98:	000b      	movs	r3, r1
 8009b9a:	0020      	movs	r0, r4
 8009b9c:	0029      	movs	r1, r5
 8009b9e:	f7f7 fc9f 	bl	80014e0 <__aeabi_dmul>
 8009ba2:	4a3e      	ldr	r2, [pc, #248]	; (8009c9c <__ieee754_pow+0x3c0>)
 8009ba4:	4b36      	ldr	r3, [pc, #216]	; (8009c80 <__ieee754_pow+0x3a4>)
 8009ba6:	f7f7 fc9b 	bl	80014e0 <__aeabi_dmul>
 8009baa:	0002      	movs	r2, r0
 8009bac:	000b      	movs	r3, r1
 8009bae:	9804      	ldr	r0, [sp, #16]
 8009bb0:	9905      	ldr	r1, [sp, #20]
 8009bb2:	f7f7 ff07 	bl	80019c4 <__aeabi_dsub>
 8009bb6:	0002      	movs	r2, r0
 8009bb8:	000b      	movs	r3, r1
 8009bba:	0004      	movs	r4, r0
 8009bbc:	000d      	movs	r5, r1
 8009bbe:	9800      	ldr	r0, [sp, #0]
 8009bc0:	9901      	ldr	r1, [sp, #4]
 8009bc2:	f7f6 fd67 	bl	8000694 <__aeabi_dadd>
 8009bc6:	9a00      	ldr	r2, [sp, #0]
 8009bc8:	9b01      	ldr	r3, [sp, #4]
 8009bca:	2000      	movs	r0, #0
 8009bcc:	9004      	str	r0, [sp, #16]
 8009bce:	9105      	str	r1, [sp, #20]
 8009bd0:	f7f7 fef8 	bl	80019c4 <__aeabi_dsub>
 8009bd4:	0002      	movs	r2, r0
 8009bd6:	000b      	movs	r3, r1
 8009bd8:	0020      	movs	r0, r4
 8009bda:	0029      	movs	r1, r5
 8009bdc:	f7f7 fef2 	bl	80019c4 <__aeabi_dsub>
 8009be0:	9b06      	ldr	r3, [sp, #24]
 8009be2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009be4:	3b01      	subs	r3, #1
 8009be6:	0006      	movs	r6, r0
 8009be8:	000f      	movs	r7, r1
 8009bea:	4313      	orrs	r3, r2
 8009bec:	d000      	beq.n	8009bf0 <__ieee754_pow+0x314>
 8009bee:	e1de      	b.n	8009fae <__ieee754_pow+0x6d2>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4c2b      	ldr	r4, [pc, #172]	; (8009ca0 <__ieee754_pow+0x3c4>)
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	9401      	str	r4, [sp, #4]
 8009bf8:	9c02      	ldr	r4, [sp, #8]
 8009bfa:	9d03      	ldr	r5, [sp, #12]
 8009bfc:	9802      	ldr	r0, [sp, #8]
 8009bfe:	9903      	ldr	r1, [sp, #12]
 8009c00:	2400      	movs	r4, #0
 8009c02:	002b      	movs	r3, r5
 8009c04:	0022      	movs	r2, r4
 8009c06:	f7f7 fedd 	bl	80019c4 <__aeabi_dsub>
 8009c0a:	9a04      	ldr	r2, [sp, #16]
 8009c0c:	9b05      	ldr	r3, [sp, #20]
 8009c0e:	f7f7 fc67 	bl	80014e0 <__aeabi_dmul>
 8009c12:	9a02      	ldr	r2, [sp, #8]
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	9006      	str	r0, [sp, #24]
 8009c18:	9107      	str	r1, [sp, #28]
 8009c1a:	0030      	movs	r0, r6
 8009c1c:	0039      	movs	r1, r7
 8009c1e:	f7f7 fc5f 	bl	80014e0 <__aeabi_dmul>
 8009c22:	0002      	movs	r2, r0
 8009c24:	000b      	movs	r3, r1
 8009c26:	9806      	ldr	r0, [sp, #24]
 8009c28:	9907      	ldr	r1, [sp, #28]
 8009c2a:	f7f6 fd33 	bl	8000694 <__aeabi_dadd>
 8009c2e:	0022      	movs	r2, r4
 8009c30:	002b      	movs	r3, r5
 8009c32:	9006      	str	r0, [sp, #24]
 8009c34:	9107      	str	r1, [sp, #28]
 8009c36:	9804      	ldr	r0, [sp, #16]
 8009c38:	9905      	ldr	r1, [sp, #20]
 8009c3a:	f7f7 fc51 	bl	80014e0 <__aeabi_dmul>
 8009c3e:	0006      	movs	r6, r0
 8009c40:	000f      	movs	r7, r1
 8009c42:	000b      	movs	r3, r1
 8009c44:	0002      	movs	r2, r0
 8009c46:	9806      	ldr	r0, [sp, #24]
 8009c48:	9907      	ldr	r1, [sp, #28]
 8009c4a:	9604      	str	r6, [sp, #16]
 8009c4c:	9705      	str	r7, [sp, #20]
 8009c4e:	f7f6 fd21 	bl	8000694 <__aeabi_dadd>
 8009c52:	4b14      	ldr	r3, [pc, #80]	; (8009ca4 <__ieee754_pow+0x3c8>)
 8009c54:	0005      	movs	r5, r0
 8009c56:	000c      	movs	r4, r1
 8009c58:	9108      	str	r1, [sp, #32]
 8009c5a:	4299      	cmp	r1, r3
 8009c5c:	dc00      	bgt.n	8009c60 <__ieee754_pow+0x384>
 8009c5e:	e2d8      	b.n	800a212 <__ieee754_pow+0x936>
 8009c60:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <__ieee754_pow+0x3cc>)
 8009c62:	18cb      	adds	r3, r1, r3
 8009c64:	4303      	orrs	r3, r0
 8009c66:	d100      	bne.n	8009c6a <__ieee754_pow+0x38e>
 8009c68:	e1da      	b.n	800a020 <__ieee754_pow+0x744>
 8009c6a:	9800      	ldr	r0, [sp, #0]
 8009c6c:	9901      	ldr	r1, [sp, #4]
 8009c6e:	4a0f      	ldr	r2, [pc, #60]	; (8009cac <__ieee754_pow+0x3d0>)
 8009c70:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <__ieee754_pow+0x3d4>)
 8009c72:	f7f7 fc35 	bl	80014e0 <__aeabi_dmul>
 8009c76:	4a0d      	ldr	r2, [pc, #52]	; (8009cac <__ieee754_pow+0x3d0>)
 8009c78:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <__ieee754_pow+0x3d4>)
 8009c7a:	e6ce      	b.n	8009a1a <__ieee754_pow+0x13e>
 8009c7c:	3ff00000 	.word	0x3ff00000
 8009c80:	3ff71547 	.word	0x3ff71547
 8009c84:	f85ddf44 	.word	0xf85ddf44
 8009c88:	3e54ae0b 	.word	0x3e54ae0b
 8009c8c:	3fd00000 	.word	0x3fd00000
 8009c90:	55555555 	.word	0x55555555
 8009c94:	3fd55555 	.word	0x3fd55555
 8009c98:	3fe00000 	.word	0x3fe00000
 8009c9c:	652b82fe 	.word	0x652b82fe
 8009ca0:	bff00000 	.word	0xbff00000
 8009ca4:	408fffff 	.word	0x408fffff
 8009ca8:	bf700000 	.word	0xbf700000
 8009cac:	8800759c 	.word	0x8800759c
 8009cb0:	7e37e43c 	.word	0x7e37e43c
 8009cb4:	4bbf      	ldr	r3, [pc, #764]	; (8009fb4 <__ieee754_pow+0x6d8>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	dc0a      	bgt.n	8009cd2 <__ieee754_pow+0x3f6>
 8009cbc:	9800      	ldr	r0, [sp, #0]
 8009cbe:	9901      	ldr	r1, [sp, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4bbd      	ldr	r3, [pc, #756]	; (8009fb8 <__ieee754_pow+0x6dc>)
 8009cc4:	f7f7 fc0c 	bl	80014e0 <__aeabi_dmul>
 8009cc8:	2235      	movs	r2, #53	; 0x35
 8009cca:	9000      	str	r0, [sp, #0]
 8009ccc:	9101      	str	r1, [sp, #4]
 8009cce:	9c01      	ldr	r4, [sp, #4]
 8009cd0:	4252      	negs	r2, r2
 8009cd2:	49ba      	ldr	r1, [pc, #744]	; (8009fbc <__ieee754_pow+0x6e0>)
 8009cd4:	1523      	asrs	r3, r4, #20
 8009cd6:	185b      	adds	r3, r3, r1
 8009cd8:	189b      	adds	r3, r3, r2
 8009cda:	0324      	lsls	r4, r4, #12
 8009cdc:	4db8      	ldr	r5, [pc, #736]	; (8009fc0 <__ieee754_pow+0x6e4>)
 8009cde:	4ab9      	ldr	r2, [pc, #740]	; (8009fc4 <__ieee754_pow+0x6e8>)
 8009ce0:	930d      	str	r3, [sp, #52]	; 0x34
 8009ce2:	0b23      	lsrs	r3, r4, #12
 8009ce4:	431d      	orrs	r5, r3
 8009ce6:	2400      	movs	r4, #0
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	dd09      	ble.n	8009d00 <__ieee754_pow+0x424>
 8009cec:	4ab6      	ldr	r2, [pc, #728]	; (8009fc8 <__ieee754_pow+0x6ec>)
 8009cee:	3401      	adds	r4, #1
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	dd05      	ble.n	8009d00 <__ieee754_pow+0x424>
 8009cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf6:	191b      	adds	r3, r3, r4
 8009cf8:	2400      	movs	r4, #0
 8009cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8009cfc:	4bb3      	ldr	r3, [pc, #716]	; (8009fcc <__ieee754_pow+0x6f0>)
 8009cfe:	18ed      	adds	r5, r5, r3
 8009d00:	9800      	ldr	r0, [sp, #0]
 8009d02:	9901      	ldr	r1, [sp, #4]
 8009d04:	0029      	movs	r1, r5
 8009d06:	00e3      	lsls	r3, r4, #3
 8009d08:	9311      	str	r3, [sp, #68]	; 0x44
 8009d0a:	4bb1      	ldr	r3, [pc, #708]	; (8009fd0 <__ieee754_pow+0x6f4>)
 8009d0c:	00e2      	lsls	r2, r4, #3
 8009d0e:	189b      	adds	r3, r3, r2
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	900e      	str	r0, [sp, #56]	; 0x38
 8009d16:	910f      	str	r1, [sp, #60]	; 0x3c
 8009d18:	920a      	str	r2, [sp, #40]	; 0x28
 8009d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d1c:	f7f7 fe52 	bl	80019c4 <__aeabi_dsub>
 8009d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d24:	0006      	movs	r6, r0
 8009d26:	000f      	movs	r7, r1
 8009d28:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d2c:	f7f6 fcb2 	bl	8000694 <__aeabi_dadd>
 8009d30:	0002      	movs	r2, r0
 8009d32:	000b      	movs	r3, r1
 8009d34:	2000      	movs	r0, #0
 8009d36:	49a2      	ldr	r1, [pc, #648]	; (8009fc0 <__ieee754_pow+0x6e4>)
 8009d38:	f7f6 ffc8 	bl	8000ccc <__aeabi_ddiv>
 8009d3c:	9012      	str	r0, [sp, #72]	; 0x48
 8009d3e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009d40:	0002      	movs	r2, r0
 8009d42:	000b      	movs	r3, r1
 8009d44:	0030      	movs	r0, r6
 8009d46:	0039      	movs	r1, r7
 8009d48:	f7f7 fbca 	bl	80014e0 <__aeabi_dmul>
 8009d4c:	9008      	str	r0, [sp, #32]
 8009d4e:	9109      	str	r1, [sp, #36]	; 0x24
 8009d50:	9a08      	ldr	r2, [sp, #32]
 8009d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d54:	2180      	movs	r1, #128	; 0x80
 8009d56:	9204      	str	r2, [sp, #16]
 8009d58:	9305      	str	r3, [sp, #20]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	0589      	lsls	r1, r1, #22
 8009d5e:	106d      	asrs	r5, r5, #1
 8009d60:	430d      	orrs	r5, r1
 8009d62:	2180      	movs	r1, #128	; 0x80
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	9a04      	ldr	r2, [sp, #16]
 8009d68:	9b05      	ldr	r3, [sp, #20]
 8009d6a:	9200      	str	r2, [sp, #0]
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	0309      	lsls	r1, r1, #12
 8009d72:	186d      	adds	r5, r5, r1
 8009d74:	04a4      	lsls	r4, r4, #18
 8009d76:	192b      	adds	r3, r5, r4
 8009d78:	9800      	ldr	r0, [sp, #0]
 8009d7a:	9901      	ldr	r1, [sp, #4]
 8009d7c:	0014      	movs	r4, r2
 8009d7e:	001d      	movs	r5, r3
 8009d80:	f7f7 fbae 	bl	80014e0 <__aeabi_dmul>
 8009d84:	0002      	movs	r2, r0
 8009d86:	000b      	movs	r3, r1
 8009d88:	0030      	movs	r0, r6
 8009d8a:	0039      	movs	r1, r7
 8009d8c:	f7f7 fe1a 	bl	80019c4 <__aeabi_dsub>
 8009d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d94:	0006      	movs	r6, r0
 8009d96:	000f      	movs	r7, r1
 8009d98:	0020      	movs	r0, r4
 8009d9a:	0029      	movs	r1, r5
 8009d9c:	f7f7 fe12 	bl	80019c4 <__aeabi_dsub>
 8009da0:	0002      	movs	r2, r0
 8009da2:	000b      	movs	r3, r1
 8009da4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009da6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009da8:	f7f7 fe0c 	bl	80019c4 <__aeabi_dsub>
 8009dac:	9a00      	ldr	r2, [sp, #0]
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	f7f7 fb96 	bl	80014e0 <__aeabi_dmul>
 8009db4:	0002      	movs	r2, r0
 8009db6:	000b      	movs	r3, r1
 8009db8:	0030      	movs	r0, r6
 8009dba:	0039      	movs	r1, r7
 8009dbc:	f7f7 fe02 	bl	80019c4 <__aeabi_dsub>
 8009dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dc4:	f7f7 fb8c 	bl	80014e0 <__aeabi_dmul>
 8009dc8:	9a08      	ldr	r2, [sp, #32]
 8009dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dcc:	900a      	str	r0, [sp, #40]	; 0x28
 8009dce:	910b      	str	r1, [sp, #44]	; 0x2c
 8009dd0:	0010      	movs	r0, r2
 8009dd2:	0019      	movs	r1, r3
 8009dd4:	f7f7 fb84 	bl	80014e0 <__aeabi_dmul>
 8009dd8:	0006      	movs	r6, r0
 8009dda:	000f      	movs	r7, r1
 8009ddc:	4a7d      	ldr	r2, [pc, #500]	; (8009fd4 <__ieee754_pow+0x6f8>)
 8009dde:	4b7e      	ldr	r3, [pc, #504]	; (8009fd8 <__ieee754_pow+0x6fc>)
 8009de0:	f7f7 fb7e 	bl	80014e0 <__aeabi_dmul>
 8009de4:	4a7d      	ldr	r2, [pc, #500]	; (8009fdc <__ieee754_pow+0x700>)
 8009de6:	4b7e      	ldr	r3, [pc, #504]	; (8009fe0 <__ieee754_pow+0x704>)
 8009de8:	f7f6 fc54 	bl	8000694 <__aeabi_dadd>
 8009dec:	0032      	movs	r2, r6
 8009dee:	003b      	movs	r3, r7
 8009df0:	f7f7 fb76 	bl	80014e0 <__aeabi_dmul>
 8009df4:	4a7b      	ldr	r2, [pc, #492]	; (8009fe4 <__ieee754_pow+0x708>)
 8009df6:	4b7c      	ldr	r3, [pc, #496]	; (8009fe8 <__ieee754_pow+0x70c>)
 8009df8:	f7f6 fc4c 	bl	8000694 <__aeabi_dadd>
 8009dfc:	0032      	movs	r2, r6
 8009dfe:	003b      	movs	r3, r7
 8009e00:	f7f7 fb6e 	bl	80014e0 <__aeabi_dmul>
 8009e04:	4a79      	ldr	r2, [pc, #484]	; (8009fec <__ieee754_pow+0x710>)
 8009e06:	4b7a      	ldr	r3, [pc, #488]	; (8009ff0 <__ieee754_pow+0x714>)
 8009e08:	f7f6 fc44 	bl	8000694 <__aeabi_dadd>
 8009e0c:	0032      	movs	r2, r6
 8009e0e:	003b      	movs	r3, r7
 8009e10:	f7f7 fb66 	bl	80014e0 <__aeabi_dmul>
 8009e14:	4a77      	ldr	r2, [pc, #476]	; (8009ff4 <__ieee754_pow+0x718>)
 8009e16:	4b78      	ldr	r3, [pc, #480]	; (8009ff8 <__ieee754_pow+0x71c>)
 8009e18:	f7f6 fc3c 	bl	8000694 <__aeabi_dadd>
 8009e1c:	0032      	movs	r2, r6
 8009e1e:	003b      	movs	r3, r7
 8009e20:	f7f7 fb5e 	bl	80014e0 <__aeabi_dmul>
 8009e24:	4a75      	ldr	r2, [pc, #468]	; (8009ffc <__ieee754_pow+0x720>)
 8009e26:	4b76      	ldr	r3, [pc, #472]	; (800a000 <__ieee754_pow+0x724>)
 8009e28:	f7f6 fc34 	bl	8000694 <__aeabi_dadd>
 8009e2c:	0032      	movs	r2, r6
 8009e2e:	0004      	movs	r4, r0
 8009e30:	000d      	movs	r5, r1
 8009e32:	003b      	movs	r3, r7
 8009e34:	0030      	movs	r0, r6
 8009e36:	0039      	movs	r1, r7
 8009e38:	f7f7 fb52 	bl	80014e0 <__aeabi_dmul>
 8009e3c:	0002      	movs	r2, r0
 8009e3e:	000b      	movs	r3, r1
 8009e40:	0020      	movs	r0, r4
 8009e42:	0029      	movs	r1, r5
 8009e44:	f7f7 fb4c 	bl	80014e0 <__aeabi_dmul>
 8009e48:	9a00      	ldr	r2, [sp, #0]
 8009e4a:	9b01      	ldr	r3, [sp, #4]
 8009e4c:	0004      	movs	r4, r0
 8009e4e:	000d      	movs	r5, r1
 8009e50:	9808      	ldr	r0, [sp, #32]
 8009e52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e54:	f7f6 fc1e 	bl	8000694 <__aeabi_dadd>
 8009e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e5c:	f7f7 fb40 	bl	80014e0 <__aeabi_dmul>
 8009e60:	0022      	movs	r2, r4
 8009e62:	002b      	movs	r3, r5
 8009e64:	f7f6 fc16 	bl	8000694 <__aeabi_dadd>
 8009e68:	9a00      	ldr	r2, [sp, #0]
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	900e      	str	r0, [sp, #56]	; 0x38
 8009e6e:	910f      	str	r1, [sp, #60]	; 0x3c
 8009e70:	0010      	movs	r0, r2
 8009e72:	0019      	movs	r1, r3
 8009e74:	f7f7 fb34 	bl	80014e0 <__aeabi_dmul>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4b62      	ldr	r3, [pc, #392]	; (800a004 <__ieee754_pow+0x728>)
 8009e7c:	0004      	movs	r4, r0
 8009e7e:	000d      	movs	r5, r1
 8009e80:	f7f6 fc08 	bl	8000694 <__aeabi_dadd>
 8009e84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e88:	f7f6 fc04 	bl	8000694 <__aeabi_dadd>
 8009e8c:	9e04      	ldr	r6, [sp, #16]
 8009e8e:	000f      	movs	r7, r1
 8009e90:	0032      	movs	r2, r6
 8009e92:	000b      	movs	r3, r1
 8009e94:	9800      	ldr	r0, [sp, #0]
 8009e96:	9901      	ldr	r1, [sp, #4]
 8009e98:	f7f7 fb22 	bl	80014e0 <__aeabi_dmul>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	9000      	str	r0, [sp, #0]
 8009ea0:	9101      	str	r1, [sp, #4]
 8009ea2:	4b58      	ldr	r3, [pc, #352]	; (800a004 <__ieee754_pow+0x728>)
 8009ea4:	0030      	movs	r0, r6
 8009ea6:	0039      	movs	r1, r7
 8009ea8:	f7f7 fd8c 	bl	80019c4 <__aeabi_dsub>
 8009eac:	0022      	movs	r2, r4
 8009eae:	002b      	movs	r3, r5
 8009eb0:	f7f7 fd88 	bl	80019c4 <__aeabi_dsub>
 8009eb4:	0002      	movs	r2, r0
 8009eb6:	000b      	movs	r3, r1
 8009eb8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009eba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ebc:	f7f7 fd82 	bl	80019c4 <__aeabi_dsub>
 8009ec0:	9a08      	ldr	r2, [sp, #32]
 8009ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec4:	f7f7 fb0c 	bl	80014e0 <__aeabi_dmul>
 8009ec8:	0032      	movs	r2, r6
 8009eca:	0004      	movs	r4, r0
 8009ecc:	000d      	movs	r5, r1
 8009ece:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ed2:	003b      	movs	r3, r7
 8009ed4:	f7f7 fb04 	bl	80014e0 <__aeabi_dmul>
 8009ed8:	0002      	movs	r2, r0
 8009eda:	000b      	movs	r3, r1
 8009edc:	0020      	movs	r0, r4
 8009ede:	0029      	movs	r1, r5
 8009ee0:	f7f6 fbd8 	bl	8000694 <__aeabi_dadd>
 8009ee4:	0004      	movs	r4, r0
 8009ee6:	000d      	movs	r5, r1
 8009ee8:	0002      	movs	r2, r0
 8009eea:	000b      	movs	r3, r1
 8009eec:	9800      	ldr	r0, [sp, #0]
 8009eee:	9901      	ldr	r1, [sp, #4]
 8009ef0:	f7f6 fbd0 	bl	8000694 <__aeabi_dadd>
 8009ef4:	22e0      	movs	r2, #224	; 0xe0
 8009ef6:	9e04      	ldr	r6, [sp, #16]
 8009ef8:	0612      	lsls	r2, r2, #24
 8009efa:	4b43      	ldr	r3, [pc, #268]	; (800a008 <__ieee754_pow+0x72c>)
 8009efc:	0030      	movs	r0, r6
 8009efe:	000f      	movs	r7, r1
 8009f00:	f7f7 faee 	bl	80014e0 <__aeabi_dmul>
 8009f04:	9008      	str	r0, [sp, #32]
 8009f06:	9109      	str	r1, [sp, #36]	; 0x24
 8009f08:	9a00      	ldr	r2, [sp, #0]
 8009f0a:	9b01      	ldr	r3, [sp, #4]
 8009f0c:	0030      	movs	r0, r6
 8009f0e:	0039      	movs	r1, r7
 8009f10:	f7f7 fd58 	bl	80019c4 <__aeabi_dsub>
 8009f14:	0002      	movs	r2, r0
 8009f16:	000b      	movs	r3, r1
 8009f18:	0020      	movs	r0, r4
 8009f1a:	0029      	movs	r1, r5
 8009f1c:	f7f7 fd52 	bl	80019c4 <__aeabi_dsub>
 8009f20:	4a3a      	ldr	r2, [pc, #232]	; (800a00c <__ieee754_pow+0x730>)
 8009f22:	4b39      	ldr	r3, [pc, #228]	; (800a008 <__ieee754_pow+0x72c>)
 8009f24:	f7f7 fadc 	bl	80014e0 <__aeabi_dmul>
 8009f28:	4a39      	ldr	r2, [pc, #228]	; (800a010 <__ieee754_pow+0x734>)
 8009f2a:	0004      	movs	r4, r0
 8009f2c:	000d      	movs	r5, r1
 8009f2e:	4b39      	ldr	r3, [pc, #228]	; (800a014 <__ieee754_pow+0x738>)
 8009f30:	0030      	movs	r0, r6
 8009f32:	0039      	movs	r1, r7
 8009f34:	f7f7 fad4 	bl	80014e0 <__aeabi_dmul>
 8009f38:	0002      	movs	r2, r0
 8009f3a:	000b      	movs	r3, r1
 8009f3c:	0020      	movs	r0, r4
 8009f3e:	0029      	movs	r1, r5
 8009f40:	f7f6 fba8 	bl	8000694 <__aeabi_dadd>
 8009f44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f46:	4b34      	ldr	r3, [pc, #208]	; (800a018 <__ieee754_pow+0x73c>)
 8009f48:	189b      	adds	r3, r3, r2
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f7f6 fba1 	bl	8000694 <__aeabi_dadd>
 8009f52:	9000      	str	r0, [sp, #0]
 8009f54:	9101      	str	r1, [sp, #4]
 8009f56:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f58:	f7f8 f8ce 	bl	80020f8 <__aeabi_i2d>
 8009f5c:	0004      	movs	r4, r0
 8009f5e:	000d      	movs	r5, r1
 8009f60:	9808      	ldr	r0, [sp, #32]
 8009f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f66:	4b2d      	ldr	r3, [pc, #180]	; (800a01c <__ieee754_pow+0x740>)
 8009f68:	189b      	adds	r3, r3, r2
 8009f6a:	681e      	ldr	r6, [r3, #0]
 8009f6c:	685f      	ldr	r7, [r3, #4]
 8009f6e:	9a00      	ldr	r2, [sp, #0]
 8009f70:	9b01      	ldr	r3, [sp, #4]
 8009f72:	f7f6 fb8f 	bl	8000694 <__aeabi_dadd>
 8009f76:	0032      	movs	r2, r6
 8009f78:	003b      	movs	r3, r7
 8009f7a:	f7f6 fb8b 	bl	8000694 <__aeabi_dadd>
 8009f7e:	0022      	movs	r2, r4
 8009f80:	002b      	movs	r3, r5
 8009f82:	f7f6 fb87 	bl	8000694 <__aeabi_dadd>
 8009f86:	9804      	ldr	r0, [sp, #16]
 8009f88:	0022      	movs	r2, r4
 8009f8a:	002b      	movs	r3, r5
 8009f8c:	9004      	str	r0, [sp, #16]
 8009f8e:	9105      	str	r1, [sp, #20]
 8009f90:	f7f7 fd18 	bl	80019c4 <__aeabi_dsub>
 8009f94:	0032      	movs	r2, r6
 8009f96:	003b      	movs	r3, r7
 8009f98:	f7f7 fd14 	bl	80019c4 <__aeabi_dsub>
 8009f9c:	9a08      	ldr	r2, [sp, #32]
 8009f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa0:	f7f7 fd10 	bl	80019c4 <__aeabi_dsub>
 8009fa4:	0002      	movs	r2, r0
 8009fa6:	000b      	movs	r3, r1
 8009fa8:	9800      	ldr	r0, [sp, #0]
 8009faa:	9901      	ldr	r1, [sp, #4]
 8009fac:	e616      	b.n	8009bdc <__ieee754_pow+0x300>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4c03      	ldr	r4, [pc, #12]	; (8009fc0 <__ieee754_pow+0x6e4>)
 8009fb2:	e61f      	b.n	8009bf4 <__ieee754_pow+0x318>
 8009fb4:	000fffff 	.word	0x000fffff
 8009fb8:	43400000 	.word	0x43400000
 8009fbc:	fffffc01 	.word	0xfffffc01
 8009fc0:	3ff00000 	.word	0x3ff00000
 8009fc4:	0003988e 	.word	0x0003988e
 8009fc8:	000bb679 	.word	0x000bb679
 8009fcc:	fff00000 	.word	0xfff00000
 8009fd0:	0800ac18 	.word	0x0800ac18
 8009fd4:	4a454eef 	.word	0x4a454eef
 8009fd8:	3fca7e28 	.word	0x3fca7e28
 8009fdc:	93c9db65 	.word	0x93c9db65
 8009fe0:	3fcd864a 	.word	0x3fcd864a
 8009fe4:	a91d4101 	.word	0xa91d4101
 8009fe8:	3fd17460 	.word	0x3fd17460
 8009fec:	518f264d 	.word	0x518f264d
 8009ff0:	3fd55555 	.word	0x3fd55555
 8009ff4:	db6fabff 	.word	0xdb6fabff
 8009ff8:	3fdb6db6 	.word	0x3fdb6db6
 8009ffc:	33333303 	.word	0x33333303
 800a000:	3fe33333 	.word	0x3fe33333
 800a004:	40080000 	.word	0x40080000
 800a008:	3feec709 	.word	0x3feec709
 800a00c:	dc3a03fd 	.word	0xdc3a03fd
 800a010:	145b01f5 	.word	0x145b01f5
 800a014:	be3e2fe0 	.word	0xbe3e2fe0
 800a018:	0800ac38 	.word	0x0800ac38
 800a01c:	0800ac28 	.word	0x0800ac28
 800a020:	4a8f      	ldr	r2, [pc, #572]	; (800a260 <__ieee754_pow+0x984>)
 800a022:	4b90      	ldr	r3, [pc, #576]	; (800a264 <__ieee754_pow+0x988>)
 800a024:	9806      	ldr	r0, [sp, #24]
 800a026:	9907      	ldr	r1, [sp, #28]
 800a028:	f7f6 fb34 	bl	8000694 <__aeabi_dadd>
 800a02c:	0032      	movs	r2, r6
 800a02e:	9002      	str	r0, [sp, #8]
 800a030:	9103      	str	r1, [sp, #12]
 800a032:	003b      	movs	r3, r7
 800a034:	0028      	movs	r0, r5
 800a036:	0021      	movs	r1, r4
 800a038:	f7f7 fcc4 	bl	80019c4 <__aeabi_dsub>
 800a03c:	0002      	movs	r2, r0
 800a03e:	000b      	movs	r3, r1
 800a040:	9802      	ldr	r0, [sp, #8]
 800a042:	9903      	ldr	r1, [sp, #12]
 800a044:	f7f6 fa12 	bl	800046c <__aeabi_dcmpgt>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d000      	beq.n	800a04e <__ieee754_pow+0x772>
 800a04c:	e60d      	b.n	8009c6a <__ieee754_pow+0x38e>
 800a04e:	2100      	movs	r1, #0
 800a050:	4a85      	ldr	r2, [pc, #532]	; (800a268 <__ieee754_pow+0x98c>)
 800a052:	0063      	lsls	r3, r4, #1
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	9102      	str	r1, [sp, #8]
 800a058:	4293      	cmp	r3, r2
 800a05a:	dd25      	ble.n	800a0a8 <__ieee754_pow+0x7cc>
 800a05c:	4a83      	ldr	r2, [pc, #524]	; (800a26c <__ieee754_pow+0x990>)
 800a05e:	151b      	asrs	r3, r3, #20
 800a060:	189b      	adds	r3, r3, r2
 800a062:	2280      	movs	r2, #128	; 0x80
 800a064:	0352      	lsls	r2, r2, #13
 800a066:	4694      	mov	ip, r2
 800a068:	411a      	asrs	r2, r3
 800a06a:	1914      	adds	r4, r2, r4
 800a06c:	0060      	lsls	r0, r4, #1
 800a06e:	4b80      	ldr	r3, [pc, #512]	; (800a270 <__ieee754_pow+0x994>)
 800a070:	0d40      	lsrs	r0, r0, #21
 800a072:	4d80      	ldr	r5, [pc, #512]	; (800a274 <__ieee754_pow+0x998>)
 800a074:	18c0      	adds	r0, r0, r3
 800a076:	4105      	asrs	r5, r0
 800a078:	0021      	movs	r1, r4
 800a07a:	43a9      	bics	r1, r5
 800a07c:	000b      	movs	r3, r1
 800a07e:	4661      	mov	r1, ip
 800a080:	0324      	lsls	r4, r4, #12
 800a082:	0b24      	lsrs	r4, r4, #12
 800a084:	4321      	orrs	r1, r4
 800a086:	2414      	movs	r4, #20
 800a088:	1a20      	subs	r0, r4, r0
 800a08a:	4101      	asrs	r1, r0
 800a08c:	9102      	str	r1, [sp, #8]
 800a08e:	9908      	ldr	r1, [sp, #32]
 800a090:	2200      	movs	r2, #0
 800a092:	2900      	cmp	r1, #0
 800a094:	da02      	bge.n	800a09c <__ieee754_pow+0x7c0>
 800a096:	9902      	ldr	r1, [sp, #8]
 800a098:	4249      	negs	r1, r1
 800a09a:	9102      	str	r1, [sp, #8]
 800a09c:	0030      	movs	r0, r6
 800a09e:	0039      	movs	r1, r7
 800a0a0:	f7f7 fc90 	bl	80019c4 <__aeabi_dsub>
 800a0a4:	9004      	str	r0, [sp, #16]
 800a0a6:	9105      	str	r1, [sp, #20]
 800a0a8:	9a06      	ldr	r2, [sp, #24]
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	9804      	ldr	r0, [sp, #16]
 800a0ae:	9905      	ldr	r1, [sp, #20]
 800a0b0:	2600      	movs	r6, #0
 800a0b2:	f7f6 faef 	bl	8000694 <__aeabi_dadd>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	4b6f      	ldr	r3, [pc, #444]	; (800a278 <__ieee754_pow+0x99c>)
 800a0ba:	0030      	movs	r0, r6
 800a0bc:	000f      	movs	r7, r1
 800a0be:	f7f7 fa0f 	bl	80014e0 <__aeabi_dmul>
 800a0c2:	9a04      	ldr	r2, [sp, #16]
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	9008      	str	r0, [sp, #32]
 800a0c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a0ca:	0030      	movs	r0, r6
 800a0cc:	0039      	movs	r1, r7
 800a0ce:	f7f7 fc79 	bl	80019c4 <__aeabi_dsub>
 800a0d2:	0002      	movs	r2, r0
 800a0d4:	000b      	movs	r3, r1
 800a0d6:	9806      	ldr	r0, [sp, #24]
 800a0d8:	9907      	ldr	r1, [sp, #28]
 800a0da:	f7f7 fc73 	bl	80019c4 <__aeabi_dsub>
 800a0de:	4a67      	ldr	r2, [pc, #412]	; (800a27c <__ieee754_pow+0x9a0>)
 800a0e0:	4b67      	ldr	r3, [pc, #412]	; (800a280 <__ieee754_pow+0x9a4>)
 800a0e2:	f7f7 f9fd 	bl	80014e0 <__aeabi_dmul>
 800a0e6:	4a67      	ldr	r2, [pc, #412]	; (800a284 <__ieee754_pow+0x9a8>)
 800a0e8:	0004      	movs	r4, r0
 800a0ea:	000d      	movs	r5, r1
 800a0ec:	4b66      	ldr	r3, [pc, #408]	; (800a288 <__ieee754_pow+0x9ac>)
 800a0ee:	0030      	movs	r0, r6
 800a0f0:	0039      	movs	r1, r7
 800a0f2:	f7f7 f9f5 	bl	80014e0 <__aeabi_dmul>
 800a0f6:	0002      	movs	r2, r0
 800a0f8:	000b      	movs	r3, r1
 800a0fa:	0020      	movs	r0, r4
 800a0fc:	0029      	movs	r1, r5
 800a0fe:	f7f6 fac9 	bl	8000694 <__aeabi_dadd>
 800a102:	0004      	movs	r4, r0
 800a104:	000d      	movs	r5, r1
 800a106:	0002      	movs	r2, r0
 800a108:	000b      	movs	r3, r1
 800a10a:	9808      	ldr	r0, [sp, #32]
 800a10c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a10e:	f7f6 fac1 	bl	8000694 <__aeabi_dadd>
 800a112:	9a08      	ldr	r2, [sp, #32]
 800a114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a116:	0006      	movs	r6, r0
 800a118:	000f      	movs	r7, r1
 800a11a:	f7f7 fc53 	bl	80019c4 <__aeabi_dsub>
 800a11e:	0002      	movs	r2, r0
 800a120:	000b      	movs	r3, r1
 800a122:	0020      	movs	r0, r4
 800a124:	0029      	movs	r1, r5
 800a126:	f7f7 fc4d 	bl	80019c4 <__aeabi_dsub>
 800a12a:	0032      	movs	r2, r6
 800a12c:	9004      	str	r0, [sp, #16]
 800a12e:	9105      	str	r1, [sp, #20]
 800a130:	003b      	movs	r3, r7
 800a132:	0030      	movs	r0, r6
 800a134:	0039      	movs	r1, r7
 800a136:	f7f7 f9d3 	bl	80014e0 <__aeabi_dmul>
 800a13a:	0004      	movs	r4, r0
 800a13c:	000d      	movs	r5, r1
 800a13e:	4a53      	ldr	r2, [pc, #332]	; (800a28c <__ieee754_pow+0x9b0>)
 800a140:	4b53      	ldr	r3, [pc, #332]	; (800a290 <__ieee754_pow+0x9b4>)
 800a142:	f7f7 f9cd 	bl	80014e0 <__aeabi_dmul>
 800a146:	4a53      	ldr	r2, [pc, #332]	; (800a294 <__ieee754_pow+0x9b8>)
 800a148:	4b53      	ldr	r3, [pc, #332]	; (800a298 <__ieee754_pow+0x9bc>)
 800a14a:	f7f7 fc3b 	bl	80019c4 <__aeabi_dsub>
 800a14e:	0022      	movs	r2, r4
 800a150:	002b      	movs	r3, r5
 800a152:	f7f7 f9c5 	bl	80014e0 <__aeabi_dmul>
 800a156:	4a51      	ldr	r2, [pc, #324]	; (800a29c <__ieee754_pow+0x9c0>)
 800a158:	4b51      	ldr	r3, [pc, #324]	; (800a2a0 <__ieee754_pow+0x9c4>)
 800a15a:	f7f6 fa9b 	bl	8000694 <__aeabi_dadd>
 800a15e:	0022      	movs	r2, r4
 800a160:	002b      	movs	r3, r5
 800a162:	f7f7 f9bd 	bl	80014e0 <__aeabi_dmul>
 800a166:	4a4f      	ldr	r2, [pc, #316]	; (800a2a4 <__ieee754_pow+0x9c8>)
 800a168:	4b4f      	ldr	r3, [pc, #316]	; (800a2a8 <__ieee754_pow+0x9cc>)
 800a16a:	f7f7 fc2b 	bl	80019c4 <__aeabi_dsub>
 800a16e:	0022      	movs	r2, r4
 800a170:	002b      	movs	r3, r5
 800a172:	f7f7 f9b5 	bl	80014e0 <__aeabi_dmul>
 800a176:	4a4d      	ldr	r2, [pc, #308]	; (800a2ac <__ieee754_pow+0x9d0>)
 800a178:	4b4d      	ldr	r3, [pc, #308]	; (800a2b0 <__ieee754_pow+0x9d4>)
 800a17a:	f7f6 fa8b 	bl	8000694 <__aeabi_dadd>
 800a17e:	0022      	movs	r2, r4
 800a180:	002b      	movs	r3, r5
 800a182:	f7f7 f9ad 	bl	80014e0 <__aeabi_dmul>
 800a186:	0002      	movs	r2, r0
 800a188:	000b      	movs	r3, r1
 800a18a:	0030      	movs	r0, r6
 800a18c:	0039      	movs	r1, r7
 800a18e:	f7f7 fc19 	bl	80019c4 <__aeabi_dsub>
 800a192:	0004      	movs	r4, r0
 800a194:	000d      	movs	r5, r1
 800a196:	0002      	movs	r2, r0
 800a198:	000b      	movs	r3, r1
 800a19a:	0030      	movs	r0, r6
 800a19c:	0039      	movs	r1, r7
 800a19e:	f7f7 f99f 	bl	80014e0 <__aeabi_dmul>
 800a1a2:	2380      	movs	r3, #128	; 0x80
 800a1a4:	9006      	str	r0, [sp, #24]
 800a1a6:	9107      	str	r1, [sp, #28]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	05db      	lsls	r3, r3, #23
 800a1ac:	0020      	movs	r0, r4
 800a1ae:	0029      	movs	r1, r5
 800a1b0:	f7f7 fc08 	bl	80019c4 <__aeabi_dsub>
 800a1b4:	0002      	movs	r2, r0
 800a1b6:	000b      	movs	r3, r1
 800a1b8:	9806      	ldr	r0, [sp, #24]
 800a1ba:	9907      	ldr	r1, [sp, #28]
 800a1bc:	f7f6 fd86 	bl	8000ccc <__aeabi_ddiv>
 800a1c0:	9a04      	ldr	r2, [sp, #16]
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	0004      	movs	r4, r0
 800a1c6:	000d      	movs	r5, r1
 800a1c8:	0030      	movs	r0, r6
 800a1ca:	0039      	movs	r1, r7
 800a1cc:	f7f7 f988 	bl	80014e0 <__aeabi_dmul>
 800a1d0:	9a04      	ldr	r2, [sp, #16]
 800a1d2:	9b05      	ldr	r3, [sp, #20]
 800a1d4:	f7f6 fa5e 	bl	8000694 <__aeabi_dadd>
 800a1d8:	0002      	movs	r2, r0
 800a1da:	000b      	movs	r3, r1
 800a1dc:	0020      	movs	r0, r4
 800a1de:	0029      	movs	r1, r5
 800a1e0:	f7f7 fbf0 	bl	80019c4 <__aeabi_dsub>
 800a1e4:	0032      	movs	r2, r6
 800a1e6:	003b      	movs	r3, r7
 800a1e8:	f7f7 fbec 	bl	80019c4 <__aeabi_dsub>
 800a1ec:	0002      	movs	r2, r0
 800a1ee:	000b      	movs	r3, r1
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	4930      	ldr	r1, [pc, #192]	; (800a2b4 <__ieee754_pow+0x9d8>)
 800a1f4:	f7f7 fbe6 	bl	80019c4 <__aeabi_dsub>
 800a1f8:	9b02      	ldr	r3, [sp, #8]
 800a1fa:	051b      	lsls	r3, r3, #20
 800a1fc:	185b      	adds	r3, r3, r1
 800a1fe:	151a      	asrs	r2, r3, #20
 800a200:	2a00      	cmp	r2, #0
 800a202:	dc26      	bgt.n	800a252 <__ieee754_pow+0x976>
 800a204:	9a02      	ldr	r2, [sp, #8]
 800a206:	f000 f9ad 	bl	800a564 <scalbn>
 800a20a:	9a00      	ldr	r2, [sp, #0]
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	f7ff fc04 	bl	8009a1a <__ieee754_pow+0x13e>
 800a212:	4a29      	ldr	r2, [pc, #164]	; (800a2b8 <__ieee754_pow+0x9dc>)
 800a214:	004b      	lsls	r3, r1, #1
 800a216:	085b      	lsrs	r3, r3, #1
 800a218:	4293      	cmp	r3, r2
 800a21a:	dc00      	bgt.n	800a21e <__ieee754_pow+0x942>
 800a21c:	e717      	b.n	800a04e <__ieee754_pow+0x772>
 800a21e:	4b27      	ldr	r3, [pc, #156]	; (800a2bc <__ieee754_pow+0x9e0>)
 800a220:	18cb      	adds	r3, r1, r3
 800a222:	4303      	orrs	r3, r0
 800a224:	d009      	beq.n	800a23a <__ieee754_pow+0x95e>
 800a226:	9800      	ldr	r0, [sp, #0]
 800a228:	9901      	ldr	r1, [sp, #4]
 800a22a:	4a25      	ldr	r2, [pc, #148]	; (800a2c0 <__ieee754_pow+0x9e4>)
 800a22c:	4b25      	ldr	r3, [pc, #148]	; (800a2c4 <__ieee754_pow+0x9e8>)
 800a22e:	f7f7 f957 	bl	80014e0 <__aeabi_dmul>
 800a232:	4a23      	ldr	r2, [pc, #140]	; (800a2c0 <__ieee754_pow+0x9e4>)
 800a234:	4b23      	ldr	r3, [pc, #140]	; (800a2c4 <__ieee754_pow+0x9e8>)
 800a236:	f7ff fbf0 	bl	8009a1a <__ieee754_pow+0x13e>
 800a23a:	0032      	movs	r2, r6
 800a23c:	003b      	movs	r3, r7
 800a23e:	f7f7 fbc1 	bl	80019c4 <__aeabi_dsub>
 800a242:	9a06      	ldr	r2, [sp, #24]
 800a244:	9b07      	ldr	r3, [sp, #28]
 800a246:	f7f6 f91b 	bl	8000480 <__aeabi_dcmpge>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d100      	bne.n	800a250 <__ieee754_pow+0x974>
 800a24e:	e6fe      	b.n	800a04e <__ieee754_pow+0x772>
 800a250:	e7e9      	b.n	800a226 <__ieee754_pow+0x94a>
 800a252:	0019      	movs	r1, r3
 800a254:	e7d9      	b.n	800a20a <__ieee754_pow+0x92e>
 800a256:	2300      	movs	r3, #0
 800a258:	4c16      	ldr	r4, [pc, #88]	; (800a2b4 <__ieee754_pow+0x9d8>)
 800a25a:	f7ff fba1 	bl	80099a0 <__ieee754_pow+0xc4>
 800a25e:	46c0      	nop			; (mov r8, r8)
 800a260:	652b82fe 	.word	0x652b82fe
 800a264:	3c971547 	.word	0x3c971547
 800a268:	3fe00000 	.word	0x3fe00000
 800a26c:	fffffc02 	.word	0xfffffc02
 800a270:	fffffc01 	.word	0xfffffc01
 800a274:	000fffff 	.word	0x000fffff
 800a278:	3fe62e43 	.word	0x3fe62e43
 800a27c:	fefa39ef 	.word	0xfefa39ef
 800a280:	3fe62e42 	.word	0x3fe62e42
 800a284:	0ca86c39 	.word	0x0ca86c39
 800a288:	be205c61 	.word	0xbe205c61
 800a28c:	72bea4d0 	.word	0x72bea4d0
 800a290:	3e663769 	.word	0x3e663769
 800a294:	c5d26bf1 	.word	0xc5d26bf1
 800a298:	3ebbbd41 	.word	0x3ebbbd41
 800a29c:	af25de2c 	.word	0xaf25de2c
 800a2a0:	3f11566a 	.word	0x3f11566a
 800a2a4:	16bebd93 	.word	0x16bebd93
 800a2a8:	3f66c16c 	.word	0x3f66c16c
 800a2ac:	5555553e 	.word	0x5555553e
 800a2b0:	3fc55555 	.word	0x3fc55555
 800a2b4:	3ff00000 	.word	0x3ff00000
 800a2b8:	4090cbff 	.word	0x4090cbff
 800a2bc:	3f6f3400 	.word	0x3f6f3400
 800a2c0:	c2f8f359 	.word	0xc2f8f359
 800a2c4:	01a56e1f 	.word	0x01a56e1f

0800a2c8 <__ieee754_sqrt>:
 800a2c8:	4b55      	ldr	r3, [pc, #340]	; (800a420 <__ieee754_sqrt+0x158>)
 800a2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2cc:	001a      	movs	r2, r3
 800a2ce:	0005      	movs	r5, r0
 800a2d0:	000c      	movs	r4, r1
 800a2d2:	400a      	ands	r2, r1
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d10f      	bne.n	800a2f8 <__ieee754_sqrt+0x30>
 800a2d8:	0002      	movs	r2, r0
 800a2da:	000b      	movs	r3, r1
 800a2dc:	f7f7 f900 	bl	80014e0 <__aeabi_dmul>
 800a2e0:	0002      	movs	r2, r0
 800a2e2:	000b      	movs	r3, r1
 800a2e4:	0028      	movs	r0, r5
 800a2e6:	0021      	movs	r1, r4
 800a2e8:	f7f6 f9d4 	bl	8000694 <__aeabi_dadd>
 800a2ec:	0005      	movs	r5, r0
 800a2ee:	000c      	movs	r4, r1
 800a2f0:	0028      	movs	r0, r5
 800a2f2:	0021      	movs	r1, r4
 800a2f4:	b003      	add	sp, #12
 800a2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f8:	0002      	movs	r2, r0
 800a2fa:	2900      	cmp	r1, #0
 800a2fc:	dc10      	bgt.n	800a320 <__ieee754_sqrt+0x58>
 800a2fe:	004b      	lsls	r3, r1, #1
 800a300:	085b      	lsrs	r3, r3, #1
 800a302:	4303      	orrs	r3, r0
 800a304:	d0f4      	beq.n	800a2f0 <__ieee754_sqrt+0x28>
 800a306:	2000      	movs	r0, #0
 800a308:	4281      	cmp	r1, r0
 800a30a:	d100      	bne.n	800a30e <__ieee754_sqrt+0x46>
 800a30c:	e07f      	b.n	800a40e <__ieee754_sqrt+0x146>
 800a30e:	000b      	movs	r3, r1
 800a310:	0028      	movs	r0, r5
 800a312:	f7f7 fb57 	bl	80019c4 <__aeabi_dsub>
 800a316:	0002      	movs	r2, r0
 800a318:	000b      	movs	r3, r1
 800a31a:	f7f6 fcd7 	bl	8000ccc <__aeabi_ddiv>
 800a31e:	e7e5      	b.n	800a2ec <__ieee754_sqrt+0x24>
 800a320:	1508      	asrs	r0, r1, #20
 800a322:	d074      	beq.n	800a40e <__ieee754_sqrt+0x146>
 800a324:	4b3f      	ldr	r3, [pc, #252]	; (800a424 <__ieee754_sqrt+0x15c>)
 800a326:	0309      	lsls	r1, r1, #12
 800a328:	18c0      	adds	r0, r0, r3
 800a32a:	2380      	movs	r3, #128	; 0x80
 800a32c:	0b09      	lsrs	r1, r1, #12
 800a32e:	035b      	lsls	r3, r3, #13
 800a330:	4319      	orrs	r1, r3
 800a332:	07c3      	lsls	r3, r0, #31
 800a334:	d503      	bpl.n	800a33e <__ieee754_sqrt+0x76>
 800a336:	0fd3      	lsrs	r3, r2, #31
 800a338:	0049      	lsls	r1, r1, #1
 800a33a:	18c9      	adds	r1, r1, r3
 800a33c:	0052      	lsls	r2, r2, #1
 800a33e:	2400      	movs	r4, #0
 800a340:	1043      	asrs	r3, r0, #1
 800a342:	0049      	lsls	r1, r1, #1
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	2580      	movs	r5, #128	; 0x80
 800a348:	0fd3      	lsrs	r3, r2, #31
 800a34a:	18cb      	adds	r3, r1, r3
 800a34c:	0020      	movs	r0, r4
 800a34e:	2116      	movs	r1, #22
 800a350:	0052      	lsls	r2, r2, #1
 800a352:	03ad      	lsls	r5, r5, #14
 800a354:	1946      	adds	r6, r0, r5
 800a356:	429e      	cmp	r6, r3
 800a358:	dc02      	bgt.n	800a360 <__ieee754_sqrt+0x98>
 800a35a:	1970      	adds	r0, r6, r5
 800a35c:	1b9b      	subs	r3, r3, r6
 800a35e:	1964      	adds	r4, r4, r5
 800a360:	0fd6      	lsrs	r6, r2, #31
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	3901      	subs	r1, #1
 800a366:	199b      	adds	r3, r3, r6
 800a368:	0052      	lsls	r2, r2, #1
 800a36a:	086d      	lsrs	r5, r5, #1
 800a36c:	2900      	cmp	r1, #0
 800a36e:	d1f1      	bne.n	800a354 <__ieee754_sqrt+0x8c>
 800a370:	2520      	movs	r5, #32
 800a372:	2680      	movs	r6, #128	; 0x80
 800a374:	46ac      	mov	ip, r5
 800a376:	9100      	str	r1, [sp, #0]
 800a378:	0636      	lsls	r6, r6, #24
 800a37a:	9d00      	ldr	r5, [sp, #0]
 800a37c:	1977      	adds	r7, r6, r5
 800a37e:	4283      	cmp	r3, r0
 800a380:	dc02      	bgt.n	800a388 <__ieee754_sqrt+0xc0>
 800a382:	d112      	bne.n	800a3aa <__ieee754_sqrt+0xe2>
 800a384:	4297      	cmp	r7, r2
 800a386:	d810      	bhi.n	800a3aa <__ieee754_sqrt+0xe2>
 800a388:	19bd      	adds	r5, r7, r6
 800a38a:	9500      	str	r5, [sp, #0]
 800a38c:	0005      	movs	r5, r0
 800a38e:	2f00      	cmp	r7, #0
 800a390:	da03      	bge.n	800a39a <__ieee754_sqrt+0xd2>
 800a392:	9d00      	ldr	r5, [sp, #0]
 800a394:	43ed      	mvns	r5, r5
 800a396:	0fed      	lsrs	r5, r5, #31
 800a398:	1945      	adds	r5, r0, r5
 800a39a:	1a1b      	subs	r3, r3, r0
 800a39c:	42ba      	cmp	r2, r7
 800a39e:	4180      	sbcs	r0, r0
 800a3a0:	4240      	negs	r0, r0
 800a3a2:	1a1b      	subs	r3, r3, r0
 800a3a4:	0028      	movs	r0, r5
 800a3a6:	1bd2      	subs	r2, r2, r7
 800a3a8:	1989      	adds	r1, r1, r6
 800a3aa:	0fd5      	lsrs	r5, r2, #31
 800a3ac:	005b      	lsls	r3, r3, #1
 800a3ae:	18eb      	adds	r3, r5, r3
 800a3b0:	2501      	movs	r5, #1
 800a3b2:	426d      	negs	r5, r5
 800a3b4:	44ac      	add	ip, r5
 800a3b6:	4665      	mov	r5, ip
 800a3b8:	0052      	lsls	r2, r2, #1
 800a3ba:	0876      	lsrs	r6, r6, #1
 800a3bc:	2d00      	cmp	r5, #0
 800a3be:	d1dc      	bne.n	800a37a <__ieee754_sqrt+0xb2>
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <__ieee754_sqrt+0x104>
 800a3c4:	1c4b      	adds	r3, r1, #1
 800a3c6:	d127      	bne.n	800a418 <__ieee754_sqrt+0x150>
 800a3c8:	4661      	mov	r1, ip
 800a3ca:	3401      	adds	r4, #1
 800a3cc:	4b16      	ldr	r3, [pc, #88]	; (800a428 <__ieee754_sqrt+0x160>)
 800a3ce:	1060      	asrs	r0, r4, #1
 800a3d0:	18c0      	adds	r0, r0, r3
 800a3d2:	0849      	lsrs	r1, r1, #1
 800a3d4:	07e3      	lsls	r3, r4, #31
 800a3d6:	d502      	bpl.n	800a3de <__ieee754_sqrt+0x116>
 800a3d8:	2380      	movs	r3, #128	; 0x80
 800a3da:	061b      	lsls	r3, r3, #24
 800a3dc:	4319      	orrs	r1, r3
 800a3de:	9b01      	ldr	r3, [sp, #4]
 800a3e0:	000d      	movs	r5, r1
 800a3e2:	051c      	lsls	r4, r3, #20
 800a3e4:	1823      	adds	r3, r4, r0
 800a3e6:	001c      	movs	r4, r3
 800a3e8:	e782      	b.n	800a2f0 <__ieee754_sqrt+0x28>
 800a3ea:	0ad1      	lsrs	r1, r2, #11
 800a3ec:	3b15      	subs	r3, #21
 800a3ee:	0552      	lsls	r2, r2, #21
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	d0fa      	beq.n	800a3ea <__ieee754_sqrt+0x122>
 800a3f4:	2480      	movs	r4, #128	; 0x80
 800a3f6:	0364      	lsls	r4, r4, #13
 800a3f8:	4221      	tst	r1, r4
 800a3fa:	d00a      	beq.n	800a412 <__ieee754_sqrt+0x14a>
 800a3fc:	2420      	movs	r4, #32
 800a3fe:	0016      	movs	r6, r2
 800a400:	1a24      	subs	r4, r4, r0
 800a402:	40e6      	lsrs	r6, r4
 800a404:	1e45      	subs	r5, r0, #1
 800a406:	4082      	lsls	r2, r0
 800a408:	4331      	orrs	r1, r6
 800a40a:	1b58      	subs	r0, r3, r5
 800a40c:	e78a      	b.n	800a324 <__ieee754_sqrt+0x5c>
 800a40e:	2300      	movs	r3, #0
 800a410:	e7ee      	b.n	800a3f0 <__ieee754_sqrt+0x128>
 800a412:	0049      	lsls	r1, r1, #1
 800a414:	3001      	adds	r0, #1
 800a416:	e7ef      	b.n	800a3f8 <__ieee754_sqrt+0x130>
 800a418:	2301      	movs	r3, #1
 800a41a:	3101      	adds	r1, #1
 800a41c:	4399      	bics	r1, r3
 800a41e:	e7d5      	b.n	800a3cc <__ieee754_sqrt+0x104>
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	fffffc01 	.word	0xfffffc01
 800a428:	3fe00000 	.word	0x3fe00000

0800a42c <fabs>:
 800a42c:	0049      	lsls	r1, r1, #1
 800a42e:	084b      	lsrs	r3, r1, #1
 800a430:	0019      	movs	r1, r3
 800a432:	4770      	bx	lr

0800a434 <finite>:
 800a434:	0048      	lsls	r0, r1, #1
 800a436:	4b02      	ldr	r3, [pc, #8]	; (800a440 <finite+0xc>)
 800a438:	0840      	lsrs	r0, r0, #1
 800a43a:	18c0      	adds	r0, r0, r3
 800a43c:	0fc0      	lsrs	r0, r0, #31
 800a43e:	4770      	bx	lr
 800a440:	80100000 	.word	0x80100000

0800a444 <matherr>:
 800a444:	2000      	movs	r0, #0
 800a446:	4770      	bx	lr

0800a448 <nan>:
 800a448:	2000      	movs	r0, #0
 800a44a:	4901      	ldr	r1, [pc, #4]	; (800a450 <nan+0x8>)
 800a44c:	4770      	bx	lr
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	7ff80000 	.word	0x7ff80000

0800a454 <rint>:
 800a454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a456:	004a      	lsls	r2, r1, #1
 800a458:	4e3e      	ldr	r6, [pc, #248]	; (800a554 <rint+0x100>)
 800a45a:	0d52      	lsrs	r2, r2, #21
 800a45c:	b085      	sub	sp, #20
 800a45e:	1996      	adds	r6, r2, r6
 800a460:	000d      	movs	r5, r1
 800a462:	9101      	str	r1, [sp, #4]
 800a464:	0003      	movs	r3, r0
 800a466:	0fcc      	lsrs	r4, r1, #31
 800a468:	2e13      	cmp	r6, #19
 800a46a:	dc57      	bgt.n	800a51c <rint+0xc8>
 800a46c:	2e00      	cmp	r6, #0
 800a46e:	da2a      	bge.n	800a4c6 <rint+0x72>
 800a470:	004a      	lsls	r2, r1, #1
 800a472:	0852      	lsrs	r2, r2, #1
 800a474:	4302      	orrs	r2, r0
 800a476:	d024      	beq.n	800a4c2 <rint+0x6e>
 800a478:	030a      	lsls	r2, r1, #12
 800a47a:	0b12      	lsrs	r2, r2, #12
 800a47c:	4302      	orrs	r2, r0
 800a47e:	4253      	negs	r3, r2
 800a480:	4313      	orrs	r3, r2
 800a482:	2280      	movs	r2, #128	; 0x80
 800a484:	0c4d      	lsrs	r5, r1, #17
 800a486:	0312      	lsls	r2, r2, #12
 800a488:	0b1b      	lsrs	r3, r3, #12
 800a48a:	4013      	ands	r3, r2
 800a48c:	046d      	lsls	r5, r5, #17
 800a48e:	432b      	orrs	r3, r5
 800a490:	0019      	movs	r1, r3
 800a492:	4b31      	ldr	r3, [pc, #196]	; (800a558 <rint+0x104>)
 800a494:	00e2      	lsls	r2, r4, #3
 800a496:	189b      	adds	r3, r3, r2
 800a498:	681e      	ldr	r6, [r3, #0]
 800a49a:	685f      	ldr	r7, [r3, #4]
 800a49c:	0002      	movs	r2, r0
 800a49e:	000b      	movs	r3, r1
 800a4a0:	0030      	movs	r0, r6
 800a4a2:	0039      	movs	r1, r7
 800a4a4:	f7f6 f8f6 	bl	8000694 <__aeabi_dadd>
 800a4a8:	9002      	str	r0, [sp, #8]
 800a4aa:	9103      	str	r1, [sp, #12]
 800a4ac:	9802      	ldr	r0, [sp, #8]
 800a4ae:	9903      	ldr	r1, [sp, #12]
 800a4b0:	003b      	movs	r3, r7
 800a4b2:	0032      	movs	r2, r6
 800a4b4:	f7f7 fa86 	bl	80019c4 <__aeabi_dsub>
 800a4b8:	004b      	lsls	r3, r1, #1
 800a4ba:	085b      	lsrs	r3, r3, #1
 800a4bc:	07e4      	lsls	r4, r4, #31
 800a4be:	4323      	orrs	r3, r4
 800a4c0:	0019      	movs	r1, r3
 800a4c2:	b005      	add	sp, #20
 800a4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c6:	4a25      	ldr	r2, [pc, #148]	; (800a55c <rint+0x108>)
 800a4c8:	4132      	asrs	r2, r6
 800a4ca:	0017      	movs	r7, r2
 800a4cc:	400f      	ands	r7, r1
 800a4ce:	4307      	orrs	r7, r0
 800a4d0:	d0f7      	beq.n	800a4c2 <rint+0x6e>
 800a4d2:	0852      	lsrs	r2, r2, #1
 800a4d4:	0011      	movs	r1, r2
 800a4d6:	4029      	ands	r1, r5
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	d00a      	beq.n	800a4f2 <rint+0x9e>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	2e13      	cmp	r6, #19
 800a4e0:	d101      	bne.n	800a4e6 <rint+0x92>
 800a4e2:	2380      	movs	r3, #128	; 0x80
 800a4e4:	061b      	lsls	r3, r3, #24
 800a4e6:	2780      	movs	r7, #128	; 0x80
 800a4e8:	02ff      	lsls	r7, r7, #11
 800a4ea:	4137      	asrs	r7, r6
 800a4ec:	4395      	bics	r5, r2
 800a4ee:	432f      	orrs	r7, r5
 800a4f0:	9701      	str	r7, [sp, #4]
 800a4f2:	9901      	ldr	r1, [sp, #4]
 800a4f4:	001a      	movs	r2, r3
 800a4f6:	000b      	movs	r3, r1
 800a4f8:	4917      	ldr	r1, [pc, #92]	; (800a558 <rint+0x104>)
 800a4fa:	00e4      	lsls	r4, r4, #3
 800a4fc:	190c      	adds	r4, r1, r4
 800a4fe:	6865      	ldr	r5, [r4, #4]
 800a500:	6824      	ldr	r4, [r4, #0]
 800a502:	0020      	movs	r0, r4
 800a504:	0029      	movs	r1, r5
 800a506:	f7f6 f8c5 	bl	8000694 <__aeabi_dadd>
 800a50a:	9002      	str	r0, [sp, #8]
 800a50c:	9103      	str	r1, [sp, #12]
 800a50e:	9802      	ldr	r0, [sp, #8]
 800a510:	9903      	ldr	r1, [sp, #12]
 800a512:	0022      	movs	r2, r4
 800a514:	002b      	movs	r3, r5
 800a516:	f7f7 fa55 	bl	80019c4 <__aeabi_dsub>
 800a51a:	e7d2      	b.n	800a4c2 <rint+0x6e>
 800a51c:	2e33      	cmp	r6, #51	; 0x33
 800a51e:	dd08      	ble.n	800a532 <rint+0xde>
 800a520:	2380      	movs	r3, #128	; 0x80
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	429e      	cmp	r6, r3
 800a526:	d1cc      	bne.n	800a4c2 <rint+0x6e>
 800a528:	0002      	movs	r2, r0
 800a52a:	000b      	movs	r3, r1
 800a52c:	f7f6 f8b2 	bl	8000694 <__aeabi_dadd>
 800a530:	e7c7      	b.n	800a4c2 <rint+0x6e>
 800a532:	2601      	movs	r6, #1
 800a534:	4d0a      	ldr	r5, [pc, #40]	; (800a560 <rint+0x10c>)
 800a536:	4276      	negs	r6, r6
 800a538:	1952      	adds	r2, r2, r5
 800a53a:	40d6      	lsrs	r6, r2
 800a53c:	4206      	tst	r6, r0
 800a53e:	d0c0      	beq.n	800a4c2 <rint+0x6e>
 800a540:	0876      	lsrs	r6, r6, #1
 800a542:	4206      	tst	r6, r0
 800a544:	d0d5      	beq.n	800a4f2 <rint+0x9e>
 800a546:	2180      	movs	r1, #128	; 0x80
 800a548:	05c9      	lsls	r1, r1, #23
 800a54a:	4111      	asrs	r1, r2
 800a54c:	43b3      	bics	r3, r6
 800a54e:	430b      	orrs	r3, r1
 800a550:	e7cf      	b.n	800a4f2 <rint+0x9e>
 800a552:	46c0      	nop			; (mov r8, r8)
 800a554:	fffffc01 	.word	0xfffffc01
 800a558:	0800ac48 	.word	0x0800ac48
 800a55c:	000fffff 	.word	0x000fffff
 800a560:	fffffbed 	.word	0xfffffbed

0800a564 <scalbn>:
 800a564:	004b      	lsls	r3, r1, #1
 800a566:	b570      	push	{r4, r5, r6, lr}
 800a568:	0d5b      	lsrs	r3, r3, #21
 800a56a:	0014      	movs	r4, r2
 800a56c:	000a      	movs	r2, r1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10d      	bne.n	800a58e <scalbn+0x2a>
 800a572:	004b      	lsls	r3, r1, #1
 800a574:	085b      	lsrs	r3, r3, #1
 800a576:	4303      	orrs	r3, r0
 800a578:	d010      	beq.n	800a59c <scalbn+0x38>
 800a57a:	4b21      	ldr	r3, [pc, #132]	; (800a600 <scalbn+0x9c>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	f7f6 ffaf 	bl	80014e0 <__aeabi_dmul>
 800a582:	4b20      	ldr	r3, [pc, #128]	; (800a604 <scalbn+0xa0>)
 800a584:	429c      	cmp	r4, r3
 800a586:	da0a      	bge.n	800a59e <scalbn+0x3a>
 800a588:	4a1f      	ldr	r2, [pc, #124]	; (800a608 <scalbn+0xa4>)
 800a58a:	4b20      	ldr	r3, [pc, #128]	; (800a60c <scalbn+0xa8>)
 800a58c:	e017      	b.n	800a5be <scalbn+0x5a>
 800a58e:	4d20      	ldr	r5, [pc, #128]	; (800a610 <scalbn+0xac>)
 800a590:	42ab      	cmp	r3, r5
 800a592:	d108      	bne.n	800a5a6 <scalbn+0x42>
 800a594:	0002      	movs	r2, r0
 800a596:	000b      	movs	r3, r1
 800a598:	f7f6 f87c 	bl	8000694 <__aeabi_dadd>
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	000a      	movs	r2, r1
 800a5a0:	004b      	lsls	r3, r1, #1
 800a5a2:	0d5b      	lsrs	r3, r3, #21
 800a5a4:	3b36      	subs	r3, #54	; 0x36
 800a5a6:	4d1b      	ldr	r5, [pc, #108]	; (800a614 <scalbn+0xb0>)
 800a5a8:	18e3      	adds	r3, r4, r3
 800a5aa:	42ab      	cmp	r3, r5
 800a5ac:	dd0a      	ble.n	800a5c4 <scalbn+0x60>
 800a5ae:	0002      	movs	r2, r0
 800a5b0:	000b      	movs	r3, r1
 800a5b2:	4819      	ldr	r0, [pc, #100]	; (800a618 <scalbn+0xb4>)
 800a5b4:	4919      	ldr	r1, [pc, #100]	; (800a61c <scalbn+0xb8>)
 800a5b6:	f000 f839 	bl	800a62c <copysign>
 800a5ba:	4a17      	ldr	r2, [pc, #92]	; (800a618 <scalbn+0xb4>)
 800a5bc:	4b17      	ldr	r3, [pc, #92]	; (800a61c <scalbn+0xb8>)
 800a5be:	f7f6 ff8f 	bl	80014e0 <__aeabi_dmul>
 800a5c2:	e7eb      	b.n	800a59c <scalbn+0x38>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dd05      	ble.n	800a5d4 <scalbn+0x70>
 800a5c8:	4c15      	ldr	r4, [pc, #84]	; (800a620 <scalbn+0xbc>)
 800a5ca:	051b      	lsls	r3, r3, #20
 800a5cc:	4022      	ands	r2, r4
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	0011      	movs	r1, r2
 800a5d2:	e7e3      	b.n	800a59c <scalbn+0x38>
 800a5d4:	001d      	movs	r5, r3
 800a5d6:	3535      	adds	r5, #53	; 0x35
 800a5d8:	da09      	bge.n	800a5ee <scalbn+0x8a>
 800a5da:	4b12      	ldr	r3, [pc, #72]	; (800a624 <scalbn+0xc0>)
 800a5dc:	0002      	movs	r2, r0
 800a5de:	429c      	cmp	r4, r3
 800a5e0:	dce6      	bgt.n	800a5b0 <scalbn+0x4c>
 800a5e2:	000b      	movs	r3, r1
 800a5e4:	4808      	ldr	r0, [pc, #32]	; (800a608 <scalbn+0xa4>)
 800a5e6:	4909      	ldr	r1, [pc, #36]	; (800a60c <scalbn+0xa8>)
 800a5e8:	f000 f820 	bl	800a62c <copysign>
 800a5ec:	e7cc      	b.n	800a588 <scalbn+0x24>
 800a5ee:	4c0c      	ldr	r4, [pc, #48]	; (800a620 <scalbn+0xbc>)
 800a5f0:	3336      	adds	r3, #54	; 0x36
 800a5f2:	4022      	ands	r2, r4
 800a5f4:	051b      	lsls	r3, r3, #20
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	0019      	movs	r1, r3
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <scalbn+0xc4>)
 800a5fe:	e7de      	b.n	800a5be <scalbn+0x5a>
 800a600:	43500000 	.word	0x43500000
 800a604:	ffff3cb0 	.word	0xffff3cb0
 800a608:	c2f8f359 	.word	0xc2f8f359
 800a60c:	01a56e1f 	.word	0x01a56e1f
 800a610:	000007ff 	.word	0x000007ff
 800a614:	000007fe 	.word	0x000007fe
 800a618:	8800759c 	.word	0x8800759c
 800a61c:	7e37e43c 	.word	0x7e37e43c
 800a620:	800fffff 	.word	0x800fffff
 800a624:	0000c350 	.word	0x0000c350
 800a628:	3c900000 	.word	0x3c900000

0800a62c <copysign>:
 800a62c:	b530      	push	{r4, r5, lr}
 800a62e:	004a      	lsls	r2, r1, #1
 800a630:	0fdb      	lsrs	r3, r3, #31
 800a632:	07db      	lsls	r3, r3, #31
 800a634:	0852      	lsrs	r2, r2, #1
 800a636:	431a      	orrs	r2, r3
 800a638:	0011      	movs	r1, r2
 800a63a:	bd30      	pop	{r4, r5, pc}

0800a63c <_init>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	46c0      	nop			; (mov r8, r8)
 800a640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a642:	bc08      	pop	{r3}
 800a644:	469e      	mov	lr, r3
 800a646:	4770      	bx	lr

0800a648 <_fini>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	46c0      	nop			; (mov r8, r8)
 800a64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64e:	bc08      	pop	{r3}
 800a650:	469e      	mov	lr, r3
 800a652:	4770      	bx	lr
